{
    "project": "pvt.cppan.demo.zeromq.libzmq",
    "cppan": "source:\n    git: https:\/\/github.com\/zeromq\/libzmq\n    branch: master\n\nversion: 4.3.1\n\ntype: library\n\nfiles:\n    -   builds\/cmake\/.*\n    -   include\/.*\n    -   src\/.*\n\noptions:\n    any:\n        link_libraries:\n            public:\n                -   Iphlpapi\n    shared:\n        definitions:\n            private:\n                -   DLL_EXPORT\n    static:\n        definitions:\n            public:\n                -   ZMQ_STATIC\n\npost_sources: |\n    include(CheckCXXCompilerFlag)\n    CHECK_CXX_COMPILER_FLAG(\"-std=gnu++11\" COMPILER_SUPPORTS_CXX11)\n    if(COMPILER_SUPPORTS_CXX11)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++11\")\n    endif()\n    include(CheckCCompilerFlag)\n    CHECK_C_COMPILER_FLAG(\"-std=gnu11\" COMPILER_SUPPORTS_C11)\n    if(COMPILER_SUPPORTS_C11)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=gnu11\")\n    endif()\n    \n    include (${SDIR}\/builds\/cmake\/Modules\/ZMQSupportMacros.cmake)\n    \n    if(NOT MSVC)\n        # clang 6 has a warning that does not make sense on multi-platform code\n        CHECK_CXX_COMPILER_FLAG(\"-Wno-tautological-constant-compare\" CXX_HAS_TAUT_WARNING)\n        if(CXX_HAS_TAUT_WARNING)\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-tautological-constant-compare\")\n        endif()\n        CHECK_C_COMPILER_FLAG(\"-Wno-tautological-constant-compare\" CC_HAS_TAUT_WARNING)\n        if(CC_HAS_TAUT_WARNING)\n            set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-tautological-constant-compare\")\n        endif()\n    endif()\n    \n    # Will be used to add flags to pkg-config useful when apps want to statically link\n    set (pkg_config_libs_private \"\")\n    \n    option (WITH_OPENPGM \"Build with support for OpenPGM\" OFF)\n    option (WITH_VMCI \"Build with support for VMware VMCI socket\" OFF)\n    \n    if (APPLE)\n        option (ZMQ_BUILD_FRAMEWORK \"Build as OS X framework\" OFF)\n    endif ()\n    \n    # Select curve encryption library, defaults to tweetnacl\n    # To use libsodium instead, use --with-libsodium (must be installed)\n    # To disable curve, use --disable-curve\n    \n    option (WITH_LIBSODIUM \"Use libsodium instead of built-in tweetnacl\" OFF)\n    option (ENABLE_CURVE \"Enable CURVE security\" ON)\n    \n    if (NOT ENABLE_CURVE)\n        message (STATUS \"CURVE security is disabled\")\n    \n    elseif (WITH_LIBSODIUM)\n        find_package (Sodium)\n        if (SODIUM_FOUND)\n            message (STATUS \"Using libsodium for CURVE security\")\n            include_directories (${SODIUM_INCLUDE_DIRS})\n            set (ZMQ_USE_LIBSODIUM 1)\n            set (ZMQ_HAVE_CURVE 1)\n            set (pkg_config_libs_private \"${pkg_config_libs_private} -lsodium\")\n        else ()\n            message (FATAL_ERROR\n                \"libsodium is not installed. Install it, then run CMake again\")\n        endif ()\n    \n    else ()\n        message (STATUS \"Using tweetnacl for CURVE security\")\n        list (APPEND sources ${CMAKE_CURRENT_SOURCE_DIR}\/src\/tweetnacl.c)\n        set (ZMQ_USE_TWEETNACL 1)\n        set (ZMQ_HAVE_CURVE 1)\n    endif ()\n    \n    set(SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n    \n    if (EXISTS \"${SOURCE_DIR}\/.git\")\n        OPTION (ENABLE_DRAFTS \"Build and install draft classes and methods\" ON)\n    else ()\n        OPTION (ENABLE_DRAFTS \"Build and install draft classes and methods\" OFF)\n    endif ()\n    IF (ENABLE_DRAFTS)\n        ADD_DEFINITIONS (-DZMQ_BUILD_DRAFT_API)\n        set (pkg_config_defines \"-DZMQ_BUILD_DRAFT_API=1\")\n    ELSE (ENABLE_DRAFTS)\n        set (pkg_config_defines \"\")\n    ENDIF (ENABLE_DRAFTS)\n    \n    option (WITH_MILITANT \"Enable militant assertions\" OFF)\n    if (WITH_MILITANT)\n        add_definitions(-DZMQ_ACT_MILITANT)\n    endif()\n    \n    set (API_POLLER \"\" CACHE STRING \"Choose polling system for zmq_poll(er)_*. valid values are\n                                poll or select [default=poll unless POLLER=select]\")\n    \n    set (POLLER \"\" CACHE STRING \"Choose polling system for I\/O threads. valid values are\n                                kqueue, epoll, devpoll, pollset, poll or select [default=autodetect]\")\n    \n    include (CheckFunctionExists)\n    include (CheckTypeSize)\n    \n    if (NOT MSVC)\n        if (POLLER STREQUAL \"\")\n            set (CMAKE_REQUIRED_INCLUDES sys\/event.h)\n            check_function_exists (kqueue HAVE_KQUEUE)\n            set (CMAKE_REQUIRED_INCLUDES)\n            if (HAVE_KQUEUE)\n                set (POLLER \"kqueue\")\n            endif()\n        endif ()\n    \n        if (POLLER STREQUAL \"\")\n            set (CMAKE_REQUIRED_INCLUDES sys\/epoll.h)\n            check_function_exists (epoll_create HAVE_EPOLL)\n            set (CMAKE_REQUIRED_INCLUDES)\n            if (HAVE_EPOLL)\n                set (POLLER \"epoll\")\n                check_function_exists (epoll_create1 HAVE_EPOLL_CLOEXEC)\n                if (HAVE_EPOLL_CLOEXEC)\n                    set (ZMQ_IOTHREAD_POLLER_USE_EPOLL_CLOEXEC 1)\n                endif ()\n            endif ()\n        endif ()\n    \n        if (POLLER STREQUAL \"\")\n            set (CMAKE_REQUIRED_INCLUDES sys\/devpoll.h)\n            check_type_size (\"struct pollfd\" DEVPOLL)\n            set (CMAKE_REQUIRED_INCLUDES)\n            if (HAVE_DEVPOLL)\n                set (POLLER \"devpoll\")\n            endif ()\n        endif ()\n    \n        if (POLLER STREQUAL \"\")\n            set (CMAKE_REQUIRED_INCLUDES sys\/pollset.h)\n            check_function_exists (pollset_create HAVE_POLLSET)\n            set (CMAKE_REQUIRED_INCLUDES)\n            if (HAVE_POLLSET)\n                set (POLLER \"pollset\")\n            endif()\n        endif ()\n    \n        if (POLLER STREQUAL \"\")\n            set (CMAKE_REQUIRED_INCLUDES poll.h)\n            check_function_exists (poll HAVE_POLL)\n            set (CMAKE_REQUIRED_INCLUDES)\n            if (HAVE_POLL)\n                set (POLLER \"poll\")\n            endif ()\n        endif ()\n    endif()\n    \n    if (POLLER STREQUAL \"\")\n        if (WIN32)\n            set (CMAKE_REQUIRED_INCLUDES winsock2.h)\n            set (HAVE_SELECT 1)\n        else ()\n            set (CMAKE_REQUIRED_INCLUDES sys\/select.h)\n            check_function_exists (select HAVE_SELECT)\n            set (CMAKE_REQUIRED_INCLUDES)\n        endif ()\n        if (HAVE_SELECT)\n            set (POLLER \"select\")\n        else ()\n            message (FATAL_ERROR\n                \"Could not autodetect polling method\")\n        endif ()\n    endif ()\n    \n    if (POLLER STREQUAL \"kqueue\"\n     OR POLLER STREQUAL \"epoll\"\n     OR POLLER STREQUAL \"devpoll\"\n     OR POLLER STREQUAL \"pollset\"\n     OR POLLER STREQUAL \"poll\"\n     OR POLLER STREQUAL \"select\")\n        message (STATUS \"Using polling method in I\/O threads: ${POLLER}\")\n        string (TOUPPER ${POLLER} UPPER_POLLER)\n        set (ZMQ_IOTHREAD_POLLER_USE_${UPPER_POLLER} 1)\n    else ()\n        message (FATAL_ERROR \"Invalid polling method\")\n    endif ()\n    \n    if (POLLER STREQUAL \"epoll\" AND WIN32)\n        message (STATUS \"Including wepoll\")\n        list (APPEND sources ${CMAKE_CURRENT_SOURCE_DIR}\/external\/wepoll\/wepoll.c ${CMAKE_CURRENT_SOURCE_DIR}\/external\/wepoll\/wepoll.h)\n    endif()\n    \n    if (API_POLLER STREQUAL \"\")\n        if (POLLER STREQUAL \"select\")\n            set (API_POLLER \"select\")\n        else()\n            set (API_POLLER \"poll\")\n        endif()\n    endif()\n    \n    message (STATUS \"Using polling method in zmq_poll(er)_* API: ${API_POLLER}\")\n        string (TOUPPER ${API_POLLER} UPPER_API_POLLER)\n    set (ZMQ_POLL_BASED_ON_${UPPER_API_POLLER} 1)\n    \n    \n    file(READ \"${SDIR}\/include\/zmq.h\" _ZMQ_H_CONTENTS)\n    string(REGEX REPLACE \".*#define ZMQ_VERSION_MAJOR ([0-9]+).*\" \"\\\\1\" ZMQ_VERSION_MAJOR \"${_ZMQ_H_CONTENTS}\")\n    string(REGEX REPLACE \".*#define ZMQ_VERSION_MINOR ([0-9]+).*\" \"\\\\1\" ZMQ_VERSION_MINOR \"${_ZMQ_H_CONTENTS}\")\n    string(REGEX REPLACE \".*#define ZMQ_VERSION_PATCH ([0-9]+).*\" \"\\\\1\" ZMQ_VERSION_PATCH \"${_ZMQ_H_CONTENTS}\")\n    set(ZMQ_VERSION \"${ZMQ_VERSION_MAJOR}.${ZMQ_VERSION_MINOR}.${ZMQ_VERSION_PATCH}\")\n    \n    message(STATUS \"Detected ZMQ Version - ${ZMQ_VERSION}\")\n    \n    if (NOT CMAKE_CROSSCOMPILING)\n      include (${SDIR}\/builds\/cmake\/Modules\/ZMQSourceRunChecks.cmake)\n    endif ()\n    include (CheckIncludeFiles)\n    include (CheckLibraryExists)\n    include (CheckCCompilerFlag)\n    include (CheckCXXCompilerFlag)\n    include (CheckCSourceCompiles)\n    include (CheckCSourceRuns)\n    include (CMakeDependentOption)\n    include (CheckCXXSymbolExists)\n    include (CheckSymbolExists)\n    \n    if (NOT CYGWIN)\n        # TODO cannot we simply do 'if (WIN32) set(ZMQ_HAVE_WINDOWS ON)' or similar?\n        check_include_files (windows.h ZMQ_HAVE_WINDOWS)\n    endif()\n    \n    if(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\" AND CMAKE_SYSTEM_VERSION STREQUAL \"10.0\")\n      SET(ZMQ_HAVE_WINDOWS_UWP ON)\n      ADD_DEFINITIONS(-D_WIN32_WINNT=_WIN32_WINNT_WIN10)\n    endif()\n    if (NOT MSVC)\n        check_include_files (ifaddrs.h ZMQ_HAVE_IFADDRS)\n        check_include_files (sys\/uio.h ZMQ_HAVE_UIO)\n        check_include_files (sys\/eventfd.h ZMQ_HAVE_EVENTFD)\n        if (ZMQ_HAVE_EVENTFD AND NOT CMAKE_CROSSCOMPILING)\n          zmq_check_efd_cloexec ()\n        endif ()\n    endif()\n    \n    if (ZMQ_HAVE_WINDOWS)\n      # Cannot use check_library_exists because the symbol is always declared as char(*)(void)\n      set(CMAKE_REQUIRED_LIBRARIES \"ws2_32.lib\")\n      check_symbol_exists (WSAStartup \"winsock2.h\" HAVE_WS2_32)\n    \n      set(CMAKE_REQUIRED_LIBRARIES \"rpcrt4.lib\")\n      check_symbol_exists (UuidCreateSequential \"rpc.h\" HAVE_RPCRT4)\n    \n      set(CMAKE_REQUIRED_LIBRARIES \"iphlpapi.lib\")\n      check_symbol_exists (GetAdaptersAddresses \"winsock2.h;iphlpapi.h\" HAVE_IPHLAPI)\n    \n      set(CMAKE_REQUIRED_LIBRARIES \"\")\n      # TODO: This not the symbol we're looking for. What is the symbol?\n      check_library_exists (ws2 fopen \"\" HAVE_WS2)\n    else()\n      check_cxx_symbol_exists (SO_PEERCRED sys\/socket.h ZMQ_HAVE_SO_PEERCRED)\n      check_cxx_symbol_exists (LOCAL_PEERCRED sys\/socket.h ZMQ_HAVE_LOCAL_PEERCRED)\n    endif()\n    \n    find_library (RT_LIBRARY rt)\n    \n    find_package (Threads)\n    \n    \n    if (WIN32 AND NOT CYGWIN)\n      if (NOT HAVE_WS2_32 AND NOT HAVE_WS2)\n        message (FATAL_ERROR \"Cannot link to ws2_32 or ws2\")\n      endif ()\n    \n      if (NOT HAVE_RPCRT4)\n        message (FATAL_ERROR \"Cannot link to rpcrt4\")\n      endif ()\n    \n      if (NOT HAVE_IPHLAPI)\n        message (FATAL_ERROR \"Cannot link to iphlapi\")\n      endif ()\n    endif ()\n    \n    if (NOT MSVC)\n        set (CMAKE_REQUIRED_LIBRARIES rt)\n        check_function_exists (clock_gettime HAVE_CLOCK_GETTIME)\n        set (CMAKE_REQUIRED_LIBRARIES)\n    \n        set (CMAKE_REQUIRED_INCLUDES unistd.h)\n        check_function_exists (fork HAVE_FORK)\n        set (CMAKE_REQUIRED_INCLUDES)\n    \n        set (CMAKE_REQUIRED_INCLUDES sys\/time.h)\n        check_function_exists (gethrtime HAVE_GETHRTIME)\n        set (CMAKE_REQUIRED_INCLUDES)\n    \n        set (CMAKE_REQUIRED_INCLUDES stdlib.h)\n        check_function_exists (mkdtemp HAVE_MKDTEMP)\n        set (CMAKE_REQUIRED_INCLUDES)\n    \n        set (CMAKE_REQUIRED_INCLUDES sys\/socket.h)\n        check_function_exists (accept4 HAVE_ACCEPT4)\n        set (CMAKE_REQUIRED_INCLUDES)\n    endif()\n    \n    add_definitions (-D_REENTRANT -D_THREAD_SAFE)\n    add_definitions (-DZMQ_CUSTOM_PLATFORM_HPP)\n    \n    option (ENABLE_EVENTFD \"Enable\/disable eventfd\" ZMQ_HAVE_EVENTFD)\n    \n    macro (zmq_check_cxx_flag_prepend flag)\n      check_cxx_compiler_flag (\"${flag}\" HAVE_FLAG_${flag})\n    \n      if (HAVE_FLAG_${flag})\n        set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${flag}\")\n      endif ()\n    endmacro ()\n    \n    OPTION (ENABLE_ANALYSIS \"Build with static analysis (make take very long)\" OFF)\n    \n    if (MSVC)\n      if (ENABLE_ANALYSIS)\n        zmq_check_cxx_flag_prepend (\"\/W4\")\n    \n        zmq_check_cxx_flag_prepend (\"\/analyze\")\n    \n        # C++11\/14\/17-specific, but maybe possible via conditional defines\n        zmq_check_cxx_flag_prepend (\"\/wd26440\") # Function '...' can be declared 'noexcept'\n        zmq_check_cxx_flag_prepend (\"\/wd26432\") # If you define or delete any default operation in the type '...', define or delete them all\n        zmq_check_cxx_flag_prepend (\"\/wd26439\") # This kind of function may not throw. Declare it 'noexcept'\n        zmq_check_cxx_flag_prepend (\"\/wd26447\") # The function is declared 'noexcept' but calls function '...' which may throw exceptions\n        zmq_check_cxx_flag_prepend (\"\/wd26433\") # Function '...' should be marked with 'override'\n        zmq_check_cxx_flag_prepend (\"\/wd26409\") # Avoid calling new and delete explicitly, use std::make_unique<T> instead\n        # Requires GSL\n        zmq_check_cxx_flag_prepend (\"\/wd26429\") # Symbol '...' is never tested for nullness, it can be marked as not_null\n        zmq_check_cxx_flag_prepend (\"\/wd26446\") # Prefer to use gsl::at()\n        zmq_check_cxx_flag_prepend (\"\/wd26481\") # Don't use pointer arithmetic. Use span instead\n        zmq_check_cxx_flag_prepend (\"\/wd26472\") # Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narow\n        zmq_check_cxx_flag_prepend (\"\/wd26448\") # Consider using gsl::finally if final action is intended\n        zmq_check_cxx_flag_prepend (\"\/wd26400\") # Do not assign the result of an allocation or a function call with an owner<T> return value to a raw pointer, use owner<T> instead\n        zmq_check_cxx_flag_prepend (\"\/wd26485\") # Expression '...': No array to pointer decay (bounds.3)\n      else()\n        zmq_check_cxx_flag_prepend (\"\/W3\")\n      endif()\n    \n      if (MSVC_IDE)\n        set (MSVC_TOOLSET \"-${CMAKE_VS_PLATFORM_TOOLSET}\")\n      else ()\n        set (MSVC_TOOLSET \"\")\n      endif ()\n    else ()\n      zmq_check_cxx_flag_prepend (\"-Wall\")\n    endif ()\n    \n    if (CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n      zmq_check_cxx_flag_prepend (\"-Wextra\")\n    endif ()\n    \n    option (LIBZMQ_PEDANTIC \"\" ON)\n    option (LIBZMQ_WERROR \"\" OFF)\n    \n    #   TODO: why is -Wno-long-long defined differently than in configure.ac?\n    if (NOT MSVC)\n        zmq_check_cxx_flag_prepend (\"-Wno-long-long\")\n        zmq_check_cxx_flag_prepend (\"-Wno-uninitialized\")\n    \n        if (LIBZMQ_PEDANTIC)\n          zmq_check_cxx_flag_prepend (\"-pedantic\")\n    \n          if (${CMAKE_CXX_COMPILER_ID} MATCHES \"Intel\")\n            zmq_check_cxx_flag_prepend (\"-strict-ansi\")\n          endif ()\n    \n          if (${CMAKE_CXX_COMPILER_ID} MATCHES \"SunPro\")\n            zmq_check_cxx_flag_prepend (\"-compat=5\")\n          endif ()\n        endif ()\n    endif()\n    \n    if (LIBZMQ_WERROR)\n        if(MSVC)\n            zmq_check_cxx_flag_prepend (\"\/WX\")\n        else()\n            zmq_check_cxx_flag_prepend (\"-Werror\")\n            if (NOT \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n                zmq_check_cxx_flag_prepend (\"-errwarn=%all\")\n            endif()\n        endif()\n    endif ()\n    \n    if (CMAKE_SYSTEM_PROCESSOR MATCHES \"^sparc\")\n      zmq_check_cxx_flag_prepend (\"-mcpu=v9\")\n    endif ()\n    \n    if (${CMAKE_CXX_COMPILER_ID} MATCHES \"SunPro\")\n      zmq_check_cxx_flag_prepend (\"-features=zla\")\n    endif ()\n    \n    \n    if (CMAKE_SYSTEM_NAME MATCHES \"SunOS\" OR CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n      message (STATUS \"Checking whether atomic operations can be used\")\n      check_c_source_compiles (\n      \"\n       #include <atomic.h>\n    \n        int main ()\n        {\n          uint32_t value;\n          atomic_cas_32 (&value, 0, 0);\n          return 0;\n        }\n        \"\n        HAVE_ATOMIC_H)\n    \n      if (NOT HAVE_ATOMIC_H)\n        set (ZMQ_FORCE_MUTEXES 1)\n      endif ()\n    endif ()\n    \n    zmq_check_noexcept ()\n    \n    #-----------------------------------------------------------------------------\n    if (NOT CMAKE_CROSSCOMPILING AND NOT MSVC)\n      zmq_check_sock_cloexec ()\n      zmq_check_o_cloexec ()\n      zmq_check_so_bindtodevice ()\n      zmq_check_so_keepalive ()\n      zmq_check_tcp_keepcnt ()\n      zmq_check_tcp_keepidle ()\n      zmq_check_tcp_keepintvl ()\n      zmq_check_tcp_keepalive ()\n      zmq_check_tcp_tipc ()\n      zmq_check_pthread_setname ()\n      zmq_check_pthread_setaffinity ()\n      zmq_check_getrandom ()\n    endif ()\n    \n    if (    CMAKE_SYSTEM_NAME MATCHES \"Linux\"\n        OR CMAKE_SYSTEM_NAME MATCHES \"GNU\/kFreeBSD\"\n        OR CMAKE_SYSTEM_NAME MATCHES \"GNU\/Hurd\"\n        OR CYGWIN)\n      add_definitions (-D_GNU_SOURCE)\n    elseif (CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n      add_definitions (-D__BSD_VISIBLE)\n    elseif (CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n      add_definitions (-D_NETBSD_SOURCE)\n    elseif (CMAKE_SYSTEM_NAME MATCHES \"OpenBSD\")\n      add_definitions (-D_OPENBSD_SOURCE)\n    elseif (CMAKE_SYSTEM_NAME MATCHES \"SunOS\")\n      add_definitions (-D_PTHREADS)\n    elseif (CMAKE_SYSTEM_NAME MATCHES \"HP-UX\")\n      add_definitions (-D_POSIX_C_SOURCE=200112L)\n      zmq_check_cxx_flag_prepend (-Ae)\n    elseif (CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n      add_definitions (-D_DARWIN_C_SOURCE)\n    endif ()\n    \n    if (MSVC)\n      if (WITH_OPENPGM)\n        #   set (OPENPGM_ROOT \"\" CACHE PATH \"Location of OpenPGM\")\n        set (OPENPGM_VERSION_MAJOR 5)\n        set (OPENPGM_VERSION_MINOR 2)\n        set (OPENPGM_VERSION_MICRO 122)\n        if (CMAKE_CL_64)\n          find_path (OPENPGM_ROOT include\/pgm\/pgm.h\n                    PATHS\n                    \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Miru\\\\OpenPGM ${OPENPGM_VERSION_MAJOR}.${OPENPGM_VERSION_MINOR}.${OPENPGM_VERSION_MICRO}]\"\n                    NO_DEFAULT_PATH\n                   )\n          message (STATUS \"OpenPGM x64 detected - ${OPENPGM_ROOT}\")\n        else ()\n          find_path (OPENPGM_ROOT include\/pgm\/pgm.h\n                    PATHS\n                    \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Wow6432Node\\\\Miru\\\\OpenPGM ${OPENPGM_VERSION_MAJOR}.${OPENPGM_VERSION_MINOR}.${OPENPGM_VERSION_MICRO}]\"\n                    \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Miru\\\\OpenPGM ${OPENPGM_VERSION_MAJOR}.${OPENPGM_VERSION_MINOR}.${OPENPGM_VERSION_MICRO}]\"\n                    NO_DEFAULT_PATH\n                   )\n          message (STATUS \"OpenPGM x86 detected - ${OPENPGM_ROOT}\")\n        endif (CMAKE_CL_64)\n        set (OPENPGM_INCLUDE_DIRS ${OPENPGM_ROOT}\/include)\n        set (OPENPGM_LIBRARY_DIRS ${OPENPGM_ROOT}\/lib)\n        set (OPENPGM_LIBRARIES\n          optimized libpgm${MSVC_TOOLSET}-mt-${OPENPGM_VERSION_MAJOR}_${OPENPGM_VERSION_MINOR}_${OPENPGM_VERSION_MICRO}.lib\n          debug libpgm${MSVC_TOOLSET}-mt-gd-${OPENPGM_VERSION_MAJOR}_${OPENPGM_VERSION_MINOR}_${OPENPGM_VERSION_MICRO}.lib)\n      endif ()\n    else ()\n      if (WITH_OPENPGM)\n        #  message (FATAL_ERROR \"WITH_OPENPGM not implemented\")\n    \n        if (NOT OPENPGM_PKGCONFIG_NAME)\n          SET (OPENPGM_PKGCONFIG_NAME \"openpgm-5.2\")\n        endif(NOT OPENPGM_PKGCONFIG_NAME)\n    \n        SET (OPENPGM_PKGCONFIG_NAME ${OPENPGM_PKGCONFIG_NAME} CACHE STRING\n          \"Name pkg-config shall use to find openpgm libraries and include paths\"\n          FORCE )\n    \n        find_package(PkgConfig)\n        pkg_check_modules (OPENPGM  ${OPENPGM_PKGCONFIG_NAME})\n    \n        if (OPENPGM_FOUND)\n            message (STATUS ${OPENPGM_PKGCONFIG_NAME}\" found\")\n        else ()\n            message (FATAL_ERROR\n                ${OPENPGM_PKGCONFIG_NAME}\"  not found. openpgm is searchd via `pkg-config ${OPENPGM_PKGCONFIG_NAME}`. Consider providing a valid OPENPGM_PKGCONFIG_NAME\")\n        endif ()\n    \n        # DSO symbol visibility for openpgm\n        if (HAVE_FLAG_VISIBILITY_HIDDEN)\n    \n        elseif (HAVE_FLAG_LDSCOPE_HIDDEN)\n    \n        endif ()\n      endif ()\n    endif ()\n    \n    \n    configure_file(${SDIR}\/builds\/cmake\/platform.hpp.in ${BDIR}\/platform.hpp)\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/zeromq\/libzmq",
            "branch": "master"
        }
    },
    "version": "4.3.1",
    "hash": "04b2ddba4bfd0ee20403ed0a23556f3aa4095ee9c96cb6cba572053267137218",
    "created": "2018-07-26 16:00:02.59292"
}

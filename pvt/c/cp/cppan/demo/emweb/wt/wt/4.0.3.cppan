{
    "project": "pvt.cppan.demo.emweb.wt.wt",
    "cppan": "source:\n    git: https:\/\/github.com\/emweb\/wt\n    tag: \"{v}\"\n\nversion: 4.0.3\n\ntype: library\n\nfiles:\n    -   WConfig.h.in\n    -   src\/3rdparty\/rapidxml\/.*\\.hpp\n    -   src\/Wt\/.*\n    -   src\/Wt\/Dbo\/.*\n    -   src\/filetostring.cmake\n    -   src\/js\/.*\n    -   src\/web\/.*\n    -   src\/xml\/.*\n\nexclude_from_build:\n    -   .*mm\n    -   src\/Wt\/Chart\/scripts\/.*\n    -   src\/Wt\/Dbo\/.*\n    -   src\/Wt\/FontSupport.*\n    -   src\/Wt\/WRasterImage-d2d1.C\n    -   src\/Wt\/WRasterImage-skia.C\n\ninclude_directories:\n    public:\n        -   src\n        -   src\/web\n\noptions:\n    any:\n        definitions:\n            private:\n                -   WT_BUILDING\n            public:\n                -   WT_FONTSUPPORT_PANGO\n    shared:\n        definitions:\n            private:\n                -   wt_EXPORTS\n                -   wttest_EXPORTS\n    static:\n        definitions:\n            public:\n                -   WT_STATIC\n\ndependencies:\n    public:\n        pvt.cppan.demo.boost.filesystem:\n            version: 1\n        pvt.cppan.demo.boost.interprocess:\n            version: 1\n        pvt.cppan.demo.graphicsmagick.magick:\n            version: 1\n        pvt.cppan.demo.boost.multi_index:\n            version: 1\n        pvt.cppan.demo.openssl.ssl:\n            version: 1\n        pvt.cppan.demo.boost.thread:\n            version: 1\n        pvt.cppan.demo.libharu:\n            version: 2\n        pvt.cppan.demo.boost.numeric:\n            version: 1\n        pvt.cppan.demo.boost.asio:\n            version: 1\n        pvt.cppan.demo.boost.date_time:\n            version: 1\n        pvt.cppan.demo.boost.ublas:\n            version: 1\n        pvt.cppan.demo.glew:\n            version: 2\n        pvt.cppan.demo.gnome.pango.pangoft2:\n            version: 1\n\npost_sources: |\n    add_src_dir(src\/Wt\/FontSupportPango.C)\n    \n    MACRO (FILE_TO_STRING infile outfile var)\n    ADD_CUSTOM_COMMAND(OUTPUT ${BDIR}\/${outfile}\n                   COMMAND ${CMAKE_COMMAND}\n                       ARGS -Dinfile:FILEPATH=${infile}\n                            -Doutfile:FILEPATH=${BDIR}\/${outfile}\n                            -Dvar:STRING=${var}\n                            -P ${SDIR}\/src\/filetostring.cmake\n               MAIN_DEPENDENCY\n                    ${infile}\n    )\n    set(src ${src} ${BDIR}\/${outfile})\n    ENDMACRO (FILE_TO_STRING)\n    \n    FILE_TO_STRING(${SDIR}\/src\/web\/skeleton\/Plain.html    Plain_html.C      Plain_html)\n    FILE_TO_STRING(${SDIR}\/src\/web\/skeleton\/Hybrid.html   Hybrid_html.C     Hybrid_html)\n    FILE_TO_STRING(${SDIR}\/src\/web\/skeleton\/Boot.html     Boot_html.C       Boot_html)\n    \n    IF(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n      FILE_TO_STRING(${SDIR}\/src\/web\/skeleton\/Wt.js     Wt_js.C Wt_js)\n    ELSE(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n      FILE_TO_STRING(${SDIR}\/src\/web\/skeleton\/Wt.min.js Wt_js.C Wt_js)\n    ENDIF(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    \n    IF(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n      FILE_TO_STRING(${SDIR}\/src\/web\/skeleton\/Boot.js     Boot_js.C Boot_js)\n    ELSE(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n      FILE_TO_STRING(${SDIR}\/src\/web\/skeleton\/Boot.min.js Boot_js.C Boot_js)\n    ENDIF(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    \n    FILE_TO_STRING(${SDIR}\/src\/web\/skeleton\/jquery.min.js JQuery_js.C JQuery_js)\n    \n    FILE_TO_STRING(${SDIR}\/src\/xml\/wt.xml Wt_xml.C Wt_xml)\n    FILE_TO_STRING(${SDIR}\/src\/xml\/auth_strings.xml AuthStrings_xml.C AuthStrings_xml)\n    FILE_TO_STRING(${SDIR}\/src\/xml\/bootstrap_theme.xml\n        BootstrapTheme_xml.C BootstrapTheme_xml)\n    FILE_TO_STRING(${SDIR}\/src\/xml\/bootstrap3_theme.xml\n        Bootstrap3Theme_xml.C Bootstrap3Theme_xml)\n    FILE_TO_STRING(${SDIR}\/src\/xml\/auth_css_theme.xml\n        AuthCssTheme_xml.C AuthCssTheme_xml)\n    \n    set(WT_HAS_WRASTERIMAGE 1)\n    set(WT_HAS_WPDFIMAGE 1)\n    set(WT_WITH_SSL 1)\n    \n    set(WT_USE_OPENGL 1)\n    set(WT_DEBUG_ENABLED 0)\n    set(WT_THREADED 1)\n    \n    set(WT_ASIO_IS_BOOST_ASIO 1)\n    \n    if (CPPAN_LOCAL_PROJECT)\n        set(VERSION_SERIES 4)\n        set(VERSION_MAJOR 0)\n        set(VERSION_MINOR 0)\n    else()\n        set(VERSION_SERIES ${PACKAGE_VERSION_MAJOR})\n        set(VERSION_MAJOR ${PACKAGE_VERSION_MINOR})\n        set(VERSION_MINOR ${PACKAGE_VERSION_PATCH})\n    endif()\n    \n    if (WIN32) \n        set(CONFIGDIR .)\n    else()\n        set(CONFIGDIR \/etc\/wt)\n    endif()\n    SET(CONFIGURATION \"${CONFIGDIR}\/wt_config.xml\" CACHE PATH \"Path to the wt configuration file\")\n    SET(WTHTTP_CONFIGURATION \"${CONFIGDIR}\/wthttpd\" CACHE PATH \"Path for the wthttpd configuration file\")\n    \n    configure_file(${SDIR}\/WConfig.h.in ${BDIR}\/Wt\/WConfig.h)\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/emweb\/wt",
            "tag": "{v}"
        }
    },
    "version": "4.0.3",
    "hash": "64a7e22e1acb291cbd9236a7830dac56ccfab0a38360901f6907ffca7817cad4",
    "created": "2018-05-21 20:48:12.62753"
}

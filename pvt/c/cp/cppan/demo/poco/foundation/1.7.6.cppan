{
    "project": "pvt.cppan.demo.poco.foundation",
    "cppan": "source:\n    git: https:\/\/github.com\/pocoproject\/poco\n    tag: poco-1.7.6-release\n\nversion: 1.7.6\n\nlicense: LICENSE\n\nfiles:\n    -   Foundation\/include\/.*\n    -   Foundation\/src\/.*\\.c.*\n    -   Foundation\/src\/.*\\.h\n    -   Foundation\/src\/.*\\.mc\n    -   cmake\/PocoMacros.cmake\n\ninclude_directories:\n    public:\n        -   Foundation\/include\n    private:\n        -   Foundation\/src\n\noptions:\n    any:\n        definitions:\n            public:\n                -   POCO_NO_AUTOMATIC_LIBS\n                -   POCO_UNBUNDLED\n    shared:\n        definitions:\n            private:\n                -   Foundation_EXPORTS\n            public:\n                -   POCO_DLL\n    static:\n        definitions:\n            public:\n                -   POCO_STATIC\n\ndependencies:\n    public:\n        pvt.cppan.demo.madler.zlib:\n            version: 1\n        pvt.cppan.demo.pcre.pcre:\n            version: 8\n\npost_sources: |\n    include(${SDIR}\/cmake\/PocoMacros.cmake)\n    \n    # Sources\n    file(GLOB SRCS_G \"${SDIR}\/Foundation\/src\/*.cpp\")\n    POCO_SOURCES_AUTO( SRCS ${SRCS_G})\n    \n    # Headers\n    file(GLOB_RECURSE HDRS_G \"${SDIR}\/Foundation\/include\/*.h\" )\n    POCO_HEADERS_AUTO( SRCS ${HDRS_G})\n    \n    # Platform Specific\n    POCO_SOURCES_AUTO_PLAT( SRCS OPENVMS ${SDIR}\/Foundation\/src\/OpcomChannel.cpp )\n    POCO_HEADERS_AUTO( SRCS ${SDIR}\/Foundation\/include\/Poco\/OpcomChannel.h )\n    \n    POCO_SOURCES_AUTO_PLAT( SRCS UNIX ${SDIR}\/Foundation\/src\/SyslogChannel.cpp )\n    POCO_HEADERS_AUTO( SRCS ${SDIR}\/Foundation\/include\/Poco\/SyslogChannel.h )\n    \n    # For Windows CE we need to disable these\n    if(WINCE)\n    POCO_SOURCES_AUTO_PLAT( SRCS OFF\n        ${SDIR}\/Foundation\/src\/WindowsConsoleChannel.cpp\n        ${SDIR}\/Foundation\/src\/EventLogChannel.cpp\n        )\n    else()\n    POCO_SOURCES_AUTO_PLAT( SRCS WIN32\n        ${SDIR}\/Foundation\/src\/WindowsConsoleChannel.cpp\n        ${SDIR}\/Foundation\/src\/EventLogChannel.cpp\n        )\n    endif()\n    \n    # Messages\n    POCO_MESSAGES( SRCS Logging ${SDIR}\/Foundation\/src\/pocomsg.mc)\n    \n    if(WIN32)\n        set(SYSLIBS ${SYSLIBS} iphlpapi)\n    endif(WIN32)\n    if (${CMAKE_CXX_COMPILER_ID} MATCHES \"SunPro\")\n        set_target_properties( \"${this}\" PROPERTIES LINK_FLAGS \"-library=stlport4\")\n    endif (${CMAKE_CXX_COMPILER_ID} MATCHES \"SunPro\")\n    \n    if(ANDROID)\n        set(SYSLIBS ${SYSLIBS} log)\n    endif(ANDROID)\n    \n    # For SetAffinity\n    if(UNIX AND NOT APPLE)\n        INCLUDE (CheckFunctionExists)\n        INCLUDE (CheckCXXSourceCompiles)\n        INCLUDE (CheckLibraryExists)\n        CHECK_LIBRARY_EXISTS(pthread pthread_setaffinity_np \"pthread.h\" HAVE_PTHREAD_SETAFFINITY_NP)\n        #set(CMAKE_EXTRA_INCLUDE_FILES pthread.h)\n        #CHECK_FUNCTION_EXISTS(pthread_setaffinity_np HAVE_PTHREAD_SETAFFINITY_NP)\n        if(NOT HAVE_PTHREAD_SETAFFINITY_NP)\n            message(STATUS \"Platform has not PTHREAD_SETAFFINITY_NP\")\n        else(HAVE_PTHREAD_SETAFFINITY_NP)\n            add_definitions(-DHAVE_PTHREAD_SETAFFINITY_NP)\n            CHECK_CXX_SOURCE_COMPILES(\"\n            #include <sched.h>\n            int main() {\n                cpu_set_t cpumask;\n                sched_setaffinity( 0, sizeof(cpumask), &cpumask );\n                return 0;\n            }\" HAVE_THREE_PARAM_SCHED_SETAFFINITY)\n    \n            if(HAVE_THREE_PARAM_SCHED_SETAFFINITY)\n                message(STATUS \"Platform has THREE PARAM at PTHREAD_SETAFFINITY_NP\")\n                add_definitions(-DHAVE_THREE_PARAM_SCHED_SETAFFINITY)\n            else(HAVE_THREE_PARAM_SCHED_SETAFFINITY)\n                CHECK_CXX_SOURCE_COMPILES(\"\n                #include <sched.h>\n                int main() {\n                    cpu_set_t cpumask;\n                    sched_setaffinity( 0, &cpumask );\n                    return 0;\n                }\" HAVE_TWO_PARAM_SCHED_SETAFFINITY)\n    \n                if(HAVE_TWO_PARAM_SCHED_SETAFFINITY)\n                    message(STATUS \"Platform has TWO PARAM at PTHREAD_SETAFFINITY_NP\")\n                    add_definitions(-DHAVE_TWO_PARAM_SCHED_SETAFFINITY)\n                endif(HAVE_TWO_PARAM_SCHED_SETAFFINITY)\n    \n            endif(HAVE_THREE_PARAM_SCHED_SETAFFINITY)\n        endif(NOT HAVE_PTHREAD_SETAFFINITY_NP)\n    endif(UNIX AND NOT APPLE)\n    \n    set(src ${SRCS})\n    \n    # fix pcre imports\n    if (NOT EXISTS ${SDIR}\/fixexports.dummy)\n        file(READ ${SDIR}\/Foundation\/src\/Unicode.cpp f)\n        string(REPLACE\n            \"#include \\\"pcre_config.h\\\"\\n#include \\\"pcre_internal.h\\\"\"\n            \"\n            #include \\\"pcre.h\\\"\n    \n            #define PRIV(x) _pcre_ ## x\n    \n            #define UCD_BLOCK_SIZE 128\n            #define GET_UCD(ch) (PRIV(ucd_records) + \\\\\n                    PRIV(ucd_stage2)[PRIV(ucd_stage1)[(int)(ch) \/ UCD_BLOCK_SIZE] * \\\\\n                    UCD_BLOCK_SIZE + (int)(ch) % UCD_BLOCK_SIZE])\n    \n            #define UCD_CHARTYPE(ch)    GET_UCD(ch)->chartype\n            #define UCD_SCRIPT(ch)      GET_UCD(ch)->script\n            #define UCD_CATEGORY(ch)    PRIV(ucp_gentype)[UCD_CHARTYPE(ch)]\n            #define UCD_GRAPHBREAK(ch)  GET_UCD(ch)->gbprop\n            #define UCD_CASESET(ch)     GET_UCD(ch)->caseset\n            #define UCD_OTHERCASE(ch)   ((pcre_uint32)((int)ch + (int)(GET_UCD(ch)->other_case)))\n    \n            using pcre_uint8 = uint8_t;\n            using pcre_uint16 = uint16_t;\n            using pcre_int32 = int32_t;\n            using pcre_uint32 = uint32_t;\n    \n            typedef struct {\n                pcre_uint8 script;     \/* ucp_Arabic, etc. *\/\n                pcre_uint8 chartype;   \/* ucp_Cc, etc. (general categories) *\/\n                pcre_uint8 gbprop;     \/* ucp_gbControl, etc. (grapheme break property) *\/\n                pcre_uint8 caseset;    \/* offset to multichar other cases or zero *\/\n                pcre_int32 other_case; \/* offset to other case, or zero if none *\/\n            } ucd_record;\n    \n            PCRE_EXP_DECL const ucd_record  PRIV(ucd_records)[];\n            PCRE_EXP_DECL const pcre_uint8  PRIV(ucd_stage1)[];\n            PCRE_EXP_DECL const pcre_uint16 PRIV(ucd_stage2)[];\n            PCRE_EXP_DECL const pcre_uint32 PRIV(ucp_gentype)[];\"\n            f \"${f}\")\n        file(WRITE ${SDIR}\/Foundation\/src\/Unicode.cpp \"${f}\")\n        file_write_once(${SDIR}\/fixexports.dummy \"\")\n    endif()\n\npost_target: |\n    target_link_libraries(${this} PUBLIC ${SYSLIBS})\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/pocoproject\/poco",
            "tag": "poco-1.7.6-release"
        }
    },
    "version": "1.7.6",
    "hash": "1845ad2ce809aa2190e4b8969a1f18cfe4edb4c7c80490c1ab7a055dfab7c8a9",
    "created": "2017-03-31 13:24:11.990056"
}

{
    "project": "pvt.cppan.demo.sfml.window",
    "cppan": "version: 2.4.0\npost_sources: !<!> \"set(INCROOT ${SDIR}\/include\/SFML\/Window)\\nset(SRCROOT ${SDIR}\/src\/SFML\/Window)\\n\\n# all source files\\nset(SRC\\n    ${SRCROOT}\/Context.cpp\\n    ${INCROOT}\/Context.hpp\\n    ${INCROOT}\/Export.hpp\\n    ${SRCROOT}\/GlContext.cpp\\n    ${SRCROOT}\/GlContext.hpp\\n    ${SRCROOT}\/GlResource.cpp\\n    ${INCROOT}\/GlResource.hpp\\n    ${INCROOT}\/ContextSettings.hpp\\n    ${INCROOT}\/Event.hpp\\n    ${SRCROOT}\/InputImpl.hpp\\n    ${INCROOT}\/Joystick.hpp\\n    ${SRCROOT}\/Joystick.cpp\\n    ${SRCROOT}\/JoystickImpl.hpp\\n    ${SRCROOT}\/JoystickManager.cpp\\n    ${SRCROOT}\/JoystickManager.hpp\\n    ${INCROOT}\/Keyboard.hpp\\n    ${SRCROOT}\/Keyboard.cpp\\n    ${INCROOT}\/Mouse.hpp\\n    ${SRCROOT}\/Mouse.cpp\\n    ${INCROOT}\/Touch.hpp\\n    ${SRCROOT}\/Touch.cpp\\n    ${INCROOT}\/Sensor.hpp\\n    ${SRCROOT}\/Sensor.cpp\\n    ${SRCROOT}\/SensorImpl.hpp\\n    ${SRCROOT}\/SensorManager.cpp\\n    ${SRCROOT}\/SensorManager.hpp\\n    ${SRCROOT}\/VideoMode.cpp\\n    ${INCROOT}\/VideoMode.hpp\\n    ${SRCROOT}\/VideoModeImpl.hpp\\n    ${SRCROOT}\/Window.cpp\\n    ${INCROOT}\/Window.hpp\\n    ${INCROOT}\/WindowHandle.hpp\\n    ${SRCROOT}\/WindowImpl.cpp\\n    ${SRCROOT}\/WindowImpl.hpp\\n    ${INCROOT}\/WindowStyle.hpp\\n)\\nif(SFML_OPENGL_ES AND NOT SFML_OS_IOS)\\n    list(APPEND SRC ${SRCROOT}\/EGLCheck.cpp)\\n    list(APPEND SRC ${SRCROOT}\/EGLCheck.hpp)\\n    list(APPEND SRC ${SRCROOT}\/EglContext.cpp)\\n    list(APPEND SRC ${SRCROOT}\/EglContext.hpp)\\nendif()\\n\\n# add platform specific sources\\nif(SFML_OS_WINDOWS)\\n    set(PLATFORM_SRC\\n        ${SRCROOT}\/Win32\/WglContext.cpp\\n        ${SRCROOT}\/Win32\/WglContext.hpp\\n        ${SRCROOT}\/Win32\/WglExtensions.cpp\\n        ${SRCROOT}\/Win32\/WglExtensions.hpp\\n        ${SRCROOT}\/Win32\/InputImpl.cpp\\n        ${SRCROOT}\/Win32\/InputImpl.hpp\\n        ${SRCROOT}\/Win32\/JoystickImpl.cpp\\n        ${SRCROOT}\/Win32\/JoystickImpl.hpp\\n        ${SRCROOT}\/Win32\/SensorImpl.hpp\\n        ${SRCROOT}\/Win32\/SensorImpl.cpp\\n        ${SRCROOT}\/Win32\/VideoModeImpl.cpp\\n        ${SRCROOT}\/Win32\/WindowImplWin32.cpp\\n        ${SRCROOT}\/Win32\/WindowImplWin32.hpp\\n    )\\n\\n    # make sure that we use the Unicode version of the Win API functions\\n    add_definitions(-DUNICODE -D_UNICODE)\\nelseif(SFML_OS_LINUX OR SFML_OS_FREEBSD)\\n    set(PLATFORM_SRC\\n        ${SRCROOT}\/Unix\/Display.cpp\\n        ${SRCROOT}\/Unix\/Display.hpp\\n        ${SRCROOT}\/Unix\/InputImpl.cpp\\n        ${SRCROOT}\/Unix\/InputImpl.hpp\\n        ${SRCROOT}\/Unix\/ScopedXcbPtr.hpp\\n        ${SRCROOT}\/Unix\/ScopedXcbPtr.inl\\n        ${SRCROOT}\/Unix\/SensorImpl.cpp\\n        ${SRCROOT}\/Unix\/SensorImpl.hpp\\n        ${SRCROOT}\/Unix\/VideoModeImpl.cpp\\n        ${SRCROOT}\/Unix\/WindowImplX11.cpp\\n        ${SRCROOT}\/Unix\/WindowImplX11.hpp\\n    )\\n    if(NOT SFML_OPENGL_ES)\\n        set(PLATFORM_SRC\\n            ${PLATFORM_SRC}\\n            ${SRCROOT}\/Unix\/GlxContext.cpp\\n            ${SRCROOT}\/Unix\/GlxContext.hpp\\n            ${SRCROOT}\/Unix\/GlxExtensions.cpp\\n            ${SRCROOT}\/Unix\/GlxExtensions.hpp\\n        )\\n    endif()\\n    if(SFML_OS_LINUX)\\n        set(PLATFORM_SRC\\n            ${PLATFORM_SRC}\\n            ${SRCROOT}\/Unix\/JoystickImpl.cpp\\n            ${SRCROOT}\/Unix\/JoystickImpl.hpp\\n        )\\n    elseif(SFML_OS_FREEBSD)\\n        set(PLATFORM_SRC\\n            ${PLATFORM_SRC}\\n            ${SRCROOT}\/FreeBSD\/JoystickImpl.cpp\\n            ${SRCROOT}\/FreeBSD\/JoystickImpl.hpp\\n        )\\n    endif()\\nelseif(SFML_OS_MACOSX)\\n    set(PLATFORM_SRC\\n        ${SRCROOT}\/OSX\/cpp_objc_conversion.h\\n        ${SRCROOT}\/OSX\/cpp_objc_conversion.mm\\n        ${SRCROOT}\/OSX\/cg_sf_conversion.hpp\\n        ${SRCROOT}\/OSX\/cg_sf_conversion.mm\\n        ${SRCROOT}\/OSX\/InputImpl.mm\\n        ${SRCROOT}\/OSX\/InputImpl.hpp\\n        ${SRCROOT}\/OSX\/HIDInputManager.hpp\\n        ${SRCROOT}\/OSX\/HIDInputManager.mm\\n        ${SRCROOT}\/OSX\/HIDJoystickManager.hpp\\n        ${SRCROOT}\/OSX\/HIDJoystickManager.cpp\\n        ${SRCROOT}\/OSX\/JoystickImpl.cpp\\n        ${SRCROOT}\/OSX\/JoystickImpl.hpp\\n        ${SRCROOT}\/OSX\/NSImage+raw.h\\n        ${SRCROOT}\/OSX\/NSImage+raw.mm\\n        ${SRCROOT}\/OSX\/Scaling.h\\n        ${SRCROOT}\/OSX\/SensorImpl.cpp\\n        ${SRCROOT}\/OSX\/SensorImpl.hpp\\n        ${SRCROOT}\/OSX\/SFApplication.h\\n        ${SRCROOT}\/OSX\/SFApplication.m\\n        ${SRCROOT}\/OSX\/SFApplicationDelegate.h\\n        ${SRCROOT}\/OSX\/SFApplicationDelegate.m\\n        ${SRCROOT}\/OSX\/SFContext.hpp\\n        ${SRCROOT}\/OSX\/SFContext.mm\\n        ${SRCROOT}\/OSX\/SFKeyboardModifiersHelper.h\\n        ${SRCROOT}\/OSX\/SFKeyboardModifiersHelper.mm\\n        ${SRCROOT}\/OSX\/SFOpenGLView.h\\n        ${SRCROOT}\/OSX\/SFOpenGLView.mm\\n        ${SRCROOT}\/OSX\/SFOpenGLView+keyboard.mm\\n        ${SRCROOT}\/OSX\/SFOpenGLView+keyboard_priv.h\\n        ${SRCROOT}\/OSX\/SFOpenGLView+mouse.mm\\n        ${SRCROOT}\/OSX\/SFOpenGLView+mouse_priv.h\\n        ${SRCROOT}\/OSX\/SFSilentResponder.h\\n        ${SRCROOT}\/OSX\/SFSilentResponder.m\\n        ${SRCROOT}\/OSX\/SFWindow.h\\n        ${SRCROOT}\/OSX\/SFWindow.m\\n        ${SRCROOT}\/OSX\/SFWindowController.h\\n        ${SRCROOT}\/OSX\/SFWindowController.mm\\n        ${SRCROOT}\/OSX\/SFViewController.h\\n        ${SRCROOT}\/OSX\/SFViewController.mm\\n        ${SRCROOT}\/OSX\/VideoModeImpl.cpp\\n        ${SRCROOT}\/OSX\/WindowImplCocoa.hpp\\n        ${SRCROOT}\/OSX\/WindowImplCocoa.mm\\n        ${SRCROOT}\/OSX\/WindowImplDelegateProtocol.h\\n        ${SRCROOT}\/OSX\/AutoreleasePoolWrapper.h\\n        ${SRCROOT}\/OSX\/AutoreleasePoolWrapper.mm\\n    )\\nelseif(SFML_OS_IOS)\\n    set(PLATFORM_SRC\\n        ${SRCROOT}\/iOS\/EaglContext.mm\\n        ${SRCROOT}\/iOS\/EaglContext.hpp\\n        ${SRCROOT}\/iOS\/InputImpl.mm\\n        ${SRCROOT}\/iOS\/InputImpl.hpp\\n        ${SRCROOT}\/iOS\/JoystickImpl.mm\\n        ${SRCROOT}\/iOS\/JoystickImpl.hpp\\n        ${SRCROOT}\/iOS\/SensorImpl.mm\\n        ${SRCROOT}\/iOS\/SensorImpl.hpp\\n        ${SRCROOT}\/iOS\/VideoModeImpl.mm\\n        ${SRCROOT}\/iOS\/WindowImplUIKit.hpp\\n        ${SRCROOT}\/iOS\/WindowImplUIKit.mm\\n        ${SRCROOT}\/iOS\/ObjCType.hpp\\n        ${SRCROOT}\/iOS\/SFAppDelegate.hpp\\n        ${SRCROOT}\/iOS\/SFAppDelegate.mm\\n        ${SRCROOT}\/iOS\/SFView.hpp\\n        ${SRCROOT}\/iOS\/SFView.mm\\n        ${SRCROOT}\/iOS\/SFViewController.hpp\\n        ${SRCROOT}\/iOS\/SFViewController.mm\\n        ${SRCROOT}\/iOS\/SFMain.hpp\\n        ${SRCROOT}\/iOS\/SFMain.mm\\n    )\\nelseif(SFML_OS_ANDROID)\\n    set(PLATFORM_SRC\\n        ${SRCROOT}\/Android\/WindowImplAndroid.hpp\\n        ${SRCROOT}\/Android\/WindowImplAndroid.cpp\\n        ${SRCROOT}\/Android\/VideoModeImpl.cpp\\n        ${SRCROOT}\/Android\/InputImpl.hpp\\n        ${SRCROOT}\/Android\/InputImpl.cpp\\n        ${SRCROOT}\/Android\/JoystickImpl.hpp\\n        ${SRCROOT}\/Android\/JoystickImpl.cpp\\n        ${SRCROOT}\/Android\/SensorImpl.hpp\\n        ${SRCROOT}\/Android\/SensorImpl.cpp\\n    )\\nendif()\\n\\n# find external libraries\\nif(SFML_OS_LINUX OR SFML_OS_FREEBSD)\\n    find_package(X11 REQUIRED)\\n    if(NOT X11_FOUND)\\n        message(FATAL_ERROR \\\"X11 library not found\\\")\\n    endif()\\n    include_directories(${X11_INCLUDE_DIR})\\nendif()\\nif(NOT SFML_OPENGL_ES)\\n    find_package(OpenGL REQUIRED)\\n    include_directories(${OPENGL_INCLUDE_DIR})\\n    if(SFML_OS_LINUX OR SFML_OS_FREEBSD)\\n        find_package(XCB COMPONENTS xlib_xcb image randr REQUIRED)\\n        if(NOT LIBXCB_FOUND)\\n            message(FATAL_ERROR \\\"Xcb library not found\\\")\\n        endif()\\n        include_directories(${LIBXCB_INCLUDE_DIRS})\\n    endif()\\nendif()\\nif(SFML_OPENGL_ES AND SFML_OS_LINUX)\\n    find_package(EGL REQUIRED)\\n    find_package(GLES REQUIRED)\\n    include_directories(${EGL_INCLUDE_DIR} ${GLES_INCLUDE_DIR})\\nendif()\\nif(SFML_OS_LINUX)\\n    find_package(UDev REQUIRED)\\n    if(NOT UDEV_FOUND)\\n        message(FATAL_ERROR \\\"udev library not found\\\")\\n    endif()\\n    include_directories(${UDEV_INCLUDE_DIR})\\nendif()\\n\\n\\n# build the list of external libraries to link\\nif(SFML_OS_WINDOWS)\\n    list(APPEND WINDOW_EXT_LIBS winmm gdi32)\\nelseif(SFML_OS_LINUX)\\n    list(APPEND WINDOW_EXT_LIBS ${X11_X11_LIB} ${LIBXCB_LIBRARIES} ${UDEV_LIBRARIES})\\nelseif(SFML_OS_FREEBSD)\\n    list(APPEND WINDOW_EXT_LIBS ${X11_X11_LIB} ${LIBXCB_LIBRARIES} usbhid)\\nelseif(SFML_OS_MACOSX)\\n    list(APPEND WINDOW_EXT_LIBS \\\"-framework Foundation -framework AppKit -framework IOKit -framework Carbon\\\")\\nelseif(SFML_OS_IOS)\\n    list(APPEND WINDOW_EXT_LIBS \\\"-framework Foundation -framework UIKit -framework CoreGraphics -framework QuartzCore -framework CoreMotion\\\")\\nelseif(SFML_OS_ANDROID)\\n    list(APPEND WINDOW_EXT_LIBS android)\\nendif()\\nif(SFML_OPENGL_ES)\\n    if(SFML_OS_LINUX)\\n        list(APPEND WINDOW_EXT_LIBS ${EGL_LIBRARY} ${GLES_LIBRARY})\\n    elseif(SFML_OS_IOS)\\n        list(APPEND WINDOW_EXT_LIBS \\\"-framework OpenGLES\\\")\\n    elseif(SFML_OS_ANDROID)\\n        list(APPEND WINDOW_EXT_LIBS EGL GLESv1_CM)\\n    endif()\\nelse()\\n    list(APPEND WINDOW_EXT_LIBS ${OPENGL_gl_LIBRARY})\\nendif()\\n\\nset(src ${SRC} ${PLATFORM_SRC})\\n\"\nsource:\n  tag: 2.4.0\n  git: https:\/\/github.com\/SFML\/SFML\npost_sources: !<!> \"# define a macro that helps defining an option\\nmacro(sfml_set_option var default type docstring)\\n    if(NOT DEFINED ${var})\\n        set(${var} ${default})\\n    endif()\\n    set(${var} ${${var}} CACHE ${type} ${docstring} FORCE)\\nendmacro()\\n\\n# include the configuration file\\ninclude(${CMAKE_CURRENT_SOURCE_DIR}\/cmake\/Config.cmake)\\n\\n# setup version numbers\\nset(VERSION_MAJOR ${PACKAGE_VERSION_MAJOR})\\nset(VERSION_MINOR ${PACKAGE_VERSION_MINOR})\\nset(VERSION_PATCH ${PACKAGE_VERSION_PATCH})\\n\\n# add an option for choosing the OpenGL implementation\\nsfml_set_option(SFML_OPENGL_ES ${OPENGL_ES} BOOL \\\"TRUE to use an OpenGL ES implementation, FALSE to use a desktop OpenGL implementation\\\")\\n\\n# define SFML_OPENGL_ES if needed\\nif(SFML_OPENGL_ES)\\n    add_definitions(-DSFML_OPENGL_ES)\\n    add_definitions(-DGL_GLEXT_PROTOTYPES)\\nendif()\\n\"\npost_target: !<!> target_link_libraries(${this} PUBLIC ${WINDOW_EXT_LIBS})\noptions:\n  static:\n    definitions:\n      private:\n        - SFML_STATIC\nfiles:\n  - cmake\/.*\n  - include\/.*\n  - src\/SFML\/Window\/.*\ndependencies:\n  public:\n    pvt.cppan.demo.sfml.system: !<!> \"*\"",
    "version": "2.4.0",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/SFML\/SFML",
            "tag": "2.4.0"
        }
    }
}

{
    "project": "pvt.cppan.demo.sfml.graphics",
    "cppan": "post_target: !<!> \"target_link_libraries(${this} PUBLIC ${GRAPHICS_EXT_LIBS})\\n\"\nsource:\n  tag: 2.4.0\n  git: https:\/\/github.com\/SFML\/SFML\noptions:\n  static:\n    definitions:\n      public:\n        - SFML_STATIC\n  shared:\n    definitions:\n      private:\n        - SFML_GRAPHICS_EXPORTS\ndependencies:\n  public:\n    pvt.cppan.demo.sfml.window: !<!> \"*\"\n    pvt.cppan.demo.stb.image_write: master\n    pvt.cppan.demo.sfml.system: !<!> \"*\"\n    pvt.cppan.demo.jpeg: 9\n    pvt.cppan.demo.freetype: 2\n    pvt.cppan.demo.stb.image: master\npost_sources: !<!> \"# define a macro that helps defining an option\\nmacro(sfml_set_option var default type docstring)\\n    if(NOT DEFINED ${var})\\n        set(${var} ${default})\\n    endif()\\n    set(${var} ${${var}} CACHE ${type} ${docstring} FORCE)\\nendmacro()\\n\\n# include the configuration file\\ninclude(${CMAKE_CURRENT_SOURCE_DIR}\/cmake\/Config.cmake)\\n\\n# setup version numbers\\nset(VERSION_MAJOR ${PACKAGE_VERSION_MAJOR})\\nset(VERSION_MINOR ${PACKAGE_VERSION_MINOR})\\nset(VERSION_PATCH ${PACKAGE_VERSION_PATCH})\\n\\n# add an option for choosing the OpenGL implementation\\nsfml_set_option(SFML_OPENGL_ES ${OPENGL_ES} BOOL \\\"TRUE to use an OpenGL ES implementation, FALSE to use a desktop OpenGL implementation\\\")\\n\\n# define SFML_OPENGL_ES if needed\\nif(SFML_OPENGL_ES)\\n    add_definitions(-DSFML_OPENGL_ES)\\n    add_definitions(-DGL_GLEXT_PROTOTYPES)\\nendif()\\n\\nset(INCROOT ${SDIR}\/include\/SFML\/Graphics)\\nset(SRCROOT ${SDIR}\/src\/SFML\/Graphics)\\n\\n# all source files\\nset(SRC\\n    ${SRCROOT}\/BlendMode.cpp\\n    ${INCROOT}\/BlendMode.hpp\\n    ${SRCROOT}\/Color.cpp\\n    ${INCROOT}\/Color.hpp\\n    ${INCROOT}\/Export.hpp\\n    ${SRCROOT}\/Font.cpp\\n    ${INCROOT}\/Font.hpp\\n    ${SRCROOT}\/Glsl.cpp\\n    ${INCROOT}\/Glsl.hpp\\n    ${INCROOT}\/Glsl.inl\\n    ${INCROOT}\/Glyph.hpp\\n    ${SRCROOT}\/GLCheck.cpp\\n    ${SRCROOT}\/GLCheck.hpp\\n    ${SRCROOT}\/GLExtensions.hpp\\n    ${SRCROOT}\/GLExtensions.cpp\\n    ${SRCROOT}\/Image.cpp\\n    ${INCROOT}\/Image.hpp\\n    ${SRCROOT}\/ImageLoader.cpp\\n    ${SRCROOT}\/ImageLoader.hpp\\n    ${INCROOT}\/PrimitiveType.hpp\\n    ${INCROOT}\/Rect.hpp\\n    ${INCROOT}\/Rect.inl\\n    ${SRCROOT}\/RenderStates.cpp\\n    ${INCROOT}\/RenderStates.hpp\\n    ${SRCROOT}\/RenderTexture.cpp\\n    ${INCROOT}\/RenderTexture.hpp\\n    ${SRCROOT}\/RenderTarget.cpp\\n    ${INCROOT}\/RenderTarget.hpp\\n    ${SRCROOT}\/RenderWindow.cpp\\n    ${INCROOT}\/RenderWindow.hpp\\n    ${SRCROOT}\/Shader.cpp\\n    ${INCROOT}\/Shader.hpp\\n    ${SRCROOT}\/Texture.cpp\\n    ${INCROOT}\/Texture.hpp\\n    ${SRCROOT}\/TextureSaver.cpp\\n    ${SRCROOT}\/TextureSaver.hpp\\n    ${SRCROOT}\/Transform.cpp\\n    ${INCROOT}\/Transform.hpp\\n    ${SRCROOT}\/Transformable.cpp\\n    ${INCROOT}\/Transformable.hpp\\n    ${SRCROOT}\/View.cpp\\n    ${INCROOT}\/View.hpp\\n    ${SRCROOT}\/Vertex.cpp\\n    ${INCROOT}\/Vertex.hpp\\n)\\nif(NOT SFML_OPENGL_ES)\\n    list(APPEND SRC ${SRCROOT}\/GLLoader.cpp)\\n    list(APPEND SRC ${SRCROOT}\/GLLoader.hpp)\\nendif()\\n\\n# drawables sources\\nset(DRAWABLES_SRC\\n    ${INCROOT}\/Drawable.hpp\\n    ${SRCROOT}\/Shape.cpp\\n    ${INCROOT}\/Shape.hpp\\n    ${SRCROOT}\/CircleShape.cpp\\n    ${INCROOT}\/CircleShape.hpp\\n    ${SRCROOT}\/RectangleShape.cpp\\n    ${INCROOT}\/RectangleShape.hpp\\n    ${SRCROOT}\/ConvexShape.cpp\\n    ${INCROOT}\/ConvexShape.hpp\\n    ${SRCROOT}\/Sprite.cpp\\n    ${INCROOT}\/Sprite.hpp\\n    ${SRCROOT}\/Text.cpp\\n    ${INCROOT}\/Text.hpp\\n    ${SRCROOT}\/VertexArray.cpp\\n    ${INCROOT}\/VertexArray.hpp\\n)\\n\\n# render-texture sources\\nset(RENDER_TEXTURE_SRC\\n    ${SRCROOT}\/RenderTextureImpl.cpp\\n    ${SRCROOT}\/RenderTextureImpl.hpp\\n    ${SRCROOT}\/RenderTextureImplFBO.cpp\\n    ${SRCROOT}\/RenderTextureImplFBO.hpp\\n    ${SRCROOT}\/RenderTextureImplDefault.cpp\\n    ${SRCROOT}\/RenderTextureImplDefault.hpp\\n)\\n\\n# find external libraries\\nif(NOT SFML_OPENGL_ES)\\n    find_package(OpenGL REQUIRED)\\n    if(SFML_OS_LINUX)\\n        find_package(X11 REQUIRED)\\n    endif()\\n    include_directories(${OPENGL_INCLUDE_DIR})\\nendif()\\nif(SFML_OPENGL_ES AND SFML_OS_LINUX)\\n    find_package(EGL REQUIRED)\\n    find_package(GLES REQUIRED)\\n    include_directories(${EGL_INCLUDE_DIR} ${GLES_INCLUDE_DIR})\\nendif()\\n\\n# build the list of external libraries to link\\nif(NOT SFML_OPENGL_ES)\\n    list(APPEND GRAPHICS_EXT_LIBS ${OPENGL_gl_LIBRARY})\\n    if(SFML_OS_LINUX)\\n        list(APPEND GRAPHICS_EXT_LIBS ${X11_LIBRARIES})\\n    endif()\\nendif()\\nif(SFML_OPENGL_ES AND SFML_OS_LINUX)\\n    list(APPEND GRAPHICS_EXT_LIBS ${EGL_LIBRARY} ${GLES_LIBRARY})\\nendif()\\nif(SFML_OS_IOS)\\n    list(APPEND GRAPHICS_EXT_LIBS \\\"-framework OpenGLES\\\")\\nelseif(SFML_OS_ANDROID)\\n    list(APPEND GRAPHICS_EXT_LIBS z)\\nendif()\\n\\n# add preprocessor symbols\\nadd_definitions(-DSTBI_FAILURE_USERMSG)\\n\\n# ImageLoader.cpp must be compiled with the -fno-strict-aliasing\\n# when gcc is used; otherwise saving PNGs may crash in stb_image_write\\nif(SFML_COMPILER_GCC)\\n    set_source_files_properties(${SRCROOT}\/ImageLoader.cpp PROPERTIES COMPILE_FLAGS -fno-strict-aliasing)\\nendif()\\n\\nset(src ${SRC} ${DRAWABLES_SRC} ${RENDER_TEXTURE_SRC} ${STB_SRC})\\n\"\nfiles:\n  - cmake\/.*\n  - include\/.*\n  - src\/SFML\/Graphics\/.*\nversion: 2.4.0",
    "version": "2.4.0",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/SFML\/SFML",
            "tag": "2.4.0"
        }
    }
}

{
    "project": "pvt.cppan.demo.sfml.graphics",
    "cppan": "source:\n    git: https:\/\/github.com\/SFML\/SFML\n    tag: 2.4.2\n\nversion: 2.4.2\n\nfiles:\n    -   cmake\/.*\n    -   include\/.*\n    -   src\/SFML\/Graphics\/.*\n\noptions:\n    shared:\n        definitions:\n            private:\n                -   SFML_GRAPHICS_EXPORTS\n    static:\n        definitions:\n            public:\n                -   SFML_STATIC\n\ndependencies:\n    public:\n        pvt.cppan.demo.freetype:\n            version: 2\n        pvt.cppan.demo.jpeg:\n            version: 9\n        pvt.cppan.demo.sfml.system:\n            version: \"*\"\n        pvt.cppan.demo.sfml.window:\n            version: \"*\"\n        pvt.cppan.demo.stb.image:\n            version: master\n        pvt.cppan.demo.stb.image_write:\n            version: master\n\npost_sources: |\n    # define a macro that helps defining an option\n    macro(sfml_set_option var default type docstring)\n        if(NOT DEFINED ${var})\n            set(${var} ${default})\n        endif()\n        set(${var} ${${var}} CACHE ${type} ${docstring} FORCE)\n    endmacro()\n    \n    # include the configuration file\n    include(${CMAKE_CURRENT_SOURCE_DIR}\/cmake\/Config.cmake)\n    \n    # setup version numbers\n    set(VERSION_MAJOR ${PACKAGE_VERSION_MAJOR})\n    set(VERSION_MINOR ${PACKAGE_VERSION_MINOR})\n    set(VERSION_PATCH ${PACKAGE_VERSION_PATCH})\n    \n    # add an option for choosing the OpenGL implementation\n    sfml_set_option(SFML_OPENGL_ES ${OPENGL_ES} BOOL \"TRUE to use an OpenGL ES implementation, FALSE to use a desktop OpenGL implementation\")\n    \n    # define SFML_OPENGL_ES if needed\n    if(SFML_OPENGL_ES)\n        add_definitions(-DSFML_OPENGL_ES)\n        add_definitions(-DGL_GLEXT_PROTOTYPES)\n    endif()\n    \n    set(INCROOT ${SDIR}\/include\/SFML\/Graphics)\n    set(SRCROOT ${SDIR}\/src\/SFML\/Graphics)\n    \n    # all source files\n    set(SRC\n        ${SRCROOT}\/BlendMode.cpp\n        ${INCROOT}\/BlendMode.hpp\n        ${SRCROOT}\/Color.cpp\n        ${INCROOT}\/Color.hpp\n        ${INCROOT}\/Export.hpp\n        ${SRCROOT}\/Font.cpp\n        ${INCROOT}\/Font.hpp\n        ${SRCROOT}\/Glsl.cpp\n        ${INCROOT}\/Glsl.hpp\n        ${INCROOT}\/Glsl.inl\n        ${INCROOT}\/Glyph.hpp\n        ${SRCROOT}\/GLCheck.cpp\n        ${SRCROOT}\/GLCheck.hpp\n        ${SRCROOT}\/GLExtensions.hpp\n        ${SRCROOT}\/GLExtensions.cpp\n        ${SRCROOT}\/Image.cpp\n        ${INCROOT}\/Image.hpp\n        ${SRCROOT}\/ImageLoader.cpp\n        ${SRCROOT}\/ImageLoader.hpp\n        ${INCROOT}\/PrimitiveType.hpp\n        ${INCROOT}\/Rect.hpp\n        ${INCROOT}\/Rect.inl\n        ${SRCROOT}\/RenderStates.cpp\n        ${INCROOT}\/RenderStates.hpp\n        ${SRCROOT}\/RenderTexture.cpp\n        ${INCROOT}\/RenderTexture.hpp\n        ${SRCROOT}\/RenderTarget.cpp\n        ${INCROOT}\/RenderTarget.hpp\n        ${SRCROOT}\/RenderWindow.cpp\n        ${INCROOT}\/RenderWindow.hpp\n        ${SRCROOT}\/Shader.cpp\n        ${INCROOT}\/Shader.hpp\n        ${SRCROOT}\/Texture.cpp\n        ${INCROOT}\/Texture.hpp\n        ${SRCROOT}\/TextureSaver.cpp\n        ${SRCROOT}\/TextureSaver.hpp\n        ${SRCROOT}\/Transform.cpp\n        ${INCROOT}\/Transform.hpp\n        ${SRCROOT}\/Transformable.cpp\n        ${INCROOT}\/Transformable.hpp\n        ${SRCROOT}\/View.cpp\n        ${INCROOT}\/View.hpp\n        ${SRCROOT}\/Vertex.cpp\n        ${INCROOT}\/Vertex.hpp\n    )\n    if(NOT SFML_OPENGL_ES)\n        list(APPEND SRC ${SRCROOT}\/GLLoader.cpp)\n        list(APPEND SRC ${SRCROOT}\/GLLoader.hpp)\n    endif()\n    \n    # drawables sources\n    set(DRAWABLES_SRC\n        ${INCROOT}\/Drawable.hpp\n        ${SRCROOT}\/Shape.cpp\n        ${INCROOT}\/Shape.hpp\n        ${SRCROOT}\/CircleShape.cpp\n        ${INCROOT}\/CircleShape.hpp\n        ${SRCROOT}\/RectangleShape.cpp\n        ${INCROOT}\/RectangleShape.hpp\n        ${SRCROOT}\/ConvexShape.cpp\n        ${INCROOT}\/ConvexShape.hpp\n        ${SRCROOT}\/Sprite.cpp\n        ${INCROOT}\/Sprite.hpp\n        ${SRCROOT}\/Text.cpp\n        ${INCROOT}\/Text.hpp\n        ${SRCROOT}\/VertexArray.cpp\n        ${INCROOT}\/VertexArray.hpp\n    )\n    \n    # render-texture sources\n    set(RENDER_TEXTURE_SRC\n        ${SRCROOT}\/RenderTextureImpl.cpp\n        ${SRCROOT}\/RenderTextureImpl.hpp\n        ${SRCROOT}\/RenderTextureImplFBO.cpp\n        ${SRCROOT}\/RenderTextureImplFBO.hpp\n        ${SRCROOT}\/RenderTextureImplDefault.cpp\n        ${SRCROOT}\/RenderTextureImplDefault.hpp\n    )\n    \n    # find external libraries\n    if(NOT SFML_OPENGL_ES)\n        find_package(OpenGL REQUIRED)\n        if(SFML_OS_LINUX)\n            find_package(X11 REQUIRED)\n        endif()\n        include_directories(${OPENGL_INCLUDE_DIR})\n    endif()\n    if(SFML_OPENGL_ES AND SFML_OS_LINUX)\n        find_package(EGL REQUIRED)\n        find_package(GLES REQUIRED)\n        include_directories(${EGL_INCLUDE_DIR} ${GLES_INCLUDE_DIR})\n    endif()\n    \n    # build the list of external libraries to link\n    if(NOT SFML_OPENGL_ES)\n        list(APPEND GRAPHICS_EXT_LIBS ${OPENGL_gl_LIBRARY})\n        if(SFML_OS_LINUX)\n            list(APPEND GRAPHICS_EXT_LIBS ${X11_LIBRARIES})\n        endif()\n    endif()\n    if(SFML_OPENGL_ES AND SFML_OS_LINUX)\n        list(APPEND GRAPHICS_EXT_LIBS ${EGL_LIBRARY} ${GLES_LIBRARY})\n    endif()\n    if(SFML_OS_IOS)\n        list(APPEND GRAPHICS_EXT_LIBS \"-framework OpenGLES\")\n    elseif(SFML_OS_ANDROID)\n        list(APPEND GRAPHICS_EXT_LIBS z)\n    endif()\n    \n    # add preprocessor symbols\n    add_definitions(-DSTBI_FAILURE_USERMSG)\n    \n    # ImageLoader.cpp must be compiled with the -fno-strict-aliasing\n    # when gcc is used; otherwise saving PNGs may crash in stb_image_write\n    if(SFML_COMPILER_GCC)\n        set_source_files_properties(${SRCROOT}\/ImageLoader.cpp PROPERTIES COMPILE_FLAGS -fno-strict-aliasing)\n    endif()\n    \n    set(src ${SRC} ${DRAWABLES_SRC} ${RENDER_TEXTURE_SRC} ${STB_SRC})\n\npost_target: |\n    target_link_libraries(${this} PUBLIC ${GRAPHICS_EXT_LIBS})\n\n",
    "version": "2.4.2",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/SFML\/SFML",
            "tag": "2.4.2"
        }
    },
    "sha256": "b709d824c395b64a55645d2d36773307accef6802fee4af75eed29bbdc70af0f",
    "created": "2017-02-11 21:01:38.516713"
}

{
    "project": "pvt.cppan.demo.sfml.system",
    "cppan": "source:\n    git: https:\/\/github.com\/SFML\/SFML\n    tag: 2.4.0\n\nversion: 2.4.0\n\nfiles:\n    -   cmake\/.*\n    -   include\/.*\n    -   src\/SFML\/System\/.*\n\noptions:\n    static:\n        definitions:\n            public:\n                -   SFML_STATIC\n    shared:\n        definitions:\n            private:\n                -   SFML_SYSTEM_EXPORTS\n\npost_sources: |\n    # define a macro that helps defining an option\n    macro(sfml_set_option var default type docstring)\n        if(NOT DEFINED ${var})\n            set(${var} ${default})\n        endif()\n        set(${var} ${${var}} CACHE ${type} ${docstring} FORCE)\n    endmacro()\n    \n    # include the configuration file\n    include(${CMAKE_CURRENT_SOURCE_DIR}\/cmake\/Config.cmake)\n    \n    # setup version numbers\n    set(VERSION_MAJOR ${PACKAGE_VERSION_MAJOR})\n    set(VERSION_MINOR ${PACKAGE_VERSION_MINOR})\n    set(VERSION_PATCH ${PACKAGE_VERSION_PATCH})\n    \n    # add an option for choosing the OpenGL implementation\n    sfml_set_option(SFML_OPENGL_ES ${OPENGL_ES} BOOL \"TRUE to use an OpenGL ES implementation, FALSE to use a desktop OpenGL implementation\")\n    \n    # define SFML_OPENGL_ES if needed\n    if(SFML_OPENGL_ES)\n        add_definitions(-DSFML_OPENGL_ES)\n        add_definitions(-DGL_GLEXT_PROTOTYPES)\n    endif()\n    \n    set(INCROOT ${SDIR}\/include\/SFML\/System)\n    set(SRCROOT ${SDIR}\/src\/SFML\/System)\n    \n    # all source files\n    set(SRC\n        ${SRCROOT}\/Clock.cpp\n        ${INCROOT}\/Clock.hpp\n        ${SRCROOT}\/Err.cpp\n        ${INCROOT}\/Err.hpp\n        ${INCROOT}\/Export.hpp\n        ${INCROOT}\/InputStream.hpp\n        ${SRCROOT}\/Lock.cpp\n        ${INCROOT}\/Lock.hpp\n        ${SRCROOT}\/Mutex.cpp\n        ${INCROOT}\/Mutex.hpp\n        ${INCROOT}\/NativeActivity.hpp\n        ${INCROOT}\/NonCopyable.hpp\n        ${SRCROOT}\/Sleep.cpp\n        ${INCROOT}\/Sleep.hpp\n        ${SRCROOT}\/String.cpp\n        ${INCROOT}\/String.hpp\n        ${INCROOT}\/String.inl\n        ${SRCROOT}\/Thread.cpp\n        ${INCROOT}\/Thread.hpp\n        ${INCROOT}\/Thread.inl\n        ${SRCROOT}\/ThreadLocal.cpp\n        ${INCROOT}\/ThreadLocal.hpp\n        ${INCROOT}\/ThreadLocalPtr.hpp\n        ${INCROOT}\/ThreadLocalPtr.inl\n        ${SRCROOT}\/Time.cpp\n        ${INCROOT}\/Time.hpp\n        ${INCROOT}\/Utf.hpp\n        ${INCROOT}\/Utf.inl\n        ${INCROOT}\/Vector2.hpp\n        ${INCROOT}\/Vector2.inl\n        ${INCROOT}\/Vector3.hpp\n        ${INCROOT}\/Vector3.inl\n        ${SRCROOT}\/FileInputStream.cpp\n        ${INCROOT}\/FileInputStream.hpp\n        ${SRCROOT}\/MemoryInputStream.cpp\n        ${INCROOT}\/MemoryInputStream.hpp\n    )\n    \n    # add platform specific sources\n    if(SFML_OS_WINDOWS)\n        set(PLATFORM_SRC\n            ${SRCROOT}\/Win32\/ClockImpl.cpp\n            ${SRCROOT}\/Win32\/ClockImpl.hpp\n            ${SRCROOT}\/Win32\/MutexImpl.cpp\n            ${SRCROOT}\/Win32\/MutexImpl.hpp\n            ${SRCROOT}\/Win32\/SleepImpl.cpp\n            ${SRCROOT}\/Win32\/SleepImpl.hpp\n            ${SRCROOT}\/Win32\/ThreadImpl.cpp\n            ${SRCROOT}\/Win32\/ThreadImpl.hpp\n            ${SRCROOT}\/Win32\/ThreadLocalImpl.cpp\n            ${SRCROOT}\/Win32\/ThreadLocalImpl.hpp\n        )\n    else()\n        set(PLATFORM_SRC\n            ${SRCROOT}\/Unix\/ClockImpl.cpp\n            ${SRCROOT}\/Unix\/ClockImpl.hpp\n            ${SRCROOT}\/Unix\/MutexImpl.cpp\n            ${SRCROOT}\/Unix\/MutexImpl.hpp\n            ${SRCROOT}\/Unix\/SleepImpl.cpp\n            ${SRCROOT}\/Unix\/SleepImpl.hpp\n            ${SRCROOT}\/Unix\/ThreadImpl.cpp\n            ${SRCROOT}\/Unix\/ThreadImpl.hpp\n            ${SRCROOT}\/Unix\/ThreadLocalImpl.cpp\n            ${SRCROOT}\/Unix\/ThreadLocalImpl.hpp\n        )\n    \n        if(SFML_OS_ANDROID)\n            set(PLATFORM_SRC ${PLATFORM_SRC}\n                ${SRCROOT}\/Android\/Activity.hpp\n                ${SRCROOT}\/Android\/Activity.cpp\n                ${SRCROOT}\/Android\/NativeActivity.cpp\n                ${SRCROOT}\/Android\/ResourceStream.cpp\n                ${SRCROOT}\/Android\/ResourceStream.cpp\n            )\n        endif()\n    endif()\n    \n    # build the list of external libraries to link\n    if(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_MACOSX)\n        list(APPEND SYSTEM_EXT_LIBS pthread)\n    endif()\n    if(SFML_OS_LINUX)\n        list(APPEND SYSTEM_EXT_LIBS rt)\n    endif()\n    if(SFML_OS_WINDOWS)\n        list(APPEND SYSTEM_EXT_LIBS winmm)\n    endif()\n    if(SFML_OS_ANDROID)\n        list(APPEND SYSTEM_EXT_LIBS android log)\n    endif()\n    \n    set(src ${SRC} ${PLATFORM_SRC})\n    \n\npost_target: |\n    target_link_libraries(${this} PUBLIC ${SYSTEM_EXT_LIBS})\n    \n\n",
    "version": "2.4.0",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/SFML\/SFML",
            "tag": "2.4.0"
        }
    },
    "sha256": "56d4fa22c0f581100c8eb67e43dc3f5c975d91c13ac2b821e6d0400e4910675b",
    "created": "2016-09-12 15:20:49.747152"
}

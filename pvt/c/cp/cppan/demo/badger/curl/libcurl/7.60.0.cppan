{
    "project": "pvt.cppan.demo.badger.curl.libcurl",
    "cppan": "source:\n    git: https:\/\/github.com\/curl\/curl\n    tag: curl-{M}_{m}_{p}\n\nversion: 7.60.0\n\ntype: library\n\nfiles:\n    -   include\/.*\\.cmake\n    -   include\/.*\\.h\n    -   include\/curl\/curlbuild.h.cmake\n    -   lib\/.*\\.c\n    -   lib\/.*\\.h\n    -   lib\/curl_config.h.cmake\n\ninclude_directories:\n    public:\n        -   include\n    private:\n        -   lib\n\noptions:\n    any:\n        definitions:\n            private:\n                -   BUILDING_LIBCURL\n            public:\n                -   HAVE_GSSAPI\n                -   HAVE_GSSGNU\n                -   HAVE_LIBSSH2_H\n                -   HAVE_LIBZ\n                -   HAVE_SOCKET\n                -   HAVE_ZLIB_H\n                -   USE_ARES\n                -   USE_LIBSSH2\n                -   USE_NGHTTP2\n                -   USE_OPENSSL\n            unix:\n                private:\n                    -   HAVE_CONFIG_H\n        link_libraries:\n            unix:\n                public:\n                    -   lber\n                    -   ldap\n            win32:\n                public:\n                    -   Wldap32.lib\n    static:\n        definitions:\n            public:\n                -   CURL_STATICLIB\n\ndependencies:\n    public:\n        pvt.cppan.demo.c_ares:\n            version: 1\n        pvt.cppan.demo.gnu.gss:\n            version: 1\n        pvt.cppan.demo.madler.zlib:\n            version: 1\n        pvt.cppan.demo.libssh2:\n            version: 1\n        pvt.cppan.demo.nghttp2:\n            version: 1\n\npost_sources: |\n    set(OPERATING_SYSTEM \"${CMAKE_SYSTEM_NAME}\")\n    set(OS \"\\\"${CMAKE_SYSTEM_NAME}\\\"\")\n    set(HAVE_POSIX_STRERROR_R 1)\n    \n    ################################################################################\n    # recv, recvfrom, send, getnameinfo, gethostname\n    # ARGUMENTS AND RETURN VALUES\n    #\n    # The AutoTools build tries to be really thorough here.  So much so that it\n    # takes forever.  We really don't want to do that.  Lets make some educated\n    # guesses based on datatypes we have available, and for others, use some 'sane'\n    # defaults.  This should be much quicker and nearly as accurate ... and even\n    # if not, it probably won't matter in the least.\n    \n    IF (HAVE_SSIZE_T AND HAVE_SOCKLEN_T)\n        # If we have ssize_t and socklen_t, the API is usually sane and uses ssize_t and size_t for lengths\n        SET (RECVFROM_TYPE_RETV ssize_t)\n        SET (RECVFROM_TYPE_ARG3 size_t)\n    ELSE ()\n        SET (RECVFROM_TYPE_RETV int)\n        SET (RECVFROM_TYPE_ARG3 int)\n    ENDIF ()\n    \n    IF (HAVE_TYPE_SOCKET)\n        # If the SOCKET type is defined, it uses socket ... should be windows only\n        SET (RECVFROM_TYPE_ARG1 SOCKET)\n    ELSE ()\n        SET (RECVFROM_TYPE_ARG1 int)\n    ENDIF()\n    \n    IF (HAVE_SOCKLEN_T)\n        # If we have socklen_t the APIs pretty much always actually use it\n        SET (RECVFROM_TYPE_ARG6 \"socklen_t *\")\n        SET (GETNAMEINFO_TYPE_ARG2 socklen_t)\n        SET (GETNAMEINFO_TYPE_ARG46 socklen_t)\n    ELSE ()\n        SET (RECVFROM_TYPE_ARG6 \"int *\")\n        SET (GETNAMEINFO_TYPE_ARG2 int)\n        SET (GETNAMEINFO_TYPE_ARG46 int)\n    ENDIF ()\n    \n    # Functions are typically consistent so the equivalent fields map ... equivalently\n    SET (RECV_TYPE_RETV ${RECVFROM_TYPE_RETV})\n    SET (SEND_TYPE_RETV ${RECVFROM_TYPE_RETV})\n    SET (RECV_TYPE_ARG1 ${RECVFROM_TYPE_ARG1})\n    SET (SEND_TYPE_ARG1 ${RECVFROM_TYPE_ARG1})\n    SET (RECV_TYPE_ARG3 ${RECVFROM_TYPE_ARG3})\n    SET (SEND_TYPE_ARG3 ${RECVFROM_TYPE_ARG3})\n    SET (GETHOSTNAME_TYPE_ARG2 ${RECVFROM_TYPE_ARG3})\n    \n    # These should always be \"sane\" values to use always\n    SET (RECVFROM_QUAL_ARG5 )\n    SET (RECVFROM_TYPE_ARG2 \"void *\")\n    SET (RECVFROM_TYPE_ARG4 int)\n    SET (RECVFROM_TYPE_ARG5 \"struct sockaddr *\")\n    SET (RECV_TYPE_ARG2 \"void *\")\n    SET (RECV_TYPE_ARG4 int)\n    SET (GETNAMEINFO_TYPE_ARG1 \"struct sockaddr *\")\n    SET (GETNAMEINFO_TYPE_ARG7 int)\n    SET (SEND_TYPE_ARG2 \"void *\")\n    SET (SEND_TYPE_ARG4 int)\n    set (SEND_QUAL_ARG2 const)\n    ################################################################################\n    \n    set(CURL_SIZEOF_LONG ${SIZEOF_LONG})\n    \n    if(SIZEOF_LONG EQUAL 8)\n      set(CURL_TYPEOF_CURL_OFF_T long)\n      set(CURL_SIZEOF_CURL_OFF_T 8)\n      set(CURL_FORMAT_CURL_OFF_T \"ld\")\n      set(CURL_FORMAT_CURL_OFF_TU \"lu\")\n      set(CURL_FORMAT_OFF_T \"%ld\")\n      set(CURL_SUFFIX_CURL_OFF_T L)\n      set(CURL_SUFFIX_CURL_OFF_TU UL)\n    endif(SIZEOF_LONG EQUAL 8)\n    \n    if(SIZEOF_LONG_LONG EQUAL 8)\n      set(CURL_TYPEOF_CURL_OFF_T \"long long\")\n      set(CURL_SIZEOF_CURL_OFF_T 8)\n      set(CURL_FORMAT_CURL_OFF_T \"lld\")\n      set(CURL_FORMAT_CURL_OFF_TU \"llu\")\n      set(CURL_FORMAT_OFF_T \"%lld\")\n      set(CURL_SUFFIX_CURL_OFF_T LL)\n      set(CURL_SUFFIX_CURL_OFF_TU ULL)\n    endif(SIZEOF_LONG_LONG EQUAL 8)\n    \n    if(NOT CURL_TYPEOF_CURL_OFF_T)\n      set(CURL_TYPEOF_CURL_OFF_T ${ssize_t})\n      set(CURL_SIZEOF_CURL_OFF_T ${SIZEOF_SSIZE_T})\n      # TODO: need adjustment here.\n      set(CURL_FORMAT_CURL_OFF_T \"ld\")\n      set(CURL_FORMAT_CURL_OFF_TU \"lu\")\n      set(CURL_FORMAT_OFF_T \"%ld\")\n      set(CURL_SUFFIX_CURL_OFF_T L)\n      set(CURL_SUFFIX_CURL_OFF_TU LU)\n    endif(NOT CURL_TYPEOF_CURL_OFF_T)\n    \n    if(HAVE_LONG_LONG)\n      set(HAVE_LONGLONG 1)\n      set(HAVE_LL 1)\n    endif()\n    \n    if(HAVE_SOCKLEN_T)\n      set(CURL_TYPEOF_CURL_SOCKLEN_T socklen_t)\n      set(CURL_SIZEOF_CURL_SOCKLEN_T ${SIZEOF_SOCKLEN_T})\n    else()\n      set(CURL_TYPEOF_CURL_SOCKLEN_T int)\n      set(CURL_SIZEOF_CURL_SOCKLEN_T ${SIZEOF_INT})\n    endif()\n    \n    set(SIZEOF_CURL_OFF_T ${CURL_SIZEOF_CURL_OFF_T})\n    \n    macro(setv v)\n        set(CURL_PULL_${v} ${HAVE_${v}})\n    endmacro(setv)\n    \n    setv(WS2TCPIP_H)\n    setv(SYS_TYPES_H)\n    setv(STDINT_H)\n    setv(INTTYPES_H)\n    setv(SYS_SOCKET_H)\n    setv(SYS_POLL_H)\n    \n    \n    # When checking for symbols, we need to make sure we set the proper\n    # headers, libraries, and definitions for the detection to work properly\n    # CMAKE_REQUIRED_DEFINITIONS, CMAKE_REQUIRED_LIBRARIES, and\n    # CMAKE_EXTRA_INCLUDE_FILES.  When we're done with the detection, we'll\n    # unset them.\n    \n    SET (CMAKE_REQUIRED_DEFINITIONS ${SYSFLAGS})\n    LIST (APPEND CMAKE_REQUIRED_LIBRARIES ${CARES_DEPENDENT_LIBS})\n    \n    MACRO (CARES_EXTRAINCLUDE_IFSET var include)\n        IF (${var})\n            LIST (APPEND CMAKE_EXTRA_INCLUDE_FILES ${include})\n        ENDIF ()\n    ENDMACRO ()\n    \n    CARES_EXTRAINCLUDE_IFSET (HAVE_STDBOOL_H      stdbool.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_TYPES_H    sys\/types.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_ARPA_INET_H    arpa\/inet.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_ARPA_NAMESER_H arpa\/nameser.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_NETDB_H        netdb.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_NET_IF_H       net\/if.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_NETINET_IN_H   netinet\/in.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_NETINET_TCP_H  netinet\/tcp.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_SIGNAL_H       signal.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_STDLIB_H       stdlib.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_STRING_H       string.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_STRINGS_H      strings.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_IOCTL_H    sys\/ioctl.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_SELECT_H   sys\/select.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_SOCKET_H   sys\/socket.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_TIME_H     sys\/time.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_SYS_UIO_H      sys\/uio.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_TIME_H         time.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_FCNTL_H        fcntl.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_UNISTD_H       unistd.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_WINSOCK2_H     winsock2.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_WS2TCPIP_H     ws2tcpip.h)\n    CARES_EXTRAINCLUDE_IFSET (HAVE_WINDOWS_H      windows.h)\n    \n    # Check Types\n    # CHECK_TYPE_SIZE can't be used to see if a type exists because on Apple when\n    # building multi-arch, it will throw an error.  So we need to wrap\n    # CHECK_C_SOURCE_COMPILES for our tests.\n    MACRO (CARES_TYPE_EXISTS type var)\n        SET(_CARES_C_SOURCE \"\n            #include <stdio.h>\n            #include <stdlib.h>\n        \")\n        FOREACH(_C_HEADER ${CMAKE_EXTRA_INCLUDE_FILES})\n            SET(_CARES_C_SOURCE \"${_CARES_C_SOURCE}\n            #include <${_C_HEADER}>\")\n        ENDFOREACH(_C_HEADER)\n    \n        SET(_CARES_C_SOURCE \"${_CARES_C_SOURCE}\n            int main() {\n                ${type} var_exists;\n                return 0;\n            }\n        \")\n        CHECK_C_SOURCE_COMPILES (\"${_CARES_C_SOURCE}\" ${var})\n    ENDMACRO ()\n    \n    CARES_TYPE_EXISTS (socklen_t                 HAVE_SOCKLEN_T)\n    CARES_TYPE_EXISTS (SOCKET                    HAVE_TYPE_SOCKET)\n    CARES_TYPE_EXISTS (bool                      HAVE_BOOL_T)\n    CARES_TYPE_EXISTS (ssize_t                   HAVE_SSIZE_T)\n    CARES_TYPE_EXISTS (\"long long\"               HAVE_LONGLONG)\n    CARES_TYPE_EXISTS (sig_atomic_t              HAVE_SIG_ATOMIC_T)\n    CARES_TYPE_EXISTS (\"struct addrinfo\"         HAVE_STRUCT_ADDRINFO)\n    CARES_TYPE_EXISTS (\"struct in6_addr\"         HAVE_STRUCT_IN6_ADDR)\n    CARES_TYPE_EXISTS (\"struct sockaddr_in6\"     HAVE_STRUCT_SOCKADDR_IN6)\n    CARES_TYPE_EXISTS (\"struct sockaddr_storage\" HAVE_STRUCT_SOCKADDR_STORAGE)\n    CARES_TYPE_EXISTS (\"struct timeval\"          HAVE_STRUCT_TIMEVAL)\n    \n    \n    # Check for preprocessor defines\n    CHECK_SYMBOL_EXISTS (AF_INET6        \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_AF_INET6)\n    CHECK_SYMBOL_EXISTS (O_NONBLOCK      \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_O_NONBLOCK)\n    CHECK_SYMBOL_EXISTS (FIONBIO         \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_FIONBIO)\n    CHECK_SYMBOL_EXISTS (SIOCGIFADDR     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_IOCTL_SIOCGIFADDR)\n    CHECK_SYMBOL_EXISTS (MSG_NOSIGNAL    \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_MSG_NOSIGNAL)\n    CHECK_SYMBOL_EXISTS (PF_INET6        \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_PF_INET6)\n    CHECK_SYMBOL_EXISTS (SO_NONBLOCK     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SO_NONBLOCK)\n    \n    \n    IF (HAVE_FCNTL AND HAVE_O_NONBLOCK)\n        SET (HAVE_FCNTL_O_NONBLOCK 1)\n    ENDIF ()\n    \n    IF (HAVE_IOCTL AND HAVE_FIONBIO)\n        SET (HAVE_IOCTL_FIONBIO 1)\n    ENDIF ()\n    \n    IF (HAVE_IOCTLSOCKET AND HAVE_FIONBIO)\n        SET (HAVE_IOCTLSOCKET_FIONBIO 1)\n    ENDIF ()\n    \n    IF (HAVE_IOCTLSOCKET_CAMEL AND HAVE_FIONBIO)\n        SET (HAVE_IOCTLSOCKET_CAMEL_FIONBIO 1)\n    ENDIF ()\n    \n    configure_file(${SDIR}\/lib\/curl_config.h.cmake ${BDIR}\/curl_config.h)\n\ncheck_function_exists:\n    -   fork\n    -   geteuid\n    -   gethostbyname\n    -   getpass_r\n    -   getppid\n    -   getprotobyname\n    -   getpwuid\n    -   getpwuid_r\n    -   getrlimit\n    -   gettimeofday\n    -   if_nametoindex\n    -   inet_addr\n    -   ldap_init_fd\n    -   ldap_url_parse\n    -   perror\n    -   pipe\n    -   pthread_create\n    -   setlocale\n    -   setmode\n    -   setrlimit\n    -   uname\n    -   utime\n\ncheck_include_exists:\n    -   file: alloca.h\n        variable: HAVE_ALLOCA_H\n        cpp: false\n    -   file: arpa\/inet.h\n        variable: HAVE_ARPA_INET_H\n        cpp: false\n    -   file: arpa\/tftp.h\n        variable: HAVE_ARPA_TFTP_H\n        cpp: false\n    -   file: assert.h\n        variable: HAVE_ASSERT_H\n        cpp: false\n    -   file: crypto.h\n        variable: HAVE_CRYPTO_H\n        cpp: false\n    -   file: cyassl\/error-ssl.h\n        variable: HAVE_CYASSL_ERROR_SSL_H\n        cpp: false\n    -   file: cyassl\/options.h\n        variable: HAVE_CYASSL_OPTIONS_H\n        cpp: false\n    -   file: errno.h\n        variable: HAVE_ERRNO_H\n        cpp: false\n    -   file: err.h\n        variable: HAVE_ERR_H\n        cpp: false\n    -   file: fcntl.h\n        variable: HAVE_FCNTL_H\n        cpp: false\n    -   file: gssapi\/gssapi_generic.h\n        variable: HAVE_GSSAPI_GSSAPI_GENERIC_H\n        cpp: false\n    -   file: gssapi\/gssapi.h\n        variable: HAVE_GSSAPI_GSSAPI_H\n        cpp: false\n    -   file: gssapi\/gssapi_krb5.h\n        variable: HAVE_GSSAPI_GSSAPI_KRB5_H\n        cpp: false\n    -   file: idn2.h\n        variable: HAVE_IDN2_H\n        cpp: false\n    -   file: inttypes.h\n        variable: HAVE_INTTYPES_H\n        cpp: false\n    -   file: io.h\n        variable: HAVE_IO_H\n        cpp: false\n    -   file: libgen.h\n        variable: HAVE_LIBGEN_H\n        cpp: false\n    -   file: librtmp\/rtmp.h\n        variable: HAVE_LIBRTMP_RTMP_H\n        cpp: false\n    -   file: libssh2.h\n        variable: HAVE_LIBSSH2_H\n        cpp: false\n    -   file: limits.h\n        variable: HAVE_LIMITS_H\n        cpp: false\n    -   file: locale.h\n        variable: HAVE_LOCALE_H\n        cpp: false\n    -   file: netdb.h\n        variable: HAVE_NETDB_H\n        cpp: false\n    -   file: netinet\/in.h\n        variable: HAVE_NETINET_IN_H\n        cpp: false\n    -   file: netinet\/tcp.h\n        variable: HAVE_NETINET_TCP_H\n        cpp: false\n    -   file: net\/if.h\n        variable: HAVE_NET_IF_H\n        cpp: false\n    -   file: nghttp2\/nghttp2.h\n        variable: HAVE_NGHTTP2_NGHTTP2_H\n        cpp: false\n    -   file: openssl\/crypto.h\n        variable: HAVE_OPENSSL_CRYPTO_H\n        cpp: false\n    -   file: openssl\/engine.h\n        variable: HAVE_OPENSSL_ENGINE_H\n        cpp: false\n    -   file: openssl\/err.h\n        variable: HAVE_OPENSSL_ERR_H\n        cpp: false\n    -   file: openssl\/pem.h\n        variable: HAVE_OPENSSL_PEM_H\n        cpp: false\n    -   file: openssl\/pkcs12.h\n        variable: HAVE_OPENSSL_PKCS12_H\n        cpp: false\n    -   file: openssl\/rsa.h\n        variable: HAVE_OPENSSL_RSA_H\n        cpp: false\n    -   file: openssl\/ssl.h\n        variable: HAVE_OPENSSL_SSL_H\n        cpp: false\n    -   file: openssl\/x509.h\n        variable: HAVE_OPENSSL_X509_H\n        cpp: false\n    -   file: pem.h\n        variable: HAVE_PEM_H\n        cpp: false\n    -   file: poll.h\n        variable: HAVE_POLL_H\n        cpp: false\n    -   file: pwd.h\n        variable: HAVE_PWD_H\n        cpp: false\n    -   file: rsa.h\n        variable: HAVE_RSA_H\n        cpp: false\n    -   file: setjmp.h\n        variable: HAVE_SETJMP_H\n        cpp: false\n    -   file: sgtty.h\n        variable: HAVE_SGTTY_H\n        cpp: false\n    -   file: socket.h\n        variable: HAVE_SOCKET_H\n        cpp: false\n    -   file: ssl.h\n        variable: HAVE_SSL_H\n        cpp: false\n    -   file: stdbool.h\n        variable: HAVE_STDBOOL_H\n        cpp: false\n    -   file: stdint.h\n        variable: HAVE_STDINT_H\n        cpp: false\n    -   file: stdlib.h\n        variable: HAVE_STDLIB_H\n        cpp: false\n    -   file: sys\/filio.h\n        variable: HAVE_SYS_FILIO_H\n        cpp: false\n    -   file: sys\/ioctl.h\n        variable: HAVE_SYS_IOCTL_H\n        cpp: false\n    -   file: sys\/param.h\n        variable: HAVE_SYS_PARAM_H\n        cpp: false\n    -   file: sys\/poll.h\n        variable: HAVE_SYS_POLL_H\n        cpp: false\n    -   file: sys\/resource.h\n        variable: HAVE_SYS_RESOURCE_H\n        cpp: false\n    -   file: sys\/select.h\n        variable: HAVE_SYS_SELECT_H\n        cpp: false\n    -   file: sys\/socket.h\n        variable: HAVE_SYS_SOCKET_H\n        cpp: false\n    -   file: sys\/sockio.h\n        variable: HAVE_SYS_SOCKIO_H\n        cpp: false\n    -   file: sys\/stat.h\n        variable: HAVE_SYS_STAT_H\n        cpp: false\n    -   file: sys\/time.h\n        variable: HAVE_SYS_TIME_H\n        cpp: false\n    -   file: sys\/types.h\n        variable: HAVE_SYS_TYPES_H\n        cpp: false\n    -   file: sys\/uio.h\n        variable: HAVE_SYS_UIO_H\n        cpp: false\n    -   file: sys\/un.h\n        variable: HAVE_SYS_UN_H\n        cpp: false\n    -   file: sys\/utime.h\n        variable: HAVE_SYS_UTIME_H\n        cpp: false\n    -   file: sys\/wait.h\n        variable: HAVE_SYS_WAIT_H\n        cpp: false\n    -   file: termios.h\n        variable: HAVE_TERMIOS_H\n        cpp: false\n    -   file: termio.h\n        variable: HAVE_TERMIO_H\n        cpp: false\n    -   file: time.h\n        variable: HAVE_TIME_H\n        cpp: false\n    -   file: unistd.h\n        variable: HAVE_UNISTD_H\n        cpp: false\n    -   file: utime.h\n        variable: HAVE_UTIME_H\n        cpp: false\n    -   file: ws2tcpip.h\n        variable: HAVE_WS2TCPIP_H\n        cpp: false\n    -   file: x509.h\n        variable: HAVE_X509_H\n        cpp: false\n\ncheck_type_size:\n    -   type: bool\n    -   type: int\n    -   type: long\n    -   type: long long\n    -   type: off_t\n    -   type: short\n    -   type: signal\n    -   type: socklen_t\n    -   type: ssize_t\n    -   type: time_t\n\ncheck_library_function:\n    -   function: pthread_create\n        library: pthread\n\ncheck_c_source_compiles:\n    HAVE_TIME_WITH_SYS_TIME:\n        text: \"\\n#include <time.h>\\n#include <sys\/time.h>\\nint main() {return 0;}\\n\"\n        invert: false\n    STDC_HEADERS:\n        text: \"\\n#include <stdlib.h>\\n#include <stdarg.h>\\n#include <string.h>\\n#include <float.h>\\nint main() {return 0;}\\n\"\n        invert: false\n\nchecks:\n    HAVE_STRUCT_SOCKADDR_UN_SUN_PATH:\n        text: CHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_un\" sun_path \"\" HAVE_STRUCT_SOCKADDR_UN_SUN_PATH)\n        invert: false\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/curl\/curl",
            "tag": "curl-{M}_{m}_{p}"
        }
    },
    "version": "7.60.0",
    "hash": "d7ff689579d9f7c1449994cfdbc034bc4fafe0cea9d2f402dc0dd71e685a841e",
    "created": "2018-05-21 16:08:34.685536"
}

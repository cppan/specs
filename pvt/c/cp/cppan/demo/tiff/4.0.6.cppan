{
    "project": "pvt.cppan.demo.tiff",
    "cppan": "source:\n    remote: ftp:\/\/download.osgeo.org\/libtiff\/tiff-4.0.6.tar.gz\n\nversion: 4.0.6\n\nlicense: COPYRIGHT\n\nfiles:\n    -   libtiff\/libtiff.def\n    -   libtiff\/t4.h\n    -   libtiff\/tif_aux.c\n    -   libtiff\/tif_close.c\n    -   libtiff\/tif_codec.c\n    -   libtiff\/tif_color.c\n    -   libtiff\/tif_compress.c\n    -   libtiff\/tif_config.h.cmake.in\n    -   libtiff\/tif_dir.c\n    -   libtiff\/tif_dir.h\n    -   libtiff\/tif_dirinfo.c\n    -   libtiff\/tif_dirread.c\n    -   libtiff\/tif_dirwrite.c\n    -   libtiff\/tif_dumpmode.c\n    -   libtiff\/tif_error.c\n    -   libtiff\/tif_extension.c\n    -   libtiff\/tif_fax3.c\n    -   libtiff\/tif_fax3.h\n    -   libtiff\/tif_fax3sm.c\n    -   libtiff\/tif_flush.c\n    -   libtiff\/tif_getimage.c\n    -   libtiff\/tif_jbig.c\n    -   libtiff\/tif_jpeg.c\n    -   libtiff\/tif_jpeg_12.c\n    -   libtiff\/tif_luv.c\n    -   libtiff\/tif_lzma.c\n    -   libtiff\/tif_lzw.c\n    -   libtiff\/tif_next.c\n    -   libtiff\/tif_ojpeg.c\n    -   libtiff\/tif_open.c\n    -   libtiff\/tif_packbits.c\n    -   libtiff\/tif_pixarlog.c\n    -   libtiff\/tif_predict.c\n    -   libtiff\/tif_predict.h\n    -   libtiff\/tif_print.c\n    -   libtiff\/tif_read.c\n    -   libtiff\/tif_strip.c\n    -   libtiff\/tif_swab.c\n    -   libtiff\/tif_thunder.c\n    -   libtiff\/tif_tile.c\n    -   libtiff\/tif_unix.c\n    -   libtiff\/tif_version.c\n    -   libtiff\/tif_warning.c\n    -   libtiff\/tif_win32.c\n    -   libtiff\/tif_write.c\n    -   libtiff\/tif_zip.c\n    -   libtiff\/tiff.h\n    -   libtiff\/tiffconf.h.cmake.in\n    -   libtiff\/tiffio.h\n    -   libtiff\/tiffiop.h\n    -   libtiff\/tiffvers.h\n    -   libtiff\/uvcode.h\n\ninclude_directories:\n    public:\n        -   libtiff\n\noptions:\n    any:\n        definitions:\n            public:\n                -   TIF_PLATFORM_CONSOLE\n\ndependencies:\n    public:\n        pvt.cppan.demo.madler.zlib:\n            version: 1\n\npost_sources: |\n    if (WIN32)\n        list(REMOVE_ITEM src \"${CMAKE_CURRENT_SOURCE_DIR}\/libtiff\/tif_unix.c\")\n    else()\n        list(REMOVE_ITEM src \"${CMAKE_CURRENT_SOURCE_DIR}\/libtiff\/tif_win32.c\")\n    endif()\n    \n    set(HAVE_IEEEFP 1)\n    \n    # CPU bit order\n    set(fillorder FILLORDER_MSB2LSB)\n    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"i.*86.*\" OR\n       CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"amd64.*\" OR\n       CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"x86_64.*\")\n      set(fillorder FILLORDER_LSB2MSB)\n    endif()\n    set(HOST_FILLORDER ${fillorder} CACHE STRING \"Native CPU bit order\")\n    \n    set(TIFF_INT8_T \"signed char\")\n    set(TIFF_UINT8_T \"unsigned char\")\n    \n    set(TIFF_INT16_T \"signed short\")\n    set(TIFF_UINT16_T \"unsigned short\")\n    \n    if(SIZEOF_SIGNED_INT EQUAL 4)\n      set(TIFF_INT32_T \"signed int\")\n      set(TIFF_INT32_FORMAT \"%d\")\n    elseif(SIZEOF_SIGNED_LONG EQUAL 4)\n      set(TIFF_INT32_T \"signed long\")\n      set(TIFF_INT32_FORMAT \"%ld\")\n    endif()\n    \n    if(SIZEOF_UNSIGNED_INT EQUAL 4)\n      set(TIFF_UINT32_T \"unsigned int\")\n      set(TIFF_UINT32_FORMAT \"%u\")\n    elseif(SIZEOF_UNSIGNED_LONG EQUAL 4)\n      set(TIFF_UINT32_T \"unsigned long\")\n      set(TIFF_UINT32_FORMAT \"%lu\")\n    endif()\n    \n    if(SIZEOF_SIGNED_LONG EQUAL 8)\n      set(TIFF_INT64_T \"signed long\")\n      set(TIFF_INT64_FORMAT \"%ld\")\n    elseif(SIZEOF_SIGNED_LONG_LONG EQUAL 8)\n      set(TIFF_INT64_T \"signed long long\")\n      if (MINGW)\n        set(TIFF_INT64_FORMAT \"%I64d\")\n      else()\n        set(TIFF_INT64_FORMAT \"%lld\")\n      endif()\n    endif()\n    \n    if(SIZEOF_UNSIGNED_LONG EQUAL 8)\n      set(TIFF_UINT64_T \"unsigned long\")\n      set(TIFF_UINT64_FORMAT \"%lu\")\n    elseif(SIZEOF_UNSIGNED_LONG_LONG EQUAL 8)\n      set(TIFF_UINT64_T \"unsigned long long\")\n      if (MINGW)\n        set(TIFF_UINT64_FORMAT \"%I64u\")\n      else()\n        set(TIFF_UINT64_FORMAT \"%llu\")\n      endif()\n    endif()\n    \n    if(SIZEOF_UNSIGNED_INT EQUAL SIZEOF_SIZE_T)\n      set(TIFF_SIZE_T \"unsigned int\")\n      set(TIFF_SIZE_FORMAT \"%u\")\n    elseif(SIZEOF_UNSIGNED_LONG EQUAL SIZEOF_SIZE_T)\n      set(TIFF_SIZE_T \"unsigned long\")\n      set(TIFF_SIZE_FORMAT \"%lu\")\n    elseif(SIZEOF_UNSIGNED_LONG_LONG EQUAL SIZEOF_SIZE_T)\n      set(TIFF_SIZE_T \"unsigned long\")\n      if (MINGW)\n        set(TIFF_SIZE_FORMAT \"%I64u\")\n      else()\n        set(TIFF_SIZE_FORMAT \"%llu\")\n      endif()\n    endif()\n    \n    if(SIZEOF_SIGNED_INT EQUAL SIZEOF_UNSIGNED_CHAR_P)\n      set(TIFF_SSIZE_T \"signed int\")\n      set(TIFF_SSIZE_FORMAT \"%d\")\n    elseif(SIZEOF_SIGNED_LONG EQUAL SIZEOF_UNSIGNED_CHAR_P)\n      set(TIFF_SSIZE_T \"signed long\")\n      set(TIFF_SSIZE_FORMAT \"%ld\")\n    elseif(SIZEOF_SIGNED_LONG_LONG EQUAL SIZEOF_UNSIGNED_CHAR_P)\n      set(TIFF_SSIZE_T \"signed long long\")\n      if (MINGW)\n        set(TIFF_SSIZE_FORMAT \"%I64d\")\n      else()\n        set(TIFF_SSIZE_FORMAT \"%lld\")\n      endif()\n    endif()\n    \n    if(NOT SIZEOF_PTRDIFF_T)\n      set(TIFF_PTRDIFF_T \"${TIFF_SSIZE_T}\")\n      set(TIFF_PTRDIFF_FORMAT \"${SSIZE_FORMAT}\")\n    else()\n      set(TIFF_PTRDIFF_T \"ptrdiff_t\")\n      set(TIFF_PTRDIFF_FORMAT \"%ld\")\n    endif()\n    \n    if (UNIX)\n      # This might not catch every possibility catered for by\n      # AC_SYS_LARGEFILE.\n      add_definitions(-D_FILE_OFFSET_BITS=64)\n      set(FILE_OFFSET_BITS 64)\n    endif()\n    \n    option(ccitt \"support for CCITT Group 3 & 4 algorithms\" ON)\n    set(CCITT_SUPPORT ${ccitt})\n    \n    option(packbits \"support for Macintosh PackBits algorithm\" ON)\n    set(PACKBITS_SUPPORT ${packbits})\n    \n    option(lzw \"support for LZW algorithm\" ON)\n    set(LZW_SUPPORT ${lzw})\n    \n    option(thunder \"support for ThunderScan 4-bit RLE algorithm\" ON)\n    set(THUNDER_SUPPORT ${thunder})\n    \n    option(next \"support for NeXT 2-bit RLE algorithm\" ON)\n    set(NEXT_SUPPORT ${next})\n    \n    option(logluv \"support for LogLuv high dynamic range algorithm\" ON)\n    set(LOGLUV_SUPPORT ${logluv})\n    \n    # Option for Microsoft Document Imaging\n    option(mdi \"support for Microsoft Document Imaging\" ON)\n    set(MDI_SUPPORT ${mdi})\n    \n    # Orthogonal features\n    \n    # Strip chopping\n    option(strip-chopping \"strip chopping (whether or not to convert single-strip uncompressed images to mutiple strips of specified size to reduce memory usage)\" ON)\n    set(TIFF_DEFAULT_STRIP_SIZE 8192 CACHE STRING \"default size of the strip in bytes (when strip chopping is enabled)\")\n    \n    set(STRIPCHOP_DEFAULT)\n    if(strip-chopping)\n      set(STRIPCHOP_DEFAULT TRUE)\n      if(TIFF_DEFAULT_STRIP_SIZE)\n        set(STRIP_SIZE_DEFAULT \"${TIFF_DEFAULT_STRIP_SIZE}\")\n      endif()\n    endif()\n    \n    # Defer loading of strip\/tile offsets\n    option(defer-strile-load \"enable deferred strip\/tile offset\/size loading (experimental)\" OFF)\n    set(DEFER_STRILE_LOAD ${defer-strile-load})\n    \n    # CHUNKY_STRIP_READ_SUPPORT\n    option(chunky-strip-read \"enable reading large strips in chunks for TIFFReadScanline() (experimental)\" OFF)\n    set(CHUNKY_STRIP_READ_SUPPORT ${chunky-strip-read})\n    \n    # SUBIFD support\n    set(SUBIFD_SUPPORT 1)\n    \n    # Default handling of ASSOCALPHA support.\n    option(extrasample-as-alpha \"the RGBA interface will treat a fourth sample with no EXTRASAMPLE_ value as being ASSOCALPHA. Many packages produce RGBA files but don't mark the alpha properly\" ON)\n    if(extrasample-as-alpha)\n      set(DEFAULT_EXTRASAMPLE_AS_ALPHA 1)\n    endif()\n    \n    # Default handling of YCbCr subsampling support.\n    # See Bug 168 in Bugzilla, and JPEGFixupTestSubsampling() for details.\n    option(check-ycbcr-subsampling \"enable picking up YCbCr subsampling info from the JPEG data stream to support files lacking the tag\" ON)\n    if (check-ycbcr-subsampling)\n      set(CHECK_JPEG_YCBCR_SUBSAMPLING 1)\n    endif()\n    \n    set(ZIP_SUPPORT 1)\n    \n    #if (WIN32)\n    #  set(USE_WIN32_FILEIO TRUE)\n    #else()\n      set(USE_WIN32_FILEIO FALSE)\n    #endif()\n    \n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}\/libtiff\/tif_config.h.cmake.in\n               ${CMAKE_CURRENT_BINARY_DIR}\/tif_config.h\n               @ONLY)\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}\/libtiff\/tiffconf.h.cmake.in\n                   ${CMAKE_CURRENT_BINARY_DIR}\/tiffconf.h\n                   @ONLY)\n    \n    if (NOT EXISTS ${SDIR}\/fixdef.dummy)\n        file(APPEND ${SDIR}\/libtiff\/libtiff.def \"\\t_TIFFDataSize\\n\")\n        file_write_once(${SDIR}\/fixdef.dummy \"\")\n    endif()\n\ncheck_function_exists:\n    -   floor\n    -   getopt\n    -   isascii\n    -   lfind\n    -   memmove\n    -   memset\n    -   mmap\n    -   pow\n    -   setmode\n    -   sqrt\n    -   strcasecmp\n    -   strchr\n    -   strrchr\n    -   strstr\n    -   strtol\n    -   strtoull\n\ncheck_include_exists:\n    -   file: assert.h\n        variable: HAVE_ASSERT_H\n        cpp: false\n    -   file: dlfcn.h\n        variable: HAVE_DLFCN_H\n        cpp: false\n    -   file: fcntl.h\n        variable: HAVE_FCNTL_H\n        cpp: false\n    -   file: inttypes.h\n        variable: HAVE_INTTYPES_H\n        cpp: false\n    -   file: io.h\n        variable: HAVE_IO_H\n        cpp: false\n    -   file: limits.h\n        variable: HAVE_LIMITS_H\n        cpp: false\n    -   file: malloc.h\n        variable: HAVE_MALLOC_H\n        cpp: false\n    -   file: memory.h\n        variable: HAVE_MEMORY_H\n        cpp: false\n    -   file: search.h\n        variable: HAVE_SEARCH_H\n        cpp: false\n    -   file: stdint.h\n        variable: HAVE_STDINT_H\n        cpp: false\n    -   file: strings.h\n        variable: HAVE_STRINGS_H\n        cpp: false\n    -   file: string.h\n        variable: HAVE_STRING_H\n        cpp: false\n    -   file: sys\/time.h\n        variable: HAVE_SYS_TIME_H\n        cpp: false\n    -   file: sys\/types.h\n        variable: HAVE_SYS_TYPES_H\n        cpp: false\n    -   file: unistd.h\n        variable: HAVE_UNISTD_H\n        cpp: false\n\ncheck_type_size:\n    -   type: int16\n    -   type: int32\n    -   type: int8\n    -   type: ptrdiff_t\n    -   type: signed int\n    -   type: signed long\n    -   type: signed long long\n    -   type: signed short\n    -   type: unsigned char *\n    -   type: unsigned int\n    -   type: unsigned long\n    -   type: unsigned long long\n    -   type: unsigned short\n\ncheck_symbol_exists:\n    -   symbol: snprintf\n        headers:\n            -   stdio.h\n\n",
    "source": {
        "remote": {
            "url": "ftp:\/\/download.osgeo.org\/libtiff\/tiff-4.0.6.tar.gz"
        }
    },
    "version": "4.0.6",
    "hash": "46e25204cd2b54615927d9ed6e05b76b9f41bd23cf9b3d7b0778c9a52546a7d0",
    "created": "2017-03-31 13:25:49.318768"
}

{
    "project": "pvt.cppan.demo.tiff",
    "cppan": "check_function_exists:\n  - floor\n  - pow\n  - sqrt\n  - isascii\n  - memmove\n  - memset\n  - mmap\n  - setmode\n  - strcasecmp\n  - strchr\n  - strrchr\n  - strstr\n  - strtol\n  - strtol\n  - strtoull\n  - getopt\n  - lfind\ncheck_include_exists:\n  - assert.h\n  - dlfcn.h\n  - fcntl.h\n  - inttypes.h\n  - io.h\n  - limits.h\n  - malloc.h\n  - memory.h\n  - search.h\n  - stdint.h\n  - string.h\n  - strings.h\n  - sys\/time.h\n  - sys\/types.h\n  - unistd.h\ncheck_symbol_exists:\n  snprintf: stdio.h\ncheck_type_size:\n  - signed short\n  - unsigned short\n  - signed int\n  - unsigned int\n  - signed long\n  - unsigned long\n  - signed long long\n  - unsigned long long\n  - unsigned char *\n  - size_t\n  - ptrdiff_t\n  - int8\n  - int16\n  - int32\ndependencies:\n  pvt.cppan.demo.zlib: 1\nfiles:\n  - libtiff\/tif_aux.c\n  - libtiff\/tif_close.c\n  - libtiff\/tif_codec.c\n  - libtiff\/tif_color.c\n  - libtiff\/tif_compress.c\n  - libtiff\/tif_dir.c\n  - libtiff\/tif_dirinfo.c\n  - libtiff\/tif_dirread.c\n  - libtiff\/tif_dirwrite.c\n  - libtiff\/tif_dumpmode.c\n  - libtiff\/tif_error.c\n  - libtiff\/tif_extension.c\n  - libtiff\/tif_fax3.c\n  - libtiff\/tif_fax3sm.c\n  - libtiff\/tif_flush.c\n  - libtiff\/tif_getimage.c\n  - libtiff\/tif_jbig.c\n  - libtiff\/tif_jpeg.c\n  - libtiff\/tif_jpeg_12.c\n  - libtiff\/tif_luv.c\n  - libtiff\/tif_lzma.c\n  - libtiff\/tif_lzw.c\n  - libtiff\/tif_next.c\n  - libtiff\/tif_ojpeg.c\n  - libtiff\/tif_open.c\n  - libtiff\/tif_packbits.c\n  - libtiff\/tif_pixarlog.c\n  - libtiff\/tif_predict.c\n  - libtiff\/tif_print.c\n  - libtiff\/tif_read.c\n  - libtiff\/tif_strip.c\n  - libtiff\/tif_swab.c\n  - libtiff\/tif_thunder.c\n  - libtiff\/tif_tile.c\n  - libtiff\/tif_version.c\n  - libtiff\/tif_warning.c\n  - libtiff\/tif_write.c\n  - libtiff\/tif_zip.c\n  - libtiff\/tif_win32.c\n  - libtiff\/tif_unix.c\n  - libtiff\/t4.h\n  - libtiff\/tif_dir.h\n  - libtiff\/tif_fax3.h\n  - libtiff\/tif_predict.h\n  - libtiff\/tiff.h\n  - libtiff\/tiffio.h\n  - libtiff\/tiffiop.h\n  - libtiff\/tiffvers.h\n  - libtiff\/uvcode.h\n  - libtiff\/tif_config.h.cmake.in\n  - libtiff\/tiffconf.h.cmake.in\n  - libtiff\/libtiff.def\ninclude_directories:\n  public: libtiff\nlicense: COPYRIGHT\noptions:\n  any:\n    definitions:\n      public:\n        - TIF_PLATFORM_CONSOLE\npost_sources: \"if (WIN32)\\n    list(REMOVE_ITEM src \\\"${CMAKE_CURRENT_SOURCE_DIR}\/libtiff\/tif_unix.c\\\")\\nelse()\\n    list(REMOVE_ITEM src \\\"${CMAKE_CURRENT_SOURCE_DIR}\/libtiff\/tif_win32.c\\\")\\nendif()\\n\\nset(HAVE_IEEEFP 1)\\n\\n# CPU bit order\\nset(fillorder FILLORDER_MSB2LSB)\\nif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \\\"i.*86.*\\\" OR\\n   CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \\\"amd64.*\\\" OR\\n   CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \\\"x86_64.*\\\")\\n  set(fillorder FILLORDER_LSB2MSB)\\nendif()\\nset(HOST_FILLORDER ${fillorder} CACHE STRING \\\"Native CPU bit order\\\")\\n\\nset(TIFF_INT8_T \\\"signed char\\\")\\nset(TIFF_UINT8_T \\\"unsigned char\\\")\\n\\nset(TIFF_INT16_T \\\"signed short\\\")\\nset(TIFF_UINT16_T \\\"unsigned short\\\")\\n\\nif(SIZEOF_SIGNED_INT EQUAL 4)\\n  set(TIFF_INT32_T \\\"signed int\\\")\\n  set(TIFF_INT32_FORMAT \\\"%d\\\")\\nelseif(SIZEOF_SIGNED_LONG EQUAL 4)\\n  set(TIFF_INT32_T \\\"signed long\\\")\\n  set(TIFF_INT32_FORMAT \\\"%ld\\\")\\nendif()\\n\\nif(SIZEOF_UNSIGNED_INT EQUAL 4)\\n  set(TIFF_UINT32_T \\\"unsigned int\\\")\\n  set(TIFF_UINT32_FORMAT \\\"%u\\\")\\nelseif(SIZEOF_UNSIGNED_LONG EQUAL 4)\\n  set(TIFF_UINT32_T \\\"unsigned long\\\")\\n  set(TIFF_UINT32_FORMAT \\\"%lu\\\")\\nendif()\\n\\nif(SIZEOF_SIGNED_LONG EQUAL 8)\\n  set(TIFF_INT64_T \\\"signed long\\\")\\n  set(TIFF_INT64_FORMAT \\\"%ld\\\")\\nelseif(SIZEOF_SIGNED_LONG_LONG EQUAL 8)\\n  set(TIFF_INT64_T \\\"signed long long\\\")\\n  if (MINGW)\\n    set(TIFF_INT64_FORMAT \\\"%I64d\\\")\\n  else()\\n    set(TIFF_INT64_FORMAT \\\"%lld\\\")\\n  endif()\\nendif()\\n\\nif(SIZEOF_UNSIGNED_LONG EQUAL 8)\\n  set(TIFF_UINT64_T \\\"unsigned long\\\")\\n  set(TIFF_UINT64_FORMAT \\\"%lu\\\")\\nelseif(SIZEOF_UNSIGNED_LONG_LONG EQUAL 8)\\n  set(TIFF_UINT64_T \\\"unsigned long long\\\")\\n  if (MINGW)\\n    set(TIFF_UINT64_FORMAT \\\"%I64u\\\")\\n  else()\\n    set(TIFF_UINT64_FORMAT \\\"%llu\\\")\\n  endif()\\nendif()\\n\\nif(SIZEOF_UNSIGNED_INT EQUAL SIZEOF_SIZE_T)\\n  set(TIFF_SIZE_T \\\"unsigned int\\\")\\n  set(TIFF_SIZE_FORMAT \\\"%u\\\")\\nelseif(SIZEOF_UNSIGNED_LONG EQUAL SIZEOF_SIZE_T)\\n  set(TIFF_SIZE_T \\\"unsigned long\\\")\\n  set(TIFF_SIZE_FORMAT \\\"%lu\\\")\\nelseif(SIZEOF_UNSIGNED_LONG_LONG EQUAL SIZEOF_SIZE_T)\\n  set(TIFF_SIZE_T \\\"unsigned long\\\")\\n  if (MINGW)\\n    set(TIFF_SIZE_FORMAT \\\"%I64u\\\")\\n  else()\\n    set(TIFF_SIZE_FORMAT \\\"%llu\\\")\\n  endif()\\nendif()\\n\\nif(SIZEOF_SIGNED_INT EQUAL SIZEOF_UNSIGNED_CHAR_P)\\n  set(TIFF_SSIZE_T \\\"signed int\\\")\\n  set(TIFF_SSIZE_FORMAT \\\"%d\\\")\\nelseif(SIZEOF_SIGNED_LONG EQUAL SIZEOF_UNSIGNED_CHAR_P)\\n  set(TIFF_SSIZE_T \\\"signed long\\\")\\n  set(TIFF_SSIZE_FORMAT \\\"%ld\\\")\\nelseif(SIZEOF_SIGNED_LONG_LONG EQUAL SIZEOF_UNSIGNED_CHAR_P)\\n  set(TIFF_SSIZE_T \\\"signed long long\\\")\\n  if (MINGW)\\n    set(TIFF_SSIZE_FORMAT \\\"%I64d\\\")\\n  else()\\n    set(TIFF_SSIZE_FORMAT \\\"%lld\\\")\\n  endif()\\nendif()\\n\\nif(NOT SIZEOF_PTRDIFF_T)\\n  set(TIFF_PTRDIFF_T \\\"${TIFF_SSIZE_T}\\\")\\n  set(TIFF_PTRDIFF_FORMAT \\\"${SSIZE_FORMAT}\\\")\\nelse()\\n  set(TIFF_PTRDIFF_T \\\"ptrdiff_t\\\")\\n  set(TIFF_PTRDIFF_FORMAT \\\"%ld\\\")\\nendif()\\n\\nif (UNIX)\\n  # This might not catch every possibility catered for by\\n  # AC_SYS_LARGEFILE.\\n  add_definitions(-D_FILE_OFFSET_BITS=64)\\n  set(FILE_OFFSET_BITS 64)\\nendif()\\n\\noption(ccitt \\\"support for CCITT Group 3 & 4 algorithms\\\" ON)\\nset(CCITT_SUPPORT ${ccitt})\\n\\noption(packbits \\\"support for Macintosh PackBits algorithm\\\" ON)\\nset(PACKBITS_SUPPORT ${packbits})\\n\\noption(lzw \\\"support for LZW algorithm\\\" ON)\\nset(LZW_SUPPORT ${lzw})\\n\\noption(thunder \\\"support for ThunderScan 4-bit RLE algorithm\\\" ON)\\nset(THUNDER_SUPPORT ${thunder})\\n\\noption(next \\\"support for NeXT 2-bit RLE algorithm\\\" ON)\\nset(NEXT_SUPPORT ${next})\\n\\noption(logluv \\\"support for LogLuv high dynamic range algorithm\\\" ON)\\nset(LOGLUV_SUPPORT ${logluv})\\n\\n# Option for Microsoft Document Imaging\\noption(mdi \\\"support for Microsoft Document Imaging\\\" ON)\\nset(MDI_SUPPORT ${mdi})\\n\\n# Orthogonal features\\n\\n# Strip chopping\\noption(strip-chopping \\\"strip chopping (whether or not to convert single-strip uncompressed images to mutiple strips of specified size to reduce memory usage)\\\" ON)\\nset(TIFF_DEFAULT_STRIP_SIZE 8192 CACHE STRING \\\"default size of the strip in bytes (when strip chopping is enabled)\\\")\\n\\nset(STRIPCHOP_DEFAULT)\\nif(strip-chopping)\\n  set(STRIPCHOP_DEFAULT TRUE)\\n  if(TIFF_DEFAULT_STRIP_SIZE)\\n    set(STRIP_SIZE_DEFAULT \\\"${TIFF_DEFAULT_STRIP_SIZE}\\\")\\n  endif()\\nendif()\\n\\n# Defer loading of strip\/tile offsets\\noption(defer-strile-load \\\"enable deferred strip\/tile offset\/size loading (experimental)\\\" OFF)\\nset(DEFER_STRILE_LOAD ${defer-strile-load})\\n\\n# CHUNKY_STRIP_READ_SUPPORT\\noption(chunky-strip-read \\\"enable reading large strips in chunks for TIFFReadScanline() (experimental)\\\" OFF)\\nset(CHUNKY_STRIP_READ_SUPPORT ${chunky-strip-read})\\n\\n# SUBIFD support\\nset(SUBIFD_SUPPORT 1)\\n\\n# Default handling of ASSOCALPHA support.\\noption(extrasample-as-alpha \\\"the RGBA interface will treat a fourth sample with no EXTRASAMPLE_ value as being ASSOCALPHA. Many packages produce RGBA files but don't mark the alpha properly\\\" ON)\\nif(extrasample-as-alpha)\\n  set(DEFAULT_EXTRASAMPLE_AS_ALPHA 1)\\nendif()\\n\\n# Default handling of YCbCr subsampling support.\\n# See Bug 168 in Bugzilla, and JPEGFixupTestSubsampling() for details.\\noption(check-ycbcr-subsampling \\\"enable picking up YCbCr subsampling info from the JPEG data stream to support files lacking the tag\\\" ON)\\nif (check-ycbcr-subsampling)\\n  set(CHECK_JPEG_YCBCR_SUBSAMPLING 1)\\nendif()\\n\\nset(ZIP_SUPPORT 1)\\n\\n#if (WIN32)\\n#  set(USE_WIN32_FILEIO TRUE)\\n#else()\\n  set(USE_WIN32_FILEIO FALSE)\\n#endif()\\n\\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}\/libtiff\/tif_config.h.cmake.in\\n           ${CMAKE_CURRENT_BINARY_DIR}\/tif_config.h\\n           @ONLY)\\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}\/libtiff\/tiffconf.h.cmake.in\\n               ${CMAKE_CURRENT_BINARY_DIR}\/tiffconf.h\\n               @ONLY)\\n\\nif (NOT EXISTS ${SDIR}\/fixdef.dummy)\\n    file(APPEND ${SDIR}\/libtiff\/libtiff.def \\\"\\\\t_TIFFDataSize\\\\n\\\")\\n    file_write_once(${SDIR}\/fixdef.dummy \\\"\\\")\\nendif()\\n\"\nsource:\n  remote: ftp:\/\/download.osgeo.org\/libtiff\/tiff-4.0.6.tar.gz\nversion: 4.0.6",
    "source": {
        "remote": {
            "url": "ftp:\/\/download.osgeo.org\/libtiff\/tiff-4.0.6.tar.gz"
        }
    },
    "version": "4.0.6",
    "sha256": "ad9847fd54cbbf0486a2e9f0601ba4eb5c699cb72b6bd1539e197fb4e9f098ec",
    "created": "2016-12-16 19:18:13.535411"
}

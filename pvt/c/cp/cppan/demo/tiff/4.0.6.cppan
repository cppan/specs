{
    "cppan": "license: COPYRIGHT\r\n\r\nroot_directory: libtiff-Release-v4-0-6\r\n\r\nfiles:\r\n    - libtiff/tif_aux.c\r\n    - libtiff/tif_close.c\r\n    - libtiff/tif_codec.c\r\n    - libtiff/tif_color.c\r\n    - libtiff/tif_compress.c\r\n    - libtiff/tif_dir.c\r\n    - libtiff/tif_dirinfo.c\r\n    - libtiff/tif_dirread.c\r\n    - libtiff/tif_dirwrite.c\r\n    - libtiff/tif_dumpmode.c\r\n    - libtiff/tif_error.c\r\n    - libtiff/tif_extension.c\r\n    - libtiff/tif_fax3.c\r\n    - libtiff/tif_fax3sm.c\r\n    - libtiff/tif_flush.c\r\n    - libtiff/tif_getimage.c\r\n    - libtiff/tif_jbig.c\r\n    - libtiff/tif_jpeg.c\r\n    - libtiff/tif_jpeg_12.c\r\n    - libtiff/tif_luv.c\r\n    - libtiff/tif_lzma.c\r\n    - libtiff/tif_lzw.c\r\n    - libtiff/tif_next.c\r\n    - libtiff/tif_ojpeg.c\r\n    - libtiff/tif_open.c\r\n    - libtiff/tif_packbits.c\r\n    - libtiff/tif_pixarlog.c\r\n    - libtiff/tif_predict.c\r\n    - libtiff/tif_print.c\r\n    - libtiff/tif_read.c\r\n    - libtiff/tif_strip.c\r\n    - libtiff/tif_swab.c\r\n    - libtiff/tif_thunder.c\r\n    - libtiff/tif_tile.c\r\n    - libtiff/tif_version.c\r\n    - libtiff/tif_warning.c\r\n    - libtiff/tif_write.c\r\n    - libtiff/tif_zip.c\r\n\r\n    - libtiff/tif_win32.c\r\n    - libtiff/tif_unix.c\r\n\r\n    - libtiff/t4.h\r\n    - libtiff/tif_dir.h\r\n    - libtiff/tif_fax3.h\r\n    - libtiff/tif_predict.h\r\n    - libtiff/tiff.h\r\n    - libtiff/tiffio.h\r\n    - libtiff/tiffiop.h\r\n    - libtiff/tiffvers.h\r\n    - libtiff/uvcode.h\r\n\r\n    - libtiff/tif_config.h.cmake.in\r\n    - libtiff/tiffconf.h.cmake.in\r\n\r\n    - libtiff/libtiff.def\r\n\r\ninclude_directories:\r\n    public: libtiff\r\n\r\ncheck_include_exists:\r\n  - assert.h\r\n  - dlfcn.h\r\n  - fcntl.h\r\n  - inttypes.h\r\n  - io.h\r\n  - limits.h\r\n  - malloc.h\r\n  - memory.h\r\n  - search.h\r\n  - stdint.h\r\n  - string.h\r\n  - strings.h\r\n  - sys/time.h\r\n  - sys/types.h\r\n  - unistd.h\r\n\r\ncheck_function_exists:\r\n  - floor\r\n  - pow\r\n  - sqrt\r\n  - isascii\r\n  - memmove\r\n  - memset\r\n  - mmap\r\n  - setmode\r\n  - strcasecmp\r\n  - strchr\r\n  - strrchr\r\n  - strstr\r\n  - strtol\r\n  - strtol\r\n  - strtoull\r\n  - getopt\r\n  - lfind\r\n\r\ncheck_type_size:\r\n  - signed short\r\n  - unsigned short\r\n  - signed int\r\n  - unsigned int\r\n  - signed long\r\n  - unsigned long\r\n  - signed long long\r\n  - unsigned long long\r\n  - \"unsigned char *\"\r\n  - size_t\r\n  - ptrdiff_t\r\n  - int8\r\n  - int16\r\n  - int32\r\n\r\npost_sources: |\r\n    if (WIN32)\r\n        list(REMOVE_ITEM src \"${CMAKE_CURRENT_SOURCE_DIR}/libtiff/tif_unix.c\")\r\n    else()\r\n        list(REMOVE_ITEM src \"${CMAKE_CURRENT_SOURCE_DIR}/libtiff/tif_win32.c\")\r\n    endif()\r\n\r\n    set(HAVE_IEEEFP 1)\r\n\r\n    # CPU bit order\r\n    set(fillorder FILLORDER_MSB2LSB)\r\n    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"i.*86.*\" OR\r\n       CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"amd64.*\" OR\r\n       CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"x86_64.*\")\r\n      set(fillorder FILLORDER_LSB2MSB)\r\n    endif()\r\n    set(HOST_FILLORDER ${fillorder} CACHE STRING \"Native CPU bit order\")\r\n\r\n    set(TIFF_INT8_T \"signed char\")\r\n    set(TIFF_UINT8_T \"unsigned char\")\r\n\r\n    set(TIFF_INT16_T \"signed short\")\r\n    set(TIFF_UINT16_T \"unsigned short\")\r\n\r\n    if(SIZEOF_SIGNED_INT EQUAL 4)\r\n      set(TIFF_INT32_T \"signed int\")\r\n      set(TIFF_INT32_FORMAT \"%d\")\r\n    elseif(SIZEOF_SIGNED_LONG EQUAL 4)\r\n      set(TIFF_INT32_T \"signed long\")\r\n      set(TIFF_INT32_FORMAT \"%ld\")\r\n    endif()\r\n\r\n    if(SIZEOF_UNSIGNED_INT EQUAL 4)\r\n      set(TIFF_UINT32_T \"unsigned int\")\r\n      set(TIFF_UINT32_FORMAT \"%u\")\r\n    elseif(SIZEOF_UNSIGNED_LONG EQUAL 4)\r\n      set(TIFF_UINT32_T \"unsigned long\")\r\n      set(TIFF_UINT32_FORMAT \"%lu\")\r\n    endif()\r\n\r\n    if(SIZEOF_SIGNED_LONG EQUAL 8)\r\n      set(TIFF_INT64_T \"signed long\")\r\n      set(TIFF_INT64_FORMAT \"%ld\")\r\n    elseif(SIZEOF_SIGNED_LONG_LONG EQUAL 8)\r\n      set(TIFF_INT64_T \"signed long long\")\r\n      if (MINGW)\r\n        set(TIFF_INT64_FORMAT \"%I64d\")\r\n      else()\r\n        set(TIFF_INT64_FORMAT \"%lld\")\r\n      endif()\r\n    endif()\r\n\r\n    if(SIZEOF_UNSIGNED_LONG EQUAL 8)\r\n      set(TIFF_UINT64_T \"unsigned long\")\r\n      set(TIFF_UINT64_FORMAT \"%lu\")\r\n    elseif(SIZEOF_UNSIGNED_LONG_LONG EQUAL 8)\r\n      set(TIFF_UINT64_T \"unsigned long long\")\r\n      if (MINGW)\r\n        set(TIFF_UINT64_FORMAT \"%I64u\")\r\n      else()\r\n        set(TIFF_UINT64_FORMAT \"%llu\")\r\n      endif()\r\n    endif()\r\n\r\n    if(SIZEOF_UNSIGNED_INT EQUAL SIZEOF_SIZE_T)\r\n      set(TIFF_SIZE_T \"unsigned int\")\r\n      set(TIFF_SIZE_FORMAT \"%u\")\r\n    elseif(SIZEOF_UNSIGNED_LONG EQUAL SIZEOF_SIZE_T)\r\n      set(TIFF_SIZE_T \"unsigned long\")\r\n      set(TIFF_SIZE_FORMAT \"%lu\")\r\n    elseif(SIZEOF_UNSIGNED_LONG_LONG EQUAL SIZEOF_SIZE_T)\r\n      set(TIFF_SIZE_T \"unsigned long\")\r\n      if (MINGW)\r\n        set(TIFF_SIZE_FORMAT \"%I64u\")\r\n      else()\r\n        set(TIFF_SIZE_FORMAT \"%llu\")\r\n      endif()\r\n    endif()\r\n\r\n    if(SIZEOF_SIGNED_INT EQUAL SIZEOF_UNSIGNED_CHAR_P)\r\n      set(TIFF_SSIZE_T \"signed int\")\r\n      set(TIFF_SSIZE_FORMAT \"%d\")\r\n    elseif(SIZEOF_SIGNED_LONG EQUAL SIZEOF_UNSIGNED_CHAR_P)\r\n      set(TIFF_SSIZE_T \"signed long\")\r\n      set(TIFF_SSIZE_FORMAT \"%ld\")\r\n    elseif(SIZEOF_SIGNED_LONG_LONG EQUAL SIZEOF_UNSIGNED_CHAR_P)\r\n      set(TIFF_SSIZE_T \"signed long long\")\r\n      if (MINGW)\r\n        set(TIFF_SSIZE_FORMAT \"%I64d\")\r\n      else()\r\n        set(TIFF_SSIZE_FORMAT \"%lld\")\r\n      endif()\r\n    endif()\r\n\r\n    if(NOT SIZEOF_PTRDIFF_T)\r\n      set(TIFF_PTRDIFF_T \"${TIFF_SSIZE_T}\")\r\n      set(TIFF_PTRDIFF_FORMAT \"${SSIZE_FORMAT}\")\r\n    else()\r\n      set(TIFF_PTRDIFF_T \"ptrdiff_t\")\r\n      set(TIFF_PTRDIFF_FORMAT \"%ld\")\r\n    endif()\r\n\r\n    if (UNIX)\r\n      # This might not catch every possibility catered for by\r\n      # AC_SYS_LARGEFILE.\r\n      add_definitions(-D_FILE_OFFSET_BITS=64)\r\n      set(FILE_OFFSET_BITS 64)\r\n    endif()\r\n\r\n    option(ccitt \"support for CCITT Group 3 & 4 algorithms\" ON)\r\n    set(CCITT_SUPPORT ${ccitt})\r\n\r\n    option(packbits \"support for Macintosh PackBits algorithm\" ON)\r\n    set(PACKBITS_SUPPORT ${packbits})\r\n\r\n    option(lzw \"support for LZW algorithm\" ON)\r\n    set(LZW_SUPPORT ${lzw})\r\n\r\n    option(thunder \"support for ThunderScan 4-bit RLE algorithm\" ON)\r\n    set(THUNDER_SUPPORT ${thunder})\r\n\r\n    option(next \"support for NeXT 2-bit RLE algorithm\" ON)\r\n    set(NEXT_SUPPORT ${next})\r\n\r\n    option(logluv \"support for LogLuv high dynamic range algorithm\" ON)\r\n    set(LOGLUV_SUPPORT ${logluv})\r\n\r\n    # Option for Microsoft Document Imaging\r\n    option(mdi \"support for Microsoft Document Imaging\" ON)\r\n    set(MDI_SUPPORT ${mdi})\r\n\r\n    # Orthogonal features\r\n\r\n    # Strip chopping\r\n    option(strip-chopping \"strip chopping (whether or not to convert single-strip uncompressed images to mutiple strips of specified size to reduce memory usage)\" ON)\r\n    set(TIFF_DEFAULT_STRIP_SIZE 8192 CACHE STRING \"default size of the strip in bytes (when strip chopping is enabled)\")\r\n\r\n    set(STRIPCHOP_DEFAULT)\r\n    if(strip-chopping)\r\n      set(STRIPCHOP_DEFAULT TRUE)\r\n      if(TIFF_DEFAULT_STRIP_SIZE)\r\n        set(STRIP_SIZE_DEFAULT \"${TIFF_DEFAULT_STRIP_SIZE}\")\r\n      endif()\r\n    endif()\r\n\r\n    # Defer loading of strip/tile offsets\r\n    option(defer-strile-load \"enable deferred strip/tile offset/size loading (experimental)\" OFF)\r\n    set(DEFER_STRILE_LOAD ${defer-strile-load})\r\n\r\n    # CHUNKY_STRIP_READ_SUPPORT\r\n    option(chunky-strip-read \"enable reading large strips in chunks for TIFFReadScanline() (experimental)\" OFF)\r\n    set(CHUNKY_STRIP_READ_SUPPORT ${chunky-strip-read})\r\n\r\n    # SUBIFD support\r\n    set(SUBIFD_SUPPORT 1)\r\n\r\n    # Default handling of ASSOCALPHA support.\r\n    option(extrasample-as-alpha \"the RGBA interface will treat a fourth sample with no EXTRASAMPLE_ value as being ASSOCALPHA. Many packages produce RGBA files but don't mark the alpha properly\" ON)\r\n    if(extrasample-as-alpha)\r\n      set(DEFAULT_EXTRASAMPLE_AS_ALPHA 1)\r\n    endif()\r\n\r\n    # Default handling of YCbCr subsampling support.\r\n    # See Bug 168 in Bugzilla, and JPEGFixupTestSubsampling() for details.\r\n    option(check-ycbcr-subsampling \"enable picking up YCbCr subsampling info from the JPEG data stream to support files lacking the tag\" ON)\r\n    if (check-ycbcr-subsampling)\r\n      set(CHECK_JPEG_YCBCR_SUBSAMPLING 1)\r\n    endif()\r\n\r\n    set(ZIP_SUPPORT 1)\r\n\r\n    if (WIN32)\r\n      set(USE_WIN32_FILEIO TRUE)\r\n    else()\r\n      set(USE_WIN32_FILEIO FALSE)\r\n    endif()\r\n\r\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libtiff/tif_config.h.cmake.in\r\n               ${CMAKE_CURRENT_BINARY_DIR}/tif_config.h\r\n               @ONLY)\r\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libtiff/tiffconf.h.cmake.in\r\n                   ${CMAKE_CURRENT_BINARY_DIR}/tiffconf.h\r\n                   @ONLY)\r\n\r\ndependencies:\r\n    pvt.cppan.demo.zlib: 1\r\n\r\n",
    "project": "pvt.cppan.demo.tiff",
    "source": {
        "git": {
            "tag": "4.0.6",
            "url": "https://github.com/vadz/libtiff/archive/Release-v4-0-6.zip"
        }
    },
    "version": "4.0.6"
}
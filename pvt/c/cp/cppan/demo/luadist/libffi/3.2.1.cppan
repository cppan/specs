{
    "project": "pvt.cppan.demo.luadist.libffi",
    "cppan": "source:\n    git: https:\/\/github.com\/libffi\/libffi\n    tag: v3.2.1\n\nversion: 3.2.1\n\ntype: lib\n\nfiles:\n    -   include\/.*\\.h\n    -   include\/.*\\.h.in\n    -   src\/.*\n\nexclude_from_build:\n    -   src\/.*\n\noptions:\n    any:\n        definitions:\n            private:\n                -   FFI_HIDDEN=\n                -   ${TARGET}\n            win32:\n                private:\n                    -   HAVE_FASTCALL=0\n        include_directories:\n            win32:\n                private:\n                    -   src\/x86\n\npost_sources: |\n    file_write_once(${BDIR}\/fficonfig.h \"\")\n    \n    delete_in_file_once(${SDIR}\/src\/x86\/ffi.c \"__declspec(fastcall)\")\n    \n    set ( TARGET X86 )\n    \n    set ( STDC_HEADERS 1 )\n    \n    if ( HAVE_MMAP )\n      set ( HAVE_MMAP_ANON 1 )\n      set ( HAVE_MMAP_FILE 1 )\n    endif ( )\n    \n    # ASM related settings\n    set ( HAVE_AS_REGISTER_PSEUDO_OP 0 )\n    set ( HAVE_AS_CFI_PSEUDO_OP 0 )\n    set ( HAVE_AS_X86_PCREL 0 )\n    set ( HAVE_AS_ASCII_PSEUDO_OP 1 )\n    set ( HAVE_AS_STRING_PSEUDO_OP 1 )\n    # GCC related settings\n    set ( HAVE_RO_EH_FRAME 1 )\n    set ( EH_FRAME_FLAGS aw )\n    set ( HAVE_HIDDEN_VISIBILITY_ATTRIBUTE 0 )\n    # FFI Options\n    option ( FFI_CLOSURES \"Enable closures\" on )\n    option ( FFI_DEBUG \"Compile with debug\" off )\n    option ( FFI_NO_STRUCTS \"Define this is you do not want support for aggregate types.\"\n      off )\n    option ( FFI_NO_RAW_API \"Define this is you do not want support for the raw API.\"\n      off )\n    option ( USING_PURIFY \"Define this if you are using Purify and want to suppress spurious messages.\"\n      off )\n    \n    file ( GLOB SRC_C ${SDIR}\/src\/*.c )\n    \n    if ( CMAKE_SIZEOF_VOID_P MATCHES 8 )\n      set ( HAVE_64BIT 1 )\n      set ( HAVE_AS_X86_64_UNWIND_SECTION_TYPE 1 )\n    else ( )\n      set ( HAVE_64BIT 0 )\n    endif ( )\n    \n    \n    #set ( FFI_EXEC_TRAMPOLINE_TABLE 0)\n    if ( WIN32 )\n      # MSVC specific\n      set ( FFI_CLOSURES 1 )\n      set ( SYMBOL_UNDERSCORE 1 )\n      set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi.c )\n      if ( MSVC )\n        set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/sysv.S )\n      endif ( )\n      if ( HAVE_64BIT )\n        # This will probably not work on MinGW\n        set ( TARGET X86_WIN64 )\n        set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/win64.S )\n      else ( )\n        set ( TARGET X86_WIN32 )\n        set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/win32.S )\n      endif ( )\n    elseif ( CYGWIN )\n        set ( FFI_CLOSURES 1 )\n        set ( SYMBOL_UNDERSCORE 1 )\n        set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi.c )\n        if ( HAVE_64BIT )\n          # This will probably not work yet\n          set ( TARGET X86_WIN64 )\n          set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/win64.S )\n        else ( )\n          set ( TARGET X86_WIN32 )\n          set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/win32.S )\n        endif ( )\n    elseif ( APPLE )\n        set ( TARGET X86_DARWIN )\n        set ( FFI_CLOSURES 1 )\n        set ( FFI_EXEC_TRAMPOLINE_TABLE 1 )\n        set ( FFI_MMAP_EXEC_WRIT 1 )\n        set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi.c )\n        set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/darwin.S )\n        set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi64.c )\n        set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/darwin64.S )\n    else ( )\n      # Other x86 systems\n      set ( HAVE_AS_X86_PCREL 1 )\n      set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi.c )\n      set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/sysv.S )\n      if ( HAVE_64BIT )\n        set ( TARGET X86_64 )\n        set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi64.c )\n        set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/unix64.S )\n      else ( )\n        set ( TARGET X86 )\n      endif ( )\n    endif ( )\n    \n    configure_file(${SDIR}\/include\/ffi.h.in ${BDIR}\/ffi.h @ONLY)\n    \n    if (MSVC)\n    enable_language(ASM_MASM)\n    else()\n    enable_language(ASM)\n    endif()\n    set_source_files_properties ( ${SRC_ASM} PROPERTIES LANGUAGE C )\n    set(src ${src} ${SRC_C} ${SRC_ASM})\n    remove_src(src\/dlmalloc.c)\n    \n\ncheck_function_exists:\n    -   alloca\n    -   memcpy\n    -   mkostemp\n    -   mmap\n    -   mmap_blacklist\n\ncheck_include_exists:\n    -   stdlib.h\n    -   sys\/mman.h\n    -   alloca.h\n    -   dlfcn.h\n    -   inttypes.h\n    -   memory.h\n    -   stdint.h\n    -   stdlib.h\n    -   strings.h\n    -   string.h\n    -   sys\/mman.h\n    -   sys\/stat.h\n    -   sys\/types.h\n    -   unistd.h\n\ncheck_type_size:\n    -   double\n    -   long\n    -   size_t\n\ncheck_c_source_compiles:\n    STDC_HEADERS:\n        text: \"\\n#include <stdlib.h>\\n#include <stdarg.h>\\n#include <string.h>\\n#include <float.h>\\nint main() {return 0;}\\n\"\n        invert: false\n\n",
    "version": "3.2.1",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/libffi\/libffi",
            "tag": "v3.2.1"
        }
    },
    "sha256": "b9e722d41951cb0bd46b9297862a7c35665b7a3545c5c658124331cc14a556ed",
    "created": "2016-12-05 21:41:08.411781"
}

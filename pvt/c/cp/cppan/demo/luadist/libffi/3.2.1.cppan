{
    "project": "pvt.cppan.demo.luadist.libffi",
    "cppan": "source:\n  git: https:\/\/github.com\/libffi\/libffi\n  tag: v3.2.1\nversion: 3.2.1\ntype: lib\nfiles:\n  - include\/.*\\.h\n  - include\/.*\\.h.in\n  - src\/.*\nexclude_from_build:\n  - src\/.*\noptions:\n  any:\n    definitions:\n      private:\n        - FFI_HIDDEN=\n        - ${TARGET}\n      win32:\n        private:\n          - HAVE_FASTCALL=0\n    include_directories:\n      win32:\n        private:\n          - src\/x86\npost_sources: \"file_write_once(${BDIR}\/fficonfig.h \\\"\\\")\\n\\ndelete_in_file_once(${SDIR}\/src\/x86\/ffi.c \\\"__declspec(fastcall)\\\")\\n\\nset ( TARGET X86 )\\n\\nset ( STDC_HEADERS 1 )\\n\\nif ( HAVE_MMAP )\\n  set ( HAVE_MMAP_ANON 1 )\\n  set ( HAVE_MMAP_FILE 1 )\\nendif ( )\\n\\n# ASM related settings\\nset ( HAVE_AS_REGISTER_PSEUDO_OP 0 )\\nset ( HAVE_AS_CFI_PSEUDO_OP 0 )\\nset ( HAVE_AS_X86_PCREL 0 )\\nset ( HAVE_AS_ASCII_PSEUDO_OP 1 )\\nset ( HAVE_AS_STRING_PSEUDO_OP 1 )\\n# GCC related settings\\nset ( HAVE_RO_EH_FRAME 1 )\\nset ( EH_FRAME_FLAGS aw )\\nset ( HAVE_HIDDEN_VISIBILITY_ATTRIBUTE 0 )\\n# FFI Options\\noption ( FFI_CLOSURES \\\"Enable closures\\\" on )\\noption ( FFI_DEBUG \\\"Compile with debug\\\" off )\\noption ( FFI_NO_STRUCTS \\\"Define this is you do not want support for aggregate types.\\\"\\n  off )\\noption ( FFI_NO_RAW_API \\\"Define this is you do not want support for the raw API.\\\"\\n  off )\\noption ( USING_PURIFY \\\"Define this if you are using Purify and want to suppress spurious messages.\\\"\\n  off )\\n\\nfile ( GLOB SRC_C ${SDIR}\/src\/*.c )\\n\\nif ( CMAKE_SIZEOF_VOID_P MATCHES 8 )\\n  set ( HAVE_64BIT 1 )\\n  set ( HAVE_AS_X86_64_UNWIND_SECTION_TYPE 1 )\\nelse ( )\\n  set ( HAVE_64BIT 0 )\\nendif ( )\\n\\n\\n#set ( FFI_EXEC_TRAMPOLINE_TABLE 0)\\nif ( WIN32 )\\n  # MSVC specific\\n  set ( FFI_CLOSURES 1 )\\n  set ( SYMBOL_UNDERSCORE 1 )\\n  set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi.c )\\n  if ( MSVC )\\n    set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/sysv.S )\\n  endif ( )\\n  if ( HAVE_64BIT )\\n    # This will probably not work on MinGW\\n    set ( TARGET X86_WIN64 )\\n    set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/win64.S )\\n  else ( )\\n    set ( TARGET X86_WIN32 )\\n    set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/win32.S )\\n  endif ( )\\nelseif ( CYGWIN )\\n    set ( FFI_CLOSURES 1 )\\n    set ( SYMBOL_UNDERSCORE 1 )\\n    set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi.c )\\n    if ( HAVE_64BIT )\\n      # This will probably not work yet\\n      set ( TARGET X86_WIN64 )\\n      set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/win64.S )\\n    else ( )\\n      set ( TARGET X86_WIN32 )\\n      set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/win32.S )\\n    endif ( )\\nelseif ( APPLE )\\n    set ( TARGET X86_DARWIN )\\n    set ( FFI_CLOSURES 1 )\\n    set ( FFI_EXEC_TRAMPOLINE_TABLE 1 )\\n    set ( FFI_MMAP_EXEC_WRIT 1 )\\n    set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi.c )\\n    set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/darwin.S )\\n    set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi64.c )\\n    set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/darwin64.S )\\nelse ( )\\n  # Other x86 systems\\n  set ( HAVE_AS_X86_PCREL 1 )\\n  set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi.c )\\n  set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/sysv.S )\\n  if ( HAVE_64BIT )\\n    set ( TARGET X86_64 )\\n    set ( SRC_C ${SRC_C} ${SDIR}\/src\/x86\/ffi64.c )\\n    set ( SRC_ASM ${SRC_ASM} ${SDIR}\/src\/x86\/unix64.S )\\n  else ( )\\n    set ( TARGET X86 )\\n  endif ( )\\nendif ( )\\n\\nconfigure_file(${SDIR}\/include\/ffi.h.in ${BDIR}\/ffi.h @ONLY)\\n\\nif (MSVC)\\nenable_language(ASM_MASM)\\nelse()\\nenable_language(ASM)\\nendif()\\nset_source_files_properties ( ${SRC_ASM} PROPERTIES LANGUAGE C )\\nset(src ${src} ${SRC_C} ${SRC_ASM})\\nremove_src(src\/dlmalloc.c)\\n\"\ncheck_function_exists:\n  - alloca\n  - memcpy\n  - mkostemp\n  - mmap\n  - mmap_blacklist\ncheck_include_exists:\n  - stdlib.h\n  - sys\/mman.h\n  - alloca.h\n  - dlfcn.h\n  - inttypes.h\n  - memory.h\n  - stdint.h\n  - stdlib.h\n  - strings.h\n  - string.h\n  - sys\/mman.h\n  - sys\/stat.h\n  - sys\/types.h\n  - unistd.h\ncheck_type_size:\n  - double\n  - long\n  - size_t\ncheck_c_source_compiles:\n  STDC_HEADERS:\n    text: \"\\n#include <stdlib.h>\\n#include <stdarg.h>\\n#include <string.h>\\n#include <float.h>\\nint main() {return 0;}\\n\"\n    invert: false",
    "version": "3.2.1",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/libffi\/libffi",
            "tag": "v3.2.1"
        }
    },
    "sha256": "b9e722d41951cb0bd46b9297862a7c35665b7a3545c5c658124331cc14a556ed",
    "created": "2016-12-05 21:41:08.411781"
}

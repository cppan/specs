{
    "project": "pvt.cppan.demo.gnu.grep.gnulib.other",
    "cppan": "source:\n    remote: https:\/\/ftp.gnu.org\/gnu\/grep\/grep-{M}.{m}.tar.xz\n\nversion: 3.1.0\n\ntype: library\n\nstatic_only: true\n\nfiles:\n    -   lib\/.*\n\nexclude_from_package:\n    -   lib\/iconv.*\n\nexclude_from_build:\n    -   lib\/at-func.c\n    -   lib\/closedir.c\n    -   lib\/colorize-posix.c\n    -   lib\/fnmatch_loop.c\n    -   lib\/fts-cycle.c\n    -   lib\/iswblank.c\n    -   lib\/localeconv.c\n    -   lib\/lseek.c\n    -   lib\/mbsinit.c\n    -   lib\/memchr.c\n    -   lib\/opendir.*\n    -   lib\/readdir.c\n    -   lib\/regcomp.c\n    -   lib\/regex_internal.c\n    -   lib\/regexec.c\n    -   lib\/strerror-override.c\n    -   lib\/strtoimax.c\n    -   lib\/strtol.c\n    -   lib\/strtoll.c\n\ninclude_directories:\n    public:\n        -   lib\n\noptions:\n    any:\n        definitions:\n            private:\n                -   __USE_GNU\n\ndependencies:\n    public:\n        pvt.cppan.demo.gnu.gawk.getopt:\n            version: \"*\"\n        pvt.cppan.demo.tronkko.dirent:\n            version: master\n\npost_sources: |\n    replace_in_file_once(${SDIR}\/lib\/open.c \"return open (filename, flags, mode);\" \"return _open (filename, flags, mode);\")\n    file_write_once(${BDIR_PRIVATE}\/stdalign.h \"\")\n    file_write_once(${BDIR_PRIVATE}\/config.h \"\")\n    file_write_once(${BDIR_PRIVATE}\/unistd.h \"\")\n    file_write_once(${BDIR_PRIVATE}\/configmake.h \"\")\n    push_back_to_file_once(${BDIR_PRIVATE}\/config.h \"\n        #define mode_t int\n        #define nlink_t short\n    \n        #define STDIN_FILENO 0\n        #define STDOUT_FILENO 1\n        #define STDERR_FILENO 2\n    \n        #include <stdint.h>\n    \n        #ifdef _WIN32\n            #ifdef _WIN64\n            #define ssize_t long long\n            #else\n            #define ssize_t int\n            #endif\n    \n            #define __builtin_expect(cond, v) (cond)\n            #define lstat stat\n    \n    \n            #ifndef O_NDELAY\n            # define O_NDELAY 0\n            #endif\n    \n            #ifndef O_NOATIME\n            # define O_NOATIME 0\n            #endif\n    \n            #ifndef O_NONBLOCK\n            # define O_NONBLOCK O_NDELAY\n            #endif\n    \n            #ifndef O_NOCTTY\n            # define O_NOCTTY 0\n            #endif\n    \n            #ifndef O_NOFOLLOW\n            # define O_NOFOLLOW 0\n            #endif\n    \n            #ifndef O_CLOEXEC\n            #define O_CLOEXEC 0\n            #endif\n    \n            \/* Use the same bit pattern as Solaris 9, but with the proper\n               signedness.  The bit pattern is important, in case this actually is\n               Solaris with the above workaround.  *\/\n            #ifndef AT_FDCWD\n            # define AT_FDCWD (-3041965)\n            #endif\n    \n            \/* Use the same values as Solaris 9.  This shouldn't matter, but\n               there's no real reason to differ.  *\/\n            #ifndef AT_SYMLINK_NOFOLLOW\n            # define AT_SYMLINK_NOFOLLOW 4096\n            #endif\n        #endif\n    \n        #define PACKAGE_NAME \\\"${PACKAGE_NAME}\\\"\n        #define VERSION \\\"${PACKAGE_VERSION}\\\"\n    \n        #define FLEXIBLE_ARRAY_MEMBER\n    \n        \/* The __pure__ attribute was added in gcc 2.96.  *\/\n        #if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 96)\n        # define _GL_ATTRIBUTE_PURE __attribute__ ((__pure__))\n        #else\n        # define _GL_ATTRIBUTE_PURE \/* empty *\/\n        #endif\n    \n        #define HAVE_WORKING_O_NOFOLLOW 1\n    \n        #ifndef O_DIRECTORY\n        # define O_DIRECTORY        0200000\n        #endif\n    \n        #ifndef O_SEARCH\n        # define O_SEARCH        0\n        #endif\n    \n        #define GNULIB_MSVC_NOTHROW 1\n        #define HAVE_DECL_STRERROR_R 1\n    \n    \n        #define _GL_ATTRIBUTE_FORMAT_PRINTF(x,y)\n        #define _GL_ARG_NONNULL(x)\n    \n        #define PROMOTED_MODE_T int\n    \n        #define UNSIGNED 1\n    \n        #define _GL_INLINE inline\n        #define _GL_EXTERN_INLINE inline\n    \n        # define _GL_INLINE_HEADER_BEGIN\n        # define _GL_INLINE_HEADER_END\n    \n    \n        \/* The _Noreturn keyword of C11.  *\/\n        #if ! (defined _Noreturn \\\n               || (defined __STDC_VERSION__ && 201112 <= __STDC_VERSION__))\n        # if (3 <= __GNUC__ || (__GNUC__ == 2 && 8 <= __GNUC_MINOR__) \\\n              || 0x5110 <= __SUNPRO_C)\n        #  define _Noreturn __attribute__ ((__noreturn__))\n        # elif defined _MSC_VER && 1200 <= _MSC_VER\n        #  define _Noreturn __declspec (noreturn)\n        # else\n        #  define _Noreturn\n        # endif\n        #endif\n    \n        #define _GL_UNUSED\n        #define __getopt_argv_const const\n        #define _GL_ATTRIBUTE_CONST\n    \n        #define\tF_OK\t\t0\t\/* test for existence of file *\/\n        #define\tX_OK\t\t0x01\t\/* test for execute or search permission *\/\n        #define\tW_OK\t\t0x02\t\/* test for write permission *\/\n        #define\tR_OK\t\t0x04\t\/* test for read permission *\/\n    \n        \/* command values *\/\n        #define\tF_DUPFD\t\t0\t\t\/* duplicate file descriptor *\/\n        #define\tF_GETFD\t\t1\t\t\/* get file descriptor flags *\/\n        #define\tF_SETFD\t\t2\t\t\/* set file descriptor flags *\/\n        #define\tF_GETFL\t\t3\t\t\/* get file status flags *\/\n        #define\tF_SETFL\t\t4\t\t\/* set file status flags *\/\n        #ifndef _POSIX_SOURCE\n        #define\tF_GETOWN\t5\t\t\/* get SIGIO\/SIGURG proc\/pgrp *\/\n        #define F_SETOWN\t6\t\t\/* set SIGIO\/SIGURG proc\/pgrp *\/\n        #endif\n        #define\tF_GETLK\t\t7\t\t\/* get record locking information *\/\n        #define\tF_SETLK\t\t8\t\t\/* set record locking information *\/\n        #define\tF_SETLKW\t9\t\t\/* F_SETLK; wait if blocked *\/\n    \n        \/* file descriptor flags (F_GETFD, F_SETFD) *\/\n        #define\tFD_CLOEXEC\t1\t\t\/* close-on-exec flag *\/\n    \n        \/* record locking flags (F_GETLK, F_SETLK, F_SETLKW) *\/\n        #define\tF_RDLCK\t\t1\t\t\/* shared or read lock *\/\n        #define\tF_UNLCK\t\t2\t\t\/* unlock *\/\n        #define\tF_WRLCK\t\t3\t\t\/* exclusive or write lock *\/\n        #ifdef KERNEL\n        #define\tF_WAIT\t\t0x010\t\t\/* Wait until lock is granted *\/\n        #define\tF_FLOCK\t\t0x020\t \t\/* Use flock(2) semantics for lock *\/\n        #define\tF_POSIX\t\t0x040\t \t\/* Use POSIX semantics for lock *\/\n        #endif\n    \n        # define F_DUPFD_CLOEXEC 1030        \/* Duplicate file descriptor with\n                                           close-on-exit set.  *\/\n    \n        #define strcasecmp stricmp\n        #define strncasecmp strnicmp\n    \n        #ifndef S_TYPEISSEM\n        # ifdef S_INSEM\n        #  define S_TYPEISSEM(p) (S_ISNAM ((p)->st_mode) && (p)->st_rdev == S_INSEM)\n        # else\n        #  define S_TYPEISSEM(p) 0\n        # endif\n        #endif\n    \n        #ifndef S_TYPEISSHM\n        # ifdef S_INSHD\n        #  define S_TYPEISSHM(p) (S_ISNAM ((p)->st_mode) && (p)->st_rdev == S_INSHD)\n        # else\n        #  define S_TYPEISSHM(p) 0\n        # endif\n        #endif\n    \n        #ifndef S_TYPEISMQ\n        # define S_TYPEISMQ(p) 0\n        #endif\n    \n        #ifndef S_TYPEISTMO\n        # define S_TYPEISTMO(p) 0\n        #endif\n    \n        #ifdef DIR_FD_MEMBER_NAME\n        # define DIR_TO_FD(Dir_p) ((Dir_p)->DIR_FD_MEMBER_NAME)\n        #else\n        # define DIR_TO_FD(Dir_p) -1\n        #endif\n    \n        #define _GL_EXTERN_C extern\n    \n        #define _GL_FUNCDECL_SYS(func,rettype,parameters_and_attributes) \\\n           _GL_EXTERN_C rettype func parameters_and_attributes\n    \n        # define _GL_CXXALIAS_SYS(func,rettype,parameters) \\\n            _GL_EXTERN_C int _gl_cxxalias_dummy\n    \n        #define HAVE_DECL_STRTOULL 1\n    \n    \")\n    \n    \n    set(GUARD_PREFIX _CPPAN_GNULIB)\n    set(INCLUDE_NEXT include)\n    \n    #set(HAVE_DIRENT_H 1)\n    \n    set(GNULIB_OPENDIR 0)\n    set(GNULIB_READDIR 0)\n    set(GNULIB_REWINDDIR 0)\n    set(GNULIB_CLOSEDIR 0)\n    set(GNULIB_DIRFD 0)\n    set(GNULIB_FDOPENDIR 0)\n    set(GNULIB_SCANDIR 0)\n    set(GNULIB_ALPHASORT 0)\n    \n    if (WIN32)\n        set(NEXT_DIRENT_H \"\\\"dirent-private.h\\\"\")\n    endif()\n    \n    #set(HAVE_GETOPT_H 1)\n    \n    file_write_once(${BDIR_PRIVATE}\/alloca.h \"\")\n    \n    #configure_file(${SDIR}\/lib\/getopt.in.h ${BDIR}\/getopt.h)\n    configure_file(${SDIR}\/lib\/fnmatch.in.h ${BDIR}\/fnmatch.h)\n    #configure_file(${SDIR}\/lib\/dirent.in.h ${BDIR}\/dirent.h)\n    configure_file(${SDIR}\/lib\/unistr.in.h ${BDIR}\/unistr.h)\n    configure_file(${SDIR}\/lib\/uniwidth.in.h ${BDIR}\/uniwidth.h)\n    configure_file(${SDIR}\/lib\/unitypes.in.h ${BDIR}\/unitypes.h)\n    \n    set(HAVE_LANGINFO_H 0)\n    set(HAVE_LANGINFO_CODESET 0)\n    set(HAVE_LANGINFO_T_FMT_AMPM 0)\n    set(HAVE_LANGINFO_ERA 0)\n    set(HAVE_LANGINFO_YESEXPR 0)\n    set(GNULIB_NL_LANGINFO 1)\n    set(REPLACE_NL_LANGINFO 0)\n    configure_file(${SDIR}\/lib\/langinfo.in.h ${BDIR}\/langinfo.h)\n    \n    replace_in_file_once(${SDIR}\/lib\/getprogname.c \"# else\" \"#elif _WIN32\\nreturn __argv[0];\\n# else\\n\")\n\ncheck_function_exists:\n    -   lstat\n    -   strerror_r\n\ncheck_type_size:\n    -   type: long long int\n    -   type: unsigned long long int\n\n",
    "source": {
        "remote": {
            "url": "https:\/\/ftp.gnu.org\/gnu\/grep\/grep-{M}.{m}.tar.xz"
        }
    },
    "version": "3.1.0",
    "hash": "1cd723d19fe4c27a9e5cff6a8a207d306f610b54fa4b8b23563bd147f0a35eb6",
    "created": "2018-08-02 17:33:54.070079"
}

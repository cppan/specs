{
    "project": "pvt.cppan.demo.gnu.iconv.libiconv",
    "cppan": "source:\n    remote: http:\/\/ftp.gnu.org\/pub\/gnu\/libiconv\/libiconv-1.14.tar.gz\n\nversion: 1.14.0\n\nfiles:\n    -   include\/iconv.h.build.in\n    -   lib\/.*\\.def\n    -   lib\/.*\\.gperf\n    -   lib\/.*\\.h\n    -   lib\/iconv.c\n\noptions:\n    any:\n        definitions:\n            public:\n                -   ICONV_CONST=const\n\ndependencies:\n    public:\n        pvt.cppan.demo.gnu.iconv.libcharset:\n            version: \"*\"\n\npost_sources: |\n    set(HAVE_VISIBILITY 0)\n    \n    set(USE_MBSTATE_T ${HAVE_MBSTATE_T})\n    set(BROKEN_WCHAR_H 0)\n    \n    if (HAVE_LANGINFO_H AND HAVE_NL_LANGINFO)\n        add_definitions(-DHAVE_LANGINFO_CODESET=1)\n    endif()\n    \n    # one as define and one here\n    set(ICONV_CONST const)\n    \n    replace_in_file_once(${SDIR}\/include\/iconv.h.build.in \"#define LIBICONV_DLL_EXPORTED\" \"#define LIBICONV_DLL_EXPORTED ${LIBRARY_API}\")\n    \n    configure_file(${SDIR}\/include\/iconv.h.build.in ${BDIR}\/iconv.h)\n    \n    file_write_once(${BDIR}\/config.h \"\n    #define ENABLE_NLS 1\n    #define WORDS_LITTLEENDIAN ( ! ( WORDS_BIGENDIAN ) )\n    \n    \/* The _Noreturn keyword of draft C1X.  *\/\n    #ifndef _Noreturn\n    # if (3 <= __GNUC__ || (__GNUC__ == 2 && 8 <= __GNUC_MINOR__) \\\n          || 0x5110 <= __SUNPRO_C)\n    #  define _Noreturn __attribute__ ((__noreturn__))\n    # elif 1200 <= _MSC_VER\n    #  define _Noreturn __declspec (noreturn)\n    # else\n    #  define _Noreturn\n    # endif\n    #endif\n    \n    \n    \n    \/* Define to the equivalent of the C99 'restrict' keyword, or to\n       nothing if this is not supported.  Do not define if restrict is\n       supported directly.  *\/\n    #define restrict __restrict\n    \/* Work around a bug in Sun C++: it does not support _Restrict or\n       __restrict__, even though the corresponding Sun C compiler ends up with\n       \\\"#define restrict _Restrict\\\" or \\\"#define restrict __restrict__\\\" in the\n       previous line.  Perhaps some future version of Sun C++ will work with\n       restrict; if so, hopefully it defines __RESTRICT like Sun C does.  *\/\n    #if defined __SUNPRO_CC && !defined __RESTRICT\n    # define _Restrict\n    # define __restrict__\n    #endif\n    \n    \/* Define as a marker that can be attached to declarations that might not\n        be used.  This helps to reduce warnings, such as from\n        GCC -Wunused-parameter.  *\/\n    #if __GNUC__ >= 3 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 7)\n    # define _GL_UNUSED __attribute__ ((__unused__))\n    #else\n    # define _GL_UNUSED\n    #endif\n    \/* The name _UNUSED_PARAMETER_ is an earlier spelling, although the name\n       is a misnomer outside of parameter lists.  *\/\n    #define _UNUSED_PARAMETER_ _GL_UNUSED\n    \n    \/* The __pure__ attribute was added in gcc 2.96.  *\/\n    #if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 96)\n    # define _GL_ATTRIBUTE_PURE __attribute__ ((__pure__))\n    #else\n    # define _GL_ATTRIBUTE_PURE \/* empty *\/\n    #endif\n    \n    \/* The __const__ attribute was added in gcc 2.95.  *\/\n    #if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)\n    # define _GL_ATTRIBUTE_CONST __attribute__ ((__const__))\n    #else\n    # define _GL_ATTRIBUTE_CONST \/* empty *\/\n    #endif\n    \n    \n    \n    \/* On Windows, variables that may be in a DLL must be marked specially.  *\/\n    \/\/#if defined _MSC_VER && defined _DLL\n    \/\/# define DLL_VARIABLE __declspec (dllimport)\n    \/\/#else\n    \/\/# define DLL_VARIABLE\n    \/\/#endif\n    \n    \")\n\ncheck_function_exists:\n    -   alloca\n    -   atoll\n    -   canonicalize_file_name\n    -   CFLocaleCopyCurrent\n    -   CFPreferencesCopyAppValue\n    -   dcgettext\n    -   getcwd\n    -   getc_unlocked\n    -   lstat\n    -   mbrtowc\n    -   mbsinit\n    -   memmove\n    -   nl_langinfo\n    -   readlink\n    -   readlinkat\n    -   realpath\n    -   setenv\n    -   setlocale\n    -   strerror_r\n    -   tsearch\n    -   wcrtomb\n    -   _NSGetExecutablePath\n\ncheck_include_exists:\n    -   file: alloca.h\n        variable: HAVE_ALLOCA_H\n        cpp: false\n    -   file: dlfcn.h\n        variable: HAVE_DLFCN_H\n        cpp: false\n    -   file: inttypes.h\n        variable: HAVE_INTTYPES_H\n        cpp: false\n    -   file: langinfo.h\n        variable: HAVE_LANGINFO_H\n        cpp: false\n    -   file: mach-o\/dyld.h\n        variable: HAVE_MACH_O_DYLD_H\n        cpp: false\n    -   file: memory.h\n        variable: HAVE_MEMORY_H\n        cpp: false\n    -   file: search.h\n        variable: HAVE_SEARCH_H\n        cpp: false\n    -   file: stdint.h\n        variable: HAVE_STDINT_H\n        cpp: false\n    -   file: stdlib.h\n        variable: HAVE_STDLIB_H\n        cpp: false\n    -   file: strings.h\n        variable: HAVE_STRINGS_H\n        cpp: false\n    -   file: string.h\n        variable: HAVE_STRING_H\n        cpp: false\n    -   file: sys\/bitypes.h\n        variable: HAVE_SYS_BITYPES_H\n        cpp: false\n    -   file: sys\/inttypes.h\n        variable: HAVE_SYS_INTTYPES_H\n        cpp: false\n    -   file: sys\/stat.h\n        variable: HAVE_SYS_STAT_H\n        cpp: false\n    -   file: sys\/time.h\n        variable: HAVE_SYS_TIME_H\n        cpp: false\n    -   file: sys\/types.h\n        variable: HAVE_SYS_TYPES_H\n        cpp: false\n    -   file: unistd.h\n        variable: HAVE_UNISTD_H\n        cpp: false\n    -   file: wchar.h\n        variable: HAVE_WCHAR_H\n        cpp: false\n\ncheck_type_size:\n    -   type: long long int\n    -   type: sigset_t\n    -   type: unsigned long long int\n    -   type: wchar_t\n    -   type: _Bool\n\ncheck_symbol_exists:\n    -   symbol: mbstate_t\n        headers:\n            -   wchar_t.h\n\n",
    "source": {
        "remote": {
            "url": "http:\/\/ftp.gnu.org\/pub\/gnu\/libiconv\/libiconv-1.14.tar.gz"
        }
    },
    "version": "1.14.0",
    "sha256": "a0d0cf5673354b0cbf574b6d0fe93cc7ddaf70c0e60e95649268b0cec66c2008",
    "created": "2017-01-07 23:47:33.387143"
}

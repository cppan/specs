{
    "project": "pvt.cppan.demo.gnu.gmp.lib",
    "cppan": "source:\n    remote: https:\/\/gmplib.org\/download\/gmp\/gmp-6.1.2.tar.lz\n\nversion: 6.1.2\n\ntype: library\n\nfiles:\n    -   .*\\.h\n    -   assert.c\n    -   bootstrap.c\n    -   errno.c\n    -   extract-dbl.c\n    -   gen-.*.c\n    -   gmp-h.in\n    -   invalid.c\n    -   memory.c\n    -   mini-gmp\/mini-gmp.*\n    -   mp_.*\n    -   mpf\/.*\n    -   mpn\/.*\n    -   mpq\/.*\n    -   mpz\/.*\n    -   nextprime.c\n    -   primesieve.c\n    -   printf\/.*\n    -   rand\/.*\n    -   scanf\/.*\n    -   tal-reent.c\n    -   version.c\n\nexclude_from_build:\n    -   bootstrap.c\n    -   gen-*.c\n    -   mini-gmp\/mini-gmp.*\n    -   mpn\/.*\n\noptions:\n    any:\n        definitions:\n            private:\n                -   OPERATION_and_n\n                -   OPERATION_sec_add_1\n                -   OPERATION_sec_div_r\n                -   OPERATION_sec_pi1_div_r\n                -   VERSION=\"${PACKAGE_VERSION}\"\n                -   __GMP_WITHIN_GMP\n            public:\n                -   WANT_FAKE_CPUID\n                -   WANT_FAT_BINARY\n                -   WANT_TMP_ALLOCA\n                -   WANT_TMP_REENTRANT\n\npost_sources: |\n    set(LIBGMP_DLL 0)\n    if (\"${LIBRARY_TYPE}\" STREQUAL \"SHARED\")\n        set(LIBGMP_DLL 1)\n    endif()\n    \n    set(HAVE_HOST_CPU_FAMILY_power 0)\n    set(HAVE_HOST_CPU_FAMILY_powerpc 0)\n    \n    math(EXPR BITS \"${CMAKE_SIZEOF_VOID_P} * 8\")\n    set(GMP_LIMB_BITS ${BITS})\n    set(GMP_NAIL_BITS 0)\n    \n    file_write_once(${BDIR}\/config.h \"\")\n    file_write_once(${BDIR}\/fat.h \"\")\n    configure_file(${SDIR}\/gmp-h.in ${BDIR}\/gmp.h)\n    \n    replace_in_file_once(${SDIR}\/gmp-impl.h \"struct cpuvec_t {\" \"\n        #pragma push_macro(\\\"__GMP_DECLSPEC\\\")\n        #undef __GMP_DECLSPEC\n        #define __GMP_DECLSPEC\n        struct cpuvec_t {\n    \")\n    replace_in_file_once(${SDIR}\/gmp-impl.h \"__GMP_DECLSPEC extern struct cpuvec_t __gmpn_cpuvec;\" \"\n        #pragma pop_macro(\\\"__GMP_DECLSPEC\\\")\n        __GMP_DECLSPEC extern struct cpuvec_t __gmpn_cpuvec;\n    \")\n    \n    #\n    add_executable(gen-fib ${SDIR}\/gen-fib.c)\n    add_executable(gen-fac ${SDIR}\/gen-fac.c)\n    add_executable(gen-bases ${SDIR}\/gen-bases.c)\n    add_executable(gen-trialdivtab ${SDIR}\/gen-trialdivtab.c)\n    add_executable(gen-jacobitab ${SDIR}\/gen-jacobitab.c)\n    add_executable(gen-psqr ${SDIR}\/gen-psqr.c)\n    \n    #\n    add_custom_command(OUTPUT ${BDIR}\/fib_table.h ${BDIR}\/fib_table.c\n        COMMAND gen-fib header ${GMP_LIMB_BITS} ${GMP_NAIL_BITS} > ${BDIR}\/fib_table.h\n        COMMAND gen-fib table ${GMP_LIMB_BITS} ${GMP_NAIL_BITS} > ${BDIR}\/fib_table.c\n    )\n    set(src ${src} ${BDIR}\/fib_table.h ${BDIR}\/fib_table.c)\n    \n    #\n    add_custom_command(OUTPUT ${BDIR}\/fac_table.h\n        COMMAND gen-fac ${GMP_LIMB_BITS} ${GMP_NAIL_BITS} > ${BDIR}\/fac_table.h\n    )\n    set(src ${src} ${BDIR}\/fac_table.h)\n    \n    #\n    add_custom_command(OUTPUT ${BDIR}\/mp_bases.h ${BDIR}\/mp_bases.c\n        COMMAND gen-bases header ${GMP_LIMB_BITS} ${GMP_NAIL_BITS} > ${BDIR}\/mp_bases.h\n        COMMAND gen-bases table ${GMP_LIMB_BITS} ${GMP_NAIL_BITS} > ${BDIR}\/mp_bases.c\n    )\n    set(src ${src} ${BDIR}\/mp_bases.h ${BDIR}\/mp_bases.c)\n    \n    #\n    add_custom_command(OUTPUT ${BDIR}\/trialdivtab.h\n        COMMAND gen-trialdivtab ${GMP_LIMB_BITS} 8000 > ${BDIR}\/trialdivtab.h\n    )\n    set(src ${src} ${BDIR}\/trialdivtab.h)\n    \n    #\n    add_custom_command(OUTPUT ${BDIR}\/jacobitab.h\n        COMMAND gen-jacobitab > ${BDIR}\/jacobitab.h\n    )\n    set(src ${src} ${BDIR}\/jacobitab.h)\n    \n    #\n    add_custom_command(OUTPUT ${BDIR}\/perfsqr.h\n        COMMAND gen-psqr ${GMP_LIMB_BITS} ${GMP_NAIL_BITS} > ${BDIR}\/perfsqr.h\n    )\n    set(src ${src} ${BDIR}\/perfsqr.h)\n    \n    # fat\n    file(GLOB fat \"${SDIR}\/mpn\/generic\/*\")\n    set(src ${src} ${fat})\n    \n    # rm\n    remove_src_dir(*udiv_w_sdiv.c)\n    remove_src(mpn\/generic\/add_1.c)\n    remove_src(mpn\/generic\/sub_1.c)\n    remove_src(mpn\/generic\/zero_p.c)\n    \n    remove_src(mpn\/generic\/add.c)\n    remove_src(mpn\/generic\/sub.c)\n    remove_src(mpn\/generic\/neg.c)\n    remove_src(mpn\/generic\/cmp.c)\n    \n    remove_src(mpz\/get_ui.c)\n    remove_src(mpz\/neg.c)\n    \n    #\n    add_custom_command(OUTPUT ${BDIR}\/popham.c\n        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SDIR}\/mpn\/generic\/popham.c ${BDIR}\/popham.c\n    )\n    set(src ${src} ${BDIR}\/popham.c)\n    set_source_files_properties(${SDIR}\/mpn\/generic\/popham.c PROPERTIES COMPILE_DEFINITIONS \"OPERATION_popcount\")\n    set_source_files_properties(${BDIR}\/popham.c PROPERTIES COMPILE_DEFINITIONS \"OPERATION_hamdist\")\n    \n    # asm\n    #if (MSVC)\n        #enable_language(ASM_MASM)\n    #endif()\n    \n    #if (\"${CMAKE_SIZEOF_VOID_P}\" EQUAL \"4\")\n        #file(GLOB asm \"${SDIR}\/mpn\/x86\/*.asm\")\n    #else()\n        #file(GLOB asm \"${SDIR}\/mpn\/x86_64\/*.asm\")\n    #endif()\n    #set(src ${src} ${asm})\n\npost_target: |\n    if (\"${CMAKE_SIZEOF_VOID_P}\" EQUAL \"4\")\n        target_include_directories(${this} PUBLIC ${SDIR}\/mpn\/x86)\n        target_compile_definitions(${this} PRIVATE HAVE_HOST_CPU_FAMILY_x86)\n        target_compile_definitions(${this} PRIVATE SIZEOF_MP_LIMB_T=4)\n    else()\n        target_include_directories(${this} PUBLIC ${SDIR}\/mpn\/x86_64)\n        target_compile_definitions(${this} PRIVATE HAVE_HOST_CPU_FAMILY_x86_64)\n        target_compile_definitions(${this} PRIVATE SIZEOF_MP_LIMB_T=8)\n    endif()\n\ncheck_function_exists:\n    -   alarm\n    -   attr_get\n    -   clock\n    -   cputime\n    -   getpagesize\n    -   getrusage\n    -   getsysinfo\n    -   gettimeofday\n    -   localeconv\n    -   memset\n    -   mmap\n    -   mprotect\n    -   nl_langinfo\n    -   obstack_vprintf\n    -   popen\n    -   processor_info\n    -   pstat_getprocessor\n    -   raise\n    -   read_real_time\n    -   sigaction\n    -   sigaltstack\n    -   sigstack\n    -   strchr\n    -   strerror\n    -   strnlen\n    -   strtol\n    -   strtoul\n    -   sysconf\n    -   sysctl\n    -   sysctlbyname\n    -   syssgi\n    -   times\n\ncheck_include_exists:\n    -   file: fcntl.h\n        variable: HAVE_FCNTL_H\n        cpp: false\n    -   file: float.h\n        variable: HAVE_FLOAT_H\n        cpp: false\n    -   file: invent.h\n        variable: HAVE_INVENT_H\n        cpp: false\n    -   file: langinfo.h\n        variable: HAVE_LANGINFO_H\n        cpp: false\n    -   file: locale.h\n        variable: HAVE_LOCALE_H\n        cpp: false\n    -   file: machine\/hal_sysinfo.h\n        variable: HAVE_MACHINE_HAL_SYSINFO_H\n        cpp: false\n    -   file: nl_types.h\n        variable: HAVE_NL_TYPES_H\n        cpp: false\n    -   file: readline\/history.h\n        variable: HAVE_READLINE_HISTORY_H\n        cpp: false\n    -   file: readline\/readline.h\n        variable: HAVE_READLINE_READLINE_H\n        cpp: false\n    -   file: sstream\n        variable: HAVE_SSTREAM\n        cpp: false\n    -   file: sys\/attributes.h\n        variable: HAVE_SYS_ATTRIBUTES_H\n        cpp: false\n    -   file: sys\/iograph.h\n        variable: HAVE_SYS_IOGRAPH_H\n        cpp: false\n    -   file: sys\/mman.h\n        variable: HAVE_SYS_MMAN_H\n        cpp: false\n    -   file: sys\/param.h\n        variable: HAVE_SYS_PARAM_H\n        cpp: false\n    -   file: sys\/processor.h\n        variable: HAVE_SYS_PROCESSOR_H\n        cpp: false\n    -   file: sys\/pstat.h\n        variable: HAVE_SYS_PSTAT_H\n        cpp: false\n    -   file: sys\/resource.h\n        variable: HAVE_SYS_RESOURCE_H\n        cpp: false\n    -   file: sys\/sysctl.h\n        variable: HAVE_SYS_SYSCTL_H\n        cpp: false\n    -   file: sys\/sysinfo.h\n        variable: HAVE_SYS_SYSINFO_H\n        cpp: false\n    -   file: sys\/syssgi.h\n        variable: HAVE_SYS_SYSSGI_H\n        cpp: false\n    -   file: sys\/systemcfg.h\n        variable: HAVE_SYS_SYSTEMCFG_H\n        cpp: false\n    -   file: sys\/times.h\n        variable: HAVE_SYS_TIMES_H\n        cpp: false\n    -   file: sys\/time.h\n        variable: HAVE_SYS_TIME_H\n        cpp: false\n    -   file: time.h\n        variable: HAVE_TIME_H\n        cpp: false\n\ncheck_type_size:\n    -   type: double\n    -   type: intmax_t\n    -   type: intptr_t\n    -   type: long\n    -   type: mp_limb_t\n    -   type: ptrdiff_t\n    -   type: quad_t\n    -   type: short\n    -   type: signal\n    -   type: stack_t\n    -   type: std::locale\n    -   type: uint_least32_t\n    -   type: unsigned\n    -   type: unsigned long\n\ncheck_library_exists:\n    -   m\n\ncheck_library_function:\n    -   function: readline\n        library: readline\n    -   function: tputs\n        library: ncurses\n\ncheck_struct_member:\n    -   member: psp_iticksperclktick\n        struct: struct pst_processor\n\ncheck_c_source_compiles:\n    HAVE_TIME_WITH_SYS_TIME:\n        text: \"\\n#include <time.h>\\n#include <sys\/time.h>\\nint main() {return 0;}\\n\"\n        invert: false\n\ncheck_decl_exists:\n    -   decl: decl\n        headers:\n            -   fgetc\n    -   decl: decl\n        headers:\n            -   fscanf\n    -   decl: decl\n        headers:\n            -   optarg\n    -   decl: decl\n        headers:\n            -   sys_errlist\n    -   decl: decl\n        headers:\n            -   sys_nerr\n    -   decl: decl\n        headers:\n            -   ungetc\n    -   decl: decl\n        headers:\n            -   vfprintf\n\n",
    "source": {
        "remote": {
            "url": "https:\/\/gmplib.org\/download\/gmp\/gmp-6.1.2.tar.lz"
        }
    },
    "version": "6.1.2",
    "hash": "13fd64206f51db79a5f2d480fcb3ae51081c86c6f5ba86ea402a54198abad8f1",
    "created": "2017-12-26 13:43:55.67303"
}

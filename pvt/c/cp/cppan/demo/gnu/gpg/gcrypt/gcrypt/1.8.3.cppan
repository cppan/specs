{
    "project": "pvt.cppan.demo.gnu.gpg.gcrypt.gcrypt",
    "cppan": "source:\n    git: git:\/\/git.gnupg.org\/libgcrypt.git\n    tag: libgcrypt-{v}\n\nversion: 1.8.3\n\ntype: library\n\nfiles:\n    -   cipher\/.*\\.[hc]\n    -   compat\/.*\\.[hc]\n    -   mpi\/[^\/]*\\.[hc]\n    -   mpi\/generic\/.*\n    -   random\/.*\\.[hc]\n    -   src\/.*\\.[hc]\n    -   src\/.*\\.def\n    -   src\/.*\\.in\n\nexclude_from_build:\n    -   .*arm.*\n    -   cipher\/gost-s-box.c\n    -   cipher\/test.*\n    -   random\/jitterentropy-base.c\n    -   random\/random-daemon.c\n    -   random\/rndegd.c\n    -   random\/rndlinux.c\n    -   random\/rndunix.c\n    -   random\/rndw32ce.c\n    -   src\/dumpsexp.c\n    -   src\/gcryptrnd.c\n    -   src\/getrandom.c\n    -   src\/mpicalc.c\n\ninclude_directories:\n    private:\n        -   src\n        -   mpi\/generic\n        -   mpi\n\noptions:\n    any:\n        definitions:\n            private:\n                -   BUILD_REVISION=\"\"\n                -   BUILD_TIMESTAMP=\"\"\n                -   HAVE_CONFIG_H\n                -   HAVE_DOSISH_SYSTEM\n                -   HAVE_W32CE_SYSTEM\n                -   LIBGCRYPT_CIPHERS=\"IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256\"\n                -   LIBGCRYPT_DIGESTS=\"SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\"\n                -   LIBGCRYPT_PUBKEY_CIPHERS=\"RSA, ELG, DSA, ECDH, ECDSA, EDDSA\"\n                -   VERSION=\"${PACKAGE_VERSION}\"\n                -   _GCRYPT_IN_LIBGCRYPT\n\ndependencies:\n    public:\n        pvt.cppan.demo.gnu.gpg.error.gpg_error:\n            version: 1\n        pvt.cppan.demo.gnu.gpg.gcrypt.tools.gost_s_box:\n            version: \"*\"\n            reference: gost_s_box\n\npost_sources: |\n    set(VERSION ${PACKAGE_VERSION})\n    set(VERSION_NUMBER ${PACKAGE_VERSION_MAJOR})\n    \n    replace_in_file_once(${SDIR}\/cipher\/cipher-ccm.c \"unsigned char tmp[blocksize];\" \"unsigned char tmp[16];\")\n    replace_in_file_once(${SDIR}\/cipher\/stribog.c \"u64 Z[8] = {};\" \"u64 Z[8] = {0};\")\n    replace_in_file_once(${SDIR}\/cipher\/cipher-poly1305.c \"static const byte zero_padding_buf[15] = {};\" \"static const byte zero_padding_buf[15] = {0};\")\n    \n    replace_in_file_once(${SDIR}\/compat\/clock.c \"#warning Replace by a correct implementation.\" \"\")\n    replace_in_file_once(${SDIR}\/compat\/getpid.c \"pid_t\" \"int\")\n    \n    replace_in_file_once(${SDIR}\/src\/hwf-x86.c\n        \"#if !defined (__i386__) && !defined (__x86_64__)\"\n        \"#if !defined (__i386__) && !defined (__x86_64__ ) && !defined(_M_IX86) && !defined(_M_AMD64)\"\n    )\n    replace_in_file_once(${SDIR}\/src\/hwf-x86.c\n        \"#if defined (__i386__) && SIZEOF_UNSIGNED_LONG == 4 && defined (__GNUC__)\"\n        \"#if (defined (__i386__) || defined(_M_IX86)) && SIZEOF_UNSIGNED_LONG == 4\"\n    )\n    replace_in_file_once(${SDIR}\/src\/hwf-x86.c\n        \"#if defined (__x86_64__) && defined (__GNUC__)\"\n        \"#if (defined (__x86_64__) || defined(_M_AMD64))\"\n    )\n    replace_in_file_once(${SDIR}\/src\/hwf-x86.c\n        \"asm volatile\"\n        \"#if defined (__GNUC__)\\n    asm  volatile\"\n    )\n    replace_in_file_once(${SDIR}\/src\/hwf-x86.c\n        \"    );\"\n        \" \/**\/);\\n#else\\n#endif\"\n    )\n    replace_in_file_once(${SDIR}\/src\/hwf-x86.c\n        \"int has_cpuid = 0;\"\n        \"int has_cpuid = 1;\"\n    )\n    replace_in_file_once(${SDIR}\/src\/hwf-x86.c\n        \"if (eax)\"\n        \"\n        #ifdef _WIN32\n        __cpuidex(regs, in, 0);\n        #endif\n        \\nif   (eax)\n        \"\n    )\n    \n    add_custom_command(OUTPUT ${BDIR}\/gost-sb.h\n        COMMAND ${gost_s_box} ${BDIR}\/gost-sb.h\n    )\n    set(src ${src} ${BDIR}\/gost-sb.h)\n    \n    configure_file(${SDIR}\/src\/gcrypt.h.in ${BDIR}\/gcrypt.h)\n    configure_file(${SDIR}\/mpi\/generic\/mpi-asm-defs.h ${SDIR}\/mpi\/mpi-asm-defs.h)\n    set(src ${src} ${BDIR}\/gcrypt.h)\n    file_write_once(${BDIR_PRIVATE}\/config.h \"\n        #define _GCRYPT_CONFIG_H_INCLUDED\n    \n        #ifdef _WIN32\n            #ifdef _WIN64\n            #define ssize_t long long\n            #else\n            #define ssize_t int\n            #endif\n    \n            #if !defined S_ISDIR && defined S_IFDIR\n            # define S_ISDIR(mode) (((mode) & S_IFMT) == S_IFDIR)\n            #endif\n            #if !S_IRUSR && S_IREAD\n            # define S_IRUSR S_IREAD\n            #endif\n            #if !S_IRUSR\n            # define S_IRUSR 00400\n            #endif\n            #if !S_IWUSR && S_IWRITE\n            # define S_IWUSR S_IWRITE\n            #endif\n            #if !S_IWUSR\n            # define S_IWUSR 00200\n            #endif\n            #if !S_IXUSR && S_IEXEC\n            # define S_IXUSR S_IEXEC\n            #endif\n            #if !S_IXUSR\n            # define S_IXUSR 00100\n            #endif\n    \n            #define S_IFREG    0100000\n    \n            #define _S_IRWXU  S_IRUSR | S_IWUSR | S_IXUSR\n    \n            #if ! defined(S_ISREG) && defined(S_IFREG)\n            #define\tS_ISREG(m) (((m) & S_IFMT) == S_IFREG)\n            #endif\n    \n            #define\tF_OK\t\t0\t\/* test for existence of file *\/\n            #define\tX_OK\t\t0x01\t\/* test for execute or search permission *\/\n            #define\tW_OK\t\t0x02\t\/* test for write permission *\/\n            #define\tR_OK\t\t0x04\t\/* test for read permission *\/\n        #endif\n    \n    \")\n    file_write_once(${BDIR_PRIVATE}\/unistd.h \"\")\n    file_write_once(${BDIR_PRIVATE}\/sys\/time.h \"\")\n    \n    file_write_once(${BDIR_PRIVATE}\/mod-source-info.h \"\n        \/* Host: generic *\/\n        static char mod_source_info[] =\n          \\\":generic\/mpih-add1.c\\\"\n          \\\":generic\/mpih-sub1.c\\\"\n          \\\":generic\/mpih-mul1.c\\\"\n          \\\":generic\/mpih-mul2.c\\\"\n          \\\":generic\/mpih-mul3.c\\\"\n          \\\":generic\/mpih-lshift.c\\\"\n          \\\":generic\/mpih-rshift.c\\\"\n          ;\n    \")\n\ncheck_function_exists:\n    -   atexit\n    -   clock_gettime\n    -   fcntl\n    -   flockfile\n    -   ftruncate\n    -   gethrtime\n    -   getpagesize\n    -   getrusage\n    -   gettimeofday\n    -   memmove\n    -   mmap\n    -   raise\n    -   rand\n    -   stpcpy\n    -   strcasecmp\n    -   strerror\n    -   stricmp\n    -   strtoul\n    -   syscall\n    -   sysconf\n    -   syslog\n    -   vprintf\n    -   wait4\n    -   waitpid\n\ncheck_include_exists:\n    -   file: stdlib.h\n        variable: HAVE_STDLIB_H\n        cpp: false\n    -   file: sys\/capability.h\n        variable: HAVE_SYS_CAPABILITY_H\n        cpp: false\n    -   file: sys\/msg.h\n        variable: HAVE_SYS_MSG_H\n        cpp: false\n    -   file: sys\/select.h\n        variable: HAVE_SYS_SELECT_H\n        cpp: false\n    -   file: unistd.h\n        variable: HAVE_UNISTD_H\n        cpp: false\n\ncheck_type_size:\n    -   type: int\n    -   type: long\n    -   type: short\n    -   type: uint64_t\n    -   type: uintptr_t\n    -   type: unsigned\n    -   type: unsigned long\n    -   type: unsigned long long\n\ncheck_library_function:\n    -   function: cap_init\n        library: cap\n    -   function: pthread_create\n        library: pthread\n\ncheck_c_source_compiles:\n    STDC_HEADERS:\n        text: \"\\n#include <stdlib.h>\\n#include <stdarg.h>\\n#include <string.h>\\n#include <float.h>\\nint main() {return 0;}\\n\"\n        invert: false\n\n",
    "source": {
        "git": {
            "url": "git:\/\/git.gnupg.org\/libgcrypt.git",
            "tag": "libgcrypt-{v}"
        }
    },
    "version": "1.8.3",
    "hash": "8bb55d4b8a166fb787a8deca017d0561e6df3ffd0672fcfcbcc0265292b75f26",
    "created": "2018-08-03 01:09:56.725285"
}

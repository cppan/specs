{
    "project": "pvt.cppan.demo.gnu.gpg.error.gpg_error",
    "version": "1.32.0",
    "cppan": "source:\n    git: git:\/\/git.gnupg.org\/libgpg-error.git\n    tag: libgpg-error-{M}.{m}\n\nversion: 1.32.0\n\ntype: library\n\nstatic_only: true\n\nexclude_from_build:\n    -   src\/.*iconv.*\n    -   src\/.*posix.*\n    -   src\/gen-.*\n    -   src\/gpg-error.c\n    -   src\/mk.*\n\noptions:\n    any:\n        definitions:\n            private:\n                -   BUILD_REVISION=\"\"\n                -   BUILD_TIMESTAMP=\"\"\n                -   HAVE_CONFIG_H\n                -   MKDIR_TAKES_ONE_ARG\n                -   PKGDATADIR=\"\"\n                -   _GCRYPT_IN_LIBGCRYPT\n            public:\n                -   GPGRT_ENABLE_ARGPARSE_MACROS\n                -   GPGRT_ENABLE_ES_MACROS\n                -   GPGRT_HAVE_MACRO_FUNCTION\n            win32:\n                public:\n                    -   HAVE_DOSISH_SYSTEM\n                    -   HAVE_W32_SYSTEM\n                    -   _CRT_DECLARE_NONSTDC_NAMES\n\ndependencies:\n    public:\n        pvt.cppan.demo.gnu.gawk.gawk:\n            version: \"*\"\n            reference: awk_command\n        pvt.cppan.demo.gnu.gpg.error.tools.mkheader:\n            version: \"*\"\n            reference: mkheader\n        pvt.cppan.demo.gnu.gpg.error.tools.mkerrcodes:\n            version: \"*\"\n            reference: mkerrcodes\n\npost_sources: |\n    file_write_once(${BDIR_PRIVATE}\/sys\/file.h \"\")\n    file_write_once(${BDIR_PRIVATE}\/config.h \"\n        #ifdef _WIN32\n    \n            #include <wchar.h>\n    \n            #ifdef _WIN64\n            #define ssize_t long long\n            #else\n            #define ssize_t int\n            #endif\n    \n            #if !defined S_ISDIR && defined S_IFDIR\n            # define S_ISDIR(mode) (((mode) & S_IFMT) == S_IFDIR)\n            #endif\n            #if !S_IRUSR && S_IREAD\n            # define S_IRUSR S_IREAD\n            #endif\n            #if !S_IRUSR\n            # define S_IRUSR 00400\n            #endif\n            #if !S_IWUSR && S_IWRITE\n            # define S_IWUSR S_IWRITE\n            #endif\n            #if !S_IWUSR\n            # define S_IWUSR 00200\n            #endif\n            #if !S_IXUSR && S_IEXEC\n            # define S_IXUSR S_IEXEC\n            #endif\n            #if !S_IXUSR\n            # define S_IXUSR 00100\n            #endif\n    \n            #define _S_IRWXU  S_IRUSR | S_IWUSR | S_IXUSR\n    \n            #define\tF_OK\t\t0\t\/* test for existence of file *\/\n            #define\tX_OK\t\t0x01\t\/* test for execute or search permission *\/\n            #define\tW_OK\t\t0x02\t\/* test for write permission *\/\n            #define\tR_OK\t\t0x04\t\/* test for read permission *\/\n    \n        #endif\n    \n    \/\/ must be indented here :)\n    #define REPLACEMENT_FOR_OFF_T off_t\n    \")\n    if (WIN32)\n        file_write_once(${BDIR_PRIVATE}\/unistd.h \"\")\n    endif()\n    \n    #replace_in_file_once(${SDIR}\/src\/sysutils.c \"static mode_t\" \"extern mode_t\")\n    \n    \n    push_front_to_file_once(${SDIR}\/src\/gpg-error.h.in \"\n        #ifdef _WIN32\n            #ifdef _WIN64\n            #define ssize_t long long\n            #else\n            #define ssize_t int\n            #endif\n    \n            #define strcasecmp stricmp\n            #define strncasecmp strnicmp\n        #endif\n    \")\n    \n    replace_in_file_once(${SDIR}\/src\/gpg-error.h.in \"#undef GPGRT_HAVE_MACRO_FUNCTION\" \"\")\n    replace_in_file_once(${SDIR}\/src\/gpg-error.h.in \"@define:pid_t@\" \"@define:pid_t@;\")\n    add_custom_command(OUTPUT ${BDIR}\/gpg-error.h\n        COMMAND ${mkheader} win32 mingw32 ${SDIR}\/src\/gpg-error.h.in\n           ${BDIR_PRIVATE}\/config.h ${PACKAGE_VERSION} ${PACKAGE_VERSION_NUM} > ${BDIR}\/gpg-error.h\n        DEPENDS ${SDIR}\/src\/gpg-error.h.in\n    )\n    set(src ${src} ${BDIR_PRIVATE}\/config.h ${BDIR}\/gpg-error.h)\n    \n    add_custom_command(OUTPUT ${BDIR}\/code-from-errno.h\n        COMMAND ${mkerrcodes} > ${BDIR}\/code-from-errno1.h\n        COMMAND ${awk_command} -f ${SDIR}\/src\/mkerrcodes2.awk ${BDIR}\/code-from-errno1.h > ${BDIR}\/code-from-errno.h\n    )\n    set(src ${src} ${BDIR}\/code-from-errno.h)\n    \n    macro(awk f in)\n        file(TO_NATIVE_PATH ${in} i)\n        add_custom_command(OUTPUT ${f}\n            COMMAND ${awk_command} -f ${i} ${ARGN} > ${f}\n            #DEPENDS\n        )\n        set(src ${src} ${f})\n    endmacro()\n    \n    awk(${BDIR}\/err-sources.h ${SDIR}\/src\/mkstrtable.awk -v textidx=3 ${SDIR}\/src\/err-sources.h.in)\n    awk(${BDIR}\/err-sources-sym.h ${SDIR}\/src\/mkstrtable.awk -v textidx=2 -v nogettext=1 ${SDIR}\/src\/err-sources.h.in)\n    \n    awk(${BDIR}\/err-codes.h ${SDIR}\/src\/mkstrtable.awk -v textidx=3 ${SDIR}\/src\/err-codes.h.in)\n    awk(${BDIR}\/err-codes-sym.h ${SDIR}\/src\/mkstrtable.awk -v textidx=2 -v nogettext=1 ${SDIR}\/src\/err-codes.h.in)\n    \n    awk(${BDIR}\/code-to-errno.h ${SDIR}\/src\/mkerrnos.awk ${SDIR}\/src\/errnos.in)\n    awk(${BDIR}\/errnos-sym.h ${SDIR}\/src\/mkstrtable.awk -v textidx=2 -v nogettext=1 -v prefix=GPG_ERR_ -v namespace=errnos_ ${SDIR}\/src\/errnos.in)\n\ncheck_function_exists:\n    -   flockfile\n    -   fork\n    -   getrlimit\n    -   mmap\n    -   rand\n    -   setenv\n    -   stat\n    -   stpcpy\n    -   strerror_r\n    -   strlwr\n    -   vasprintf\n\ncheck_include_exists:\n    -   file: locale.h\n        variable: HAVE_LOCALE_H\n        cpp: false\n    -   file: signal.h\n        variable: HAVE_SIGNAL_H\n        cpp: false\n    -   file: stdint.h\n        variable: HAVE_STDINT_H\n        cpp: false\n    -   file: stdlib.h\n        variable: HAVE_STDLIB_H\n        cpp: false\n    -   file: sys\/select.h\n        variable: HAVE_SYS_SELECT_H\n        cpp: false\n    -   file: sys\/time.h\n        variable: HAVE_SYS_TIME_H\n        cpp: false\n    -   file: time.h\n        variable: HAVE_TIME_H\n        cpp: false\n\ncheck_type_size:\n    -   type: int\n    -   type: long\n    -   type: pthread_mutex_t\n    -   type: time_t\n\ncheck_c_source_compiles:\n    HAVE_TIME_WITH_SYS_TIME:\n        text: \"\\n#include <time.h>\\n#include <sys\/time.h>\\nint main() {return 0;}\\n\"\n        invert: false\n    STDC_HEADERS:\n        text: \"\\n#include <stdlib.h>\\n#include <stdarg.h>\\n#include <string.h>\\n#include <float.h>\\nint main() {return 0;}\\n\"\n        invert: false\n\n",
    "source": {
        "git": {
            "url": "git:\/\/git.gnupg.org\/libgpg-error.git",
            "tag": "libgpg-error-{M}.{m}"
        }
    },
    "hash": "e6a6dbf195262b891133c5dc9207422979ed0d3e47d658a94e181fc31f2c548a",
    "created": "2018-08-03 21:56:08.425413"
}

{
    "project": "pvt.cppan.demo.gnu.gpg.gpgme.gpgme",
    "cppan": "source:\n    git: git:\/\/git.gnupg.org\/gpgme.git\n    tag: gpgme-{v}\n\nversion: 1.11.1\n\ntype: library\n\nexclude_from_build:\n    -   src\/gpgme-.*\n    -   src\/posix-io.c\n    -   src\/posix-util.c\n    -   src\/w32-ce.c\n    -   src\/w32-glib-io.c\n\noptions:\n    any:\n        definitions:\n            private:\n                -   BUILD_REVISION=\"\"\n                -   BUILD_TIMESTAMP=\"\"\n                -   CRIGHTBLURB=\"\"\n                -   HAVE_CONFIG_H\n                -   VERSION=\"\"\n            win32:\n                private:\n                    -   REPLACE_TTYNAME_R\n\ndependencies:\n    public:\n        pvt.cppan.demo.gnu.gpg.assuan.assuan:\n            version: 2\n\npost_sources: |\n    set(NEED__FILE_OFFSET_BITS 0)\n    set(API__OFF_T off_t)\n    set(API__SSIZE_T ssize_t)\n    \n    push_back_to_file_once(${SDIR}\/src\/gpgme.h.in \"\n        #define gpgme_ssize_t ssize_t\n        #define gpgme_off_t off_t\n    \")\n    \n    replace_in_file_once(${SDIR}\/src\/cJSON.c\n        \"# include <gpgrt.h>\"\n        \"# include <gpg-error.h>\"\n    )\n    \n    configure_file(${SDIR}\/src\/gpgme.h.in ${BDIR}\/gpgme.h)\n    set(src ${src} ${SDIR}\/src\/gpgme.h.in)\n    file_write_once(${BDIR_PRIVATE}\/config.h \"\n                #ifdef _WIN32\n                    #ifdef _WIN64\n                    #define ssize_t long long\n                    #else\n                    #define ssize_t int\n                    #endif\n    \n                    #define PATHSEP_C \\\"\\\\\\\\\\\"\n    \n                    #if !defined S_ISDIR && defined S_IFDIR\n                    # define S_ISDIR(mode) (((mode) & S_IFMT) == S_IFDIR)\n                    #endif\n                    #if !S_IRUSR && S_IREAD\n                    # define S_IRUSR S_IREAD\n                    #endif\n                    #if !S_IRUSR\n                    # define S_IRUSR 00400\n                    #endif\n                    #if !S_IWUSR && S_IWRITE\n                    # define S_IWUSR S_IWRITE\n                    #endif\n                    #if !S_IWUSR\n                    # define S_IWUSR 00200\n                    #endif\n                    #if !S_IXUSR && S_IEXEC\n                    # define S_IXUSR S_IEXEC\n                    #endif\n                    #if !S_IXUSR\n                    # define S_IXUSR 00100\n                    #endif\n    \n                    #define S_IFREG    0100000\n    \n                    #define _S_IRWXU  S_IRUSR | S_IWUSR | S_IXUSR\n    \n                    #if ! defined(S_ISREG) && defined(S_IFREG)\n                    #define\tS_ISREG(m) (((m) & S_IFMT) == S_IFREG)\n                    #endif\n    \n                    #define\tF_OK\t\t0\t\/* test for existence of file *\/\n                    #define\tX_OK\t\t0x01\t\/* test for execute or search permission *\/\n                    #define\tW_OK\t\t0x02\t\/* test for write permission *\/\n                    #define\tR_OK\t\t0x04\t\/* test for read permission *\/\n    \n                    #include <io.h>\n    \n                #endif\n    \n        #define GPGME_GCC_A_PURE\n    \")\n\ncheck_function_exists:\n    -   closefrom\n    -   fseeko\n    -   getegid\n    -   getenv_r\n    -   getgid\n    -   setlocale\n    -   timegm\n\ncheck_include_exists:\n    -   file: argp.h\n        variable: HAVE_ARGP_H\n        cpp: false\n    -   file: locale.h\n        variable: HAVE_LOCALE_H\n        cpp: false\n    -   file: stdint.h\n        variable: HAVE_STDINT_H\n        cpp: false\n    -   file: sys\/select.h\n        variable: HAVE_SYS_SELECT_H\n        cpp: false\n    -   file: sys\/stat.h\n        variable: HAVE_SYS_STAT_H\n        cpp: false\n    -   file: sys\/time.h\n        variable: HAVE_SYS_TIME_H\n        cpp: false\n    -   file: sys\/types.h\n        variable: HAVE_SYS_TYPES_H\n        cpp: false\n    -   file: sys\/uio.h\n        variable: HAVE_SYS_UIO_H\n        cpp: false\n    -   file: unistd.h\n        variable: HAVE_UNISTD_H\n        cpp: false\n\ncheck_type_size:\n    -   type: error_t\n    -   type: int\n    -   type: off_t\n    -   type: uintptr_t\n    -   type: unsigned\n\ncheck_struct_member:\n    -   member: cmsg_len\n        struct: struct cmsghdr\n\ncheck_c_source_compiles:\n    HAVE_TLS:\n        text: \"__thread int foo;\\n\\n int main() { \\n\\n)\\n\\n ; return 0; }\"\n        invert: false\n\n",
    "source": {
        "git": {
            "url": "git:\/\/git.gnupg.org\/gpgme.git",
            "tag": "gpgme-{v}"
        }
    },
    "version": "1.11.1",
    "hash": "de01c7972f4c495ec5c4c0262f3f6aef8b20f616ab1c8e8e3b372fae6730e545",
    "created": "2018-08-03 01:06:56.14701"
}

{
    "project": "pvt.cppan.demo.portaudio",
    "cppan": "source:\n    remote: http:\/\/www.portaudio.com\/archives\/pa_stable_v19_20140130.tgz\n\nversion: 19.3.0\n\nfiles:\n    -   cmake_support\/.*\n    -   src\/.*\\.c\n    -   src\/.*\\.cpp\n    -   src\/.*\\.h\n    -   include\/.*\\.h\n\npost_sources: |\n    OPTION(PA_ENABLE_DEBUG_OUTPUT \"Enable debug output for Portaudio\" OFF)\n    IF(PA_ENABLE_DEBUG_OUTPUT)\n    ADD_DEFINITIONS(-DPA_ENABLE_DEBUG_OUTPUT)\n    ENDIF(PA_ENABLE_DEBUG_OUTPUT)\n    \n    IF(WIN32)\n    OPTION(PA_UNICODE_BUILD \"Enable Portaudio Unicode build\" ON)\n    \n    SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}\/cmake_support)\n    # Try to find DirectX SDK\n    FIND_PACKAGE(DXSDK)\n    # Try to find ASIO SDK (assumes that portaudio and asiosdk folders are side-by-side, see\n    # http:\/\/www.portaudio.com\/trac\/wiki\/TutorialDir\/Compile\/WindowsASIOMSVC)\n    FIND_PACKAGE(ASIOSDK)\n    \n    IF(ASIOSDK_FOUND)\n    OPTION(PA_USE_ASIO \"Enable support for ASIO\" ON)\n    ELSE(ASIOSDK_FOUND)\n    OPTION(PA_USE_ASIO \"Enable support for ASIO\" OFF)\n    ENDIF(ASIOSDK_FOUND)\n    IF(DXSDK_FOUND)\n    OPTION(PA_USE_DS \"Enable support for DirectSound\" ON)\n    ELSE(DXSDK_FOUND)\n    OPTION(PA_USE_DS \"Enable support for DirectSound\" OFF)\n    ENDIF(DXSDK_FOUND)\n    OPTION(PA_USE_WMME \"Enable support for MME\" ON)\n    OPTION(PA_USE_WASAPI \"Enable support for WASAPI\" ON)\n    OPTION(PA_USE_WDMKS \"Enable support for WDMKS\" ON)\n    OPTION(PA_USE_WDMKS_DEVICE_INFO \"Use WDM\/KS API for device info\" ON)\n    MARK_AS_ADVANCED(PA_USE_WDMKS_DEVICE_INFO)\n    IF(PA_USE_DS)\n    OPTION(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE \"Use DirectSound full duplex create\" ON)\n    MARK_AS_ADVANCED(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE)\n    ENDIF(PA_USE_DS)\n    ENDIF(WIN32)\n    \n    # Set variables for DEF file expansion\n    IF(NOT PA_USE_ASIO)\n    SET(DEF_EXCLUDE_ASIO_SYMBOLS \";\")\n    ENDIF(NOT PA_USE_ASIO)\n    \n    IF(NOT PA_USE_WASAPI)\n    SET(DEF_EXCLUDE_WASAPI_SYMBOLS \";\")\n    ENDIF(NOT PA_USE_WASAPI)\n    \n    IF(PA_USE_WDMKS_DEVICE_INFO)\n    ADD_DEFINITIONS(-DPAWIN_USE_WDMKS_DEVICE_INFO)\n    ENDIF(PA_USE_WDMKS_DEVICE_INFO)\n    \n    IF(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE)\n    ADD_DEFINITIONS(-DPAWIN_USE_DIRECTSOUNDFULLDUPLEXCREATE)\n    ENDIF(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE)\n    \n    #######################################\n    IF(WIN32)\n    INCLUDE_DIRECTORIES(src\/os\/win)\n    else()\n    INCLUDE_DIRECTORIES(src\/os\/unix)\n    ENDIF(WIN32)\n    \n    IF(PA_USE_ASIO)\n    INCLUDE_DIRECTORIES(${ASIOSDK_ROOT_DIR}\/common)\n    INCLUDE_DIRECTORIES(${ASIOSDK_ROOT_DIR}\/host)\n    INCLUDE_DIRECTORIES(${ASIOSDK_ROOT_DIR}\/host\/pc)\n    \n    SET(PA_ASIO_INCLUDES\n      include\/pa_asio.h\n    )\n    \n    SET(PA_ASIO_SOURCES\n      src\/hostapi\/asio\/pa_asio.cpp\n    )\n    \n    SET(PA_ASIOSDK_SOURCES\n      ${ASIOSDK_ROOT_DIR}\/common\/asio.cpp\n      ${ASIOSDK_ROOT_DIR}\/host\/pc\/asiolist.cpp\n      ${ASIOSDK_ROOT_DIR}\/host\/asiodrivers.cpp\n    )\n    \n    ENDIF(PA_USE_ASIO)\n    \n    IF(PA_USE_DS)\n    INCLUDE_DIRECTORIES(${DXSDK_INCLUDE_DIR})\n    INCLUDE_DIRECTORIES(src\/os\/win)\n    \n    SET(PA_DS_INCLUDES\n      include\/pa_win_ds.h\n      src\/hostapi\/dsound\/pa_win_ds_dynlink.h\n    )\n    \n    SET(PA_DS_SOURCES\n      src\/hostapi\/dsound\/pa_win_ds.c\n      src\/hostapi\/dsound\/pa_win_ds_dynlink.c\n    )\n    \n    ENDIF(PA_USE_DS)\n    \n    IF(PA_USE_WMME)\n    \n    SET(PA_WMME_INCLUDES\n      include\/pa_win_wmme.h\n    )\n    \n    SET(PA_WMME_SOURCES\n      src\/hostapi\/wmme\/pa_win_wmme.c\n    )\n    \n    ENDIF(PA_USE_WMME)\n    \n    IF(PA_USE_WASAPI)\n    \n    SET(PA_WASAPI_INCLUDES\n      include\/pa_win_wasapi.h\n    )\n    \n    SET(PA_WASAPI_SOURCES\n      src\/hostapi\/wasapi\/pa_win_wasapi.c\n    )\n    \n    ENDIF(PA_USE_WASAPI)\n    \n    IF(PA_USE_WDMKS)\n    \n    SET(PA_WDMKS_INCLUDES\n      include\/pa_win_wdmks.h\n    )\n    \n    SET(PA_WDMKS_SOURCES\n      src\/hostapi\/wdmks\/pa_win_wdmks.c\n    )\n    \n    ENDIF(PA_USE_WDMKS)\n    \n    SET(PA_SKELETON_SOURCES\n      src\/hostapi\/skeleton\/pa_hostapi_skeleton.c\n    )\n    \n    #######################################\n    IF(WIN32)\n    SET(PA_INCLUDES\n      include\/portaudio.h\n      ${PA_ASIO_INCLUDES}\n      ${PA_DS_INCLUDES}\n      ${PA_WMME_INCLUDES}\n      ${PA_WASAPI_INCLUDES}\n      ${PA_WDMKS_INCLUDES}\n    )\n    ENDIF(WIN32)\n    \n    \n    SET(PA_COMMON_INCLUDES\n      src\/common\/pa_allocation.h\n      src\/common\/pa_converters.h\n      src\/common\/pa_cpuload.h\n      src\/common\/pa_debugprint.h\n      src\/common\/pa_dither.h\n      src\/common\/pa_endianness.h\n      src\/common\/pa_hostapi.h\n      src\/common\/pa_memorybarrier.h\n      src\/common\/pa_process.h\n      src\/common\/pa_ringbuffer.h\n      src\/common\/pa_stream.h\n      src\/common\/pa_trace.h\n      src\/common\/pa_types.h\n      src\/common\/pa_util.h\n    )\n    \n    SET(PA_COMMON_SOURCES\n      src\/common\/pa_allocation.c\n      src\/common\/pa_converters.c\n      src\/common\/pa_cpuload.c\n      src\/common\/pa_debugprint.c\n      src\/common\/pa_dither.c\n      src\/common\/pa_front.c\n      src\/common\/pa_process.c\n      src\/common\/pa_ringbuffer.c\n      src\/common\/pa_stream.c\n      src\/common\/pa_trace.c\n    )\n    \n    \n    IF(WIN32)\n    SET(PA_PLATFORM_SOURCES\n      src\/os\/win\/pa_win_hostapis.c\n      src\/os\/win\/pa_win_util.c\n      src\/os\/win\/pa_win_waveformat.c\n      src\/os\/win\/pa_win_wdmks_utils.c\n      src\/os\/win\/pa_win_coinitialize.c\n      src\/os\/win\/pa_x86_plain_converters.c\n    )\n    else()\n    SET(PA_PLATFORM_SOURCES\n      src\/os\/unix\/pa_unix_hostapis.c\n      src\/os\/unix\/pa_unix_util.c\n      src\/os\/unix\/pa_unix_util.h\n    )\n    ENDIF(WIN32)\n    \n    INCLUDE_DIRECTORIES( include )\n    INCLUDE_DIRECTORIES( src\/common )\n    \n    IF(WIN32 AND MSVC)\n    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)\n    ENDIF(WIN32 AND MSVC)\n    \n    ADD_DEFINITIONS(-DPORTAUDIO_CMAKE_GENERATED)\n    INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR} )\n    \n    SET(SOURCES_LESS_ASIO_SDK\n      ${PA_COMMON_SOURCES}\n      ${PA_ASIO_SOURCES}\n      ${PA_DS_SOURCES}\n      ${PA_WMME_SOURCES}\n      ${PA_WASAPI_SOURCES}\n      ${PA_WDMKS_SOURCES}\n      ${PA_SKELETON_SOURCES}\n      ${PA_PLATFORM_SOURCES}\n    )\n    \n    IF(PA_UNICODE_BUILD)\n    SET_SOURCE_FILES_PROPERTIES(\n      ${SOURCES_LESS_ASIO_SDK}\n      PROPERTIES\n      COMPILE_DEFINITIONS \"UNICODE;_UNICODE\"\n    )\n    ENDIF(PA_UNICODE_BUILD)\n    \n    # Configure the exports file according to settings\n    SET(GENERATED_MESSAGE \"CMake generated file, do NOT edit! Use CMake-GUI to change configuration instead.\")\n    CONFIGURE_FILE( cmake_support\/template_portaudio.def ${CMAKE_CURRENT_BINARY_DIR}\/portaudio_cmake.def @ONLY )\n    # Configure header for options (PA_USE_xxx)\n    CONFIGURE_FILE( cmake_support\/options_cmake.h.in ${CMAKE_CURRENT_BINARY_DIR}\/options_cmake.h @ONLY )\n    \n    set(src\n      ${PA_INCLUDES}\n      ${PA_COMMON_INCLUDES}\n      ${SOURCES_LESS_ASIO_SDK}\n      ${PA_ASIOSDK_SOURCES}\n      ${CMAKE_CURRENT_BINARY_DIR}\/portaudio_cmake.def\n      ${CMAKE_CURRENT_BINARY_DIR}\/options_cmake.h\n    )\n    \n    add_definitions(\n        -DPA_WDMKS_NO_KSGUID_LIB\n        -DPAWIN_WDMKS_NO_KSGUID_LIB\n    )\n    \n\npost_target: |\n    IF(WIN32)\n    \n    # If we use WDM\/KS we need setupapi.lib\n    IF(PA_USE_WDMKS)\n    TARGET_LINK_LIBRARIES(${this} PRIVATE setupapi)\n    ENDIF(PA_USE_WDMKS)\n    ENDIF(WIN32)\n    \n    #################################\n\n",
    "version": "19.3.0",
    "source": {
        "remote": {
            "url": "http:\/\/www.portaudio.com\/archives\/pa_stable_v19_20140130.tgz"
        }
    },
    "created": "2016-09-13 16:58:03.107451",
    "hash": "30c5bf033014b69fc73ce762597578c4fe23c302cdcdb91f3c2cd09c74ae1c3e"
}

{
    "project": "pvt.cppan.demo.portaudio",
    "cppan": "post_sources: !<!> \"OPTION(PA_ENABLE_DEBUG_OUTPUT \\\"Enable debug output for Portaudio\\\" OFF)\\nIF(PA_ENABLE_DEBUG_OUTPUT)\\nADD_DEFINITIONS(-DPA_ENABLE_DEBUG_OUTPUT)\\nENDIF(PA_ENABLE_DEBUG_OUTPUT)\\n\\nIF(WIN32)\\nOPTION(PA_UNICODE_BUILD \\\"Enable Portaudio Unicode build\\\" ON)\\n\\nSET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}\/cmake_support)\\n# Try to find DirectX SDK\\nFIND_PACKAGE(DXSDK)\\n# Try to find ASIO SDK (assumes that portaudio and asiosdk folders are side-by-side, see\\n# http:\/\/www.portaudio.com\/trac\/wiki\/TutorialDir\/Compile\/WindowsASIOMSVC)\\nFIND_PACKAGE(ASIOSDK)\\n\\nIF(ASIOSDK_FOUND)\\nOPTION(PA_USE_ASIO \\\"Enable support for ASIO\\\" ON)\\nELSE(ASIOSDK_FOUND)\\nOPTION(PA_USE_ASIO \\\"Enable support for ASIO\\\" OFF)\\nENDIF(ASIOSDK_FOUND)\\nIF(DXSDK_FOUND)\\nOPTION(PA_USE_DS \\\"Enable support for DirectSound\\\" ON)\\nELSE(DXSDK_FOUND)\\nOPTION(PA_USE_DS \\\"Enable support for DirectSound\\\" OFF)\\nENDIF(DXSDK_FOUND)\\nOPTION(PA_USE_WMME \\\"Enable support for MME\\\" ON)\\nOPTION(PA_USE_WASAPI \\\"Enable support for WASAPI\\\" ON)\\nOPTION(PA_USE_WDMKS \\\"Enable support for WDMKS\\\" ON)\\nOPTION(PA_USE_WDMKS_DEVICE_INFO \\\"Use WDM\/KS API for device info\\\" ON)\\nMARK_AS_ADVANCED(PA_USE_WDMKS_DEVICE_INFO)\\nIF(PA_USE_DS)\\nOPTION(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE \\\"Use DirectSound full duplex create\\\" ON)\\nMARK_AS_ADVANCED(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE)\\nENDIF(PA_USE_DS)\\nENDIF(WIN32)\\n\\n# Set variables for DEF file expansion\\nIF(NOT PA_USE_ASIO)\\nSET(DEF_EXCLUDE_ASIO_SYMBOLS \\\";\\\")\\nENDIF(NOT PA_USE_ASIO)\\n\\nIF(NOT PA_USE_WASAPI)\\nSET(DEF_EXCLUDE_WASAPI_SYMBOLS \\\";\\\")\\nENDIF(NOT PA_USE_WASAPI)\\n\\nIF(PA_USE_WDMKS_DEVICE_INFO)\\nADD_DEFINITIONS(-DPAWIN_USE_WDMKS_DEVICE_INFO)\\nENDIF(PA_USE_WDMKS_DEVICE_INFO)\\n\\nIF(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE)\\nADD_DEFINITIONS(-DPAWIN_USE_DIRECTSOUNDFULLDUPLEXCREATE)\\nENDIF(PA_USE_DIRECTSOUNDFULLDUPLEXCREATE)\\n\\n#######################################\\nIF(WIN32)\\nINCLUDE_DIRECTORIES(src\/os\/win)\\nelse()\\nINCLUDE_DIRECTORIES(src\/os\/unix)\\nENDIF(WIN32)\\n\\nIF(PA_USE_ASIO)\\nINCLUDE_DIRECTORIES(${ASIOSDK_ROOT_DIR}\/common)\\nINCLUDE_DIRECTORIES(${ASIOSDK_ROOT_DIR}\/host)\\nINCLUDE_DIRECTORIES(${ASIOSDK_ROOT_DIR}\/host\/pc)\\n\\nSET(PA_ASIO_INCLUDES\\n  include\/pa_asio.h\\n)\\n\\nSET(PA_ASIO_SOURCES\\n  src\/hostapi\/asio\/pa_asio.cpp\\n)\\n\\nSET(PA_ASIOSDK_SOURCES\\n  ${ASIOSDK_ROOT_DIR}\/common\/asio.cpp\\n  ${ASIOSDK_ROOT_DIR}\/host\/pc\/asiolist.cpp\\n  ${ASIOSDK_ROOT_DIR}\/host\/asiodrivers.cpp\\n)\\n\\nENDIF(PA_USE_ASIO)\\n\\nIF(PA_USE_DS)\\nINCLUDE_DIRECTORIES(${DXSDK_INCLUDE_DIR})\\nINCLUDE_DIRECTORIES(src\/os\/win)\\n\\nSET(PA_DS_INCLUDES\\n  include\/pa_win_ds.h\\n  src\/hostapi\/dsound\/pa_win_ds_dynlink.h\\n)\\n\\nSET(PA_DS_SOURCES\\n  src\/hostapi\/dsound\/pa_win_ds.c\\n  src\/hostapi\/dsound\/pa_win_ds_dynlink.c\\n)\\n\\nENDIF(PA_USE_DS)\\n\\nIF(PA_USE_WMME)\\n\\nSET(PA_WMME_INCLUDES\\n  include\/pa_win_wmme.h\\n)\\n\\nSET(PA_WMME_SOURCES\\n  src\/hostapi\/wmme\/pa_win_wmme.c\\n)\\n\\nENDIF(PA_USE_WMME)\\n\\nIF(PA_USE_WASAPI)\\n\\nSET(PA_WASAPI_INCLUDES\\n  include\/pa_win_wasapi.h\\n)\\n\\nSET(PA_WASAPI_SOURCES\\n  src\/hostapi\/wasapi\/pa_win_wasapi.c\\n)\\n\\nENDIF(PA_USE_WASAPI)\\n\\nIF(PA_USE_WDMKS)\\n\\nSET(PA_WDMKS_INCLUDES\\n  include\/pa_win_wdmks.h\\n)\\n\\nSET(PA_WDMKS_SOURCES\\n  src\/hostapi\/wdmks\/pa_win_wdmks.c\\n)\\n\\nENDIF(PA_USE_WDMKS)\\n\\nSET(PA_SKELETON_SOURCES\\n  src\/hostapi\/skeleton\/pa_hostapi_skeleton.c\\n)\\n\\n#######################################\\nIF(WIN32)\\nSET(PA_INCLUDES\\n  include\/portaudio.h\\n  ${PA_ASIO_INCLUDES}\\n  ${PA_DS_INCLUDES}\\n  ${PA_WMME_INCLUDES}\\n  ${PA_WASAPI_INCLUDES}\\n  ${PA_WDMKS_INCLUDES}\\n)\\nENDIF(WIN32)\\n\\n\\nSET(PA_COMMON_INCLUDES\\n  src\/common\/pa_allocation.h\\n  src\/common\/pa_converters.h\\n  src\/common\/pa_cpuload.h\\n  src\/common\/pa_debugprint.h\\n  src\/common\/pa_dither.h\\n  src\/common\/pa_endianness.h\\n  src\/common\/pa_hostapi.h\\n  src\/common\/pa_memorybarrier.h\\n  src\/common\/pa_process.h\\n  src\/common\/pa_ringbuffer.h\\n  src\/common\/pa_stream.h\\n  src\/common\/pa_trace.h\\n  src\/common\/pa_types.h\\n  src\/common\/pa_util.h\\n)\\n\\nSET(PA_COMMON_SOURCES\\n  src\/common\/pa_allocation.c\\n  src\/common\/pa_converters.c\\n  src\/common\/pa_cpuload.c\\n  src\/common\/pa_debugprint.c\\n  src\/common\/pa_dither.c\\n  src\/common\/pa_front.c\\n  src\/common\/pa_process.c\\n  src\/common\/pa_ringbuffer.c\\n  src\/common\/pa_stream.c\\n  src\/common\/pa_trace.c\\n)\\n\\n\\nIF(WIN32)\\nSET(PA_PLATFORM_SOURCES\\n  src\/os\/win\/pa_win_hostapis.c\\n  src\/os\/win\/pa_win_util.c\\n  src\/os\/win\/pa_win_waveformat.c\\n  src\/os\/win\/pa_win_wdmks_utils.c\\n  src\/os\/win\/pa_win_coinitialize.c\\n  src\/os\/win\/pa_x86_plain_converters.c\\n)\\nelse()\\nSET(PA_PLATFORM_SOURCES\\n  src\/os\/unix\/pa_unix_hostapis.c\\n  src\/os\/unix\/pa_unix_util.c\\n  src\/os\/unix\/pa_unix_util.h\\n)\\nENDIF(WIN32)\\n\\nINCLUDE_DIRECTORIES( include )\\nINCLUDE_DIRECTORIES( src\/common )\\n\\nIF(WIN32 AND MSVC)\\nADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)\\nENDIF(WIN32 AND MSVC)\\n\\nADD_DEFINITIONS(-DPORTAUDIO_CMAKE_GENERATED)\\nINCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR} )\\n\\nSET(SOURCES_LESS_ASIO_SDK\\n  ${PA_COMMON_SOURCES}\\n  ${PA_ASIO_SOURCES}\\n  ${PA_DS_SOURCES}\\n  ${PA_WMME_SOURCES}\\n  ${PA_WASAPI_SOURCES}\\n  ${PA_WDMKS_SOURCES}\\n  ${PA_SKELETON_SOURCES}\\n  ${PA_PLATFORM_SOURCES}\\n)\\n\\nIF(PA_UNICODE_BUILD)\\nSET_SOURCE_FILES_PROPERTIES(\\n  ${SOURCES_LESS_ASIO_SDK}\\n  PROPERTIES\\n  COMPILE_DEFINITIONS \\\"UNICODE;_UNICODE\\\"\\n)\\nENDIF(PA_UNICODE_BUILD)\\n\\n# Configure the exports file according to settings\\nSET(GENERATED_MESSAGE \\\"CMake generated file, do NOT edit! Use CMake-GUI to change configuration instead.\\\")\\nCONFIGURE_FILE( cmake_support\/template_portaudio.def ${CMAKE_CURRENT_BINARY_DIR}\/portaudio_cmake.def @ONLY )\\n# Configure header for options (PA_USE_xxx)\\nCONFIGURE_FILE( cmake_support\/options_cmake.h.in ${CMAKE_CURRENT_BINARY_DIR}\/options_cmake.h @ONLY )\\n\\nset(src\\n  ${PA_INCLUDES}\\n  ${PA_COMMON_INCLUDES}\\n  ${SOURCES_LESS_ASIO_SDK}\\n  ${PA_ASIOSDK_SOURCES}\\n  ${CMAKE_CURRENT_BINARY_DIR}\/portaudio_cmake.def\\n  ${CMAKE_CURRENT_BINARY_DIR}\/options_cmake.h\\n)\\n\\nadd_definitions(\\n    -DPA_WDMKS_NO_KSGUID_LIB\\n    -DPAWIN_WDMKS_NO_KSGUID_LIB\\n)\\n\"\nfiles:\n  - cmake_support\/.*\n  - src\/.*\\.c\n  - src\/.*\\.cpp\n  - src\/.*\\.h\n  - include\/.*\\.h\npost_target: !<!> \"IF(WIN32)\\n\\n# If we use WDM\/KS we need setupapi.lib\\nIF(PA_USE_WDMKS)\\nTARGET_LINK_LIBRARIES(${this} PRIVATE setupapi)\\nENDIF(PA_USE_WDMKS)\\nENDIF(WIN32)\\n\\n#################################\"\nsource:\n  remote: http:\/\/www.portaudio.com\/archives\/pa_stable_v19_20140130.tgz\nversion: 19.3.0",
    "version": "19.3.0",
    "source": {
        "remote": {
            "url": "http:\/\/www.portaudio.com\/archives\/pa_stable_v19_20140130.tgz"
        }
    }
}

{
    "project": "pvt.cppan.demo.kcat.openal",
    "cppan": "source:\n    git: https:\/\/github.com\/kcat\/openal-soft\n    tag: openal-soft-1.17.2\n\nversion: 1.17.2\n\nfiles:\n    -   Alc\/.*\n    -   OpenAL32\/.*\n    -   cmake\/.*\n    -   common\/.*\n    -   config.h.in\n    -   include\/.*\n\noptions:\n    static:\n        definitions:\n            public:\n                -   AL_LIBTYPE_STATIC\n\npost_sources: |\n    set(OpenAL_SOURCE_DIR ${SDIR})\n    set(OpenAL_BINARY_DIR ${BDIR})\n    \n    SET(CMAKE_MODULE_PATH \"${OpenAL_SOURCE_DIR}\/cmake\")\n    \n    INCLUDE(CheckFunctionExists)\n    INCLUDE(CheckLibraryExists)\n    INCLUDE(CheckSharedFunctionExists)\n    INCLUDE(CheckIncludeFile)\n    INCLUDE(CheckIncludeFiles)\n    INCLUDE(CheckSymbolExists)\n    INCLUDE(CheckCCompilerFlag)\n    INCLUDE(CheckCSourceCompiles)\n    INCLUDE(CheckTypeSize)\n    include(CheckFileOffsetBits)\n    \n    SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)\n    \n    \n    OPTION(ALSOFT_DLOPEN  \"Check for the dlopen API for loading optional libs\"  ON)\n    \n    OPTION(ALSOFT_WERROR  \"Treat compile warnings as errors\"      OFF)\n    \n    OPTION(ALSOFT_UTILS          \"Build and install utility programs\"         OFF)\n    OPTION(ALSOFT_NO_CONFIG_UTIL \"Disable building the alsoft-config utility\" OFF)\n    \n    OPTION(ALSOFT_EXAMPLES  \"Build and install example programs\"  OFF)\n    OPTION(ALSOFT_TESTS     \"Build and install test programs\"     OFF)\n    \n    OPTION(ALSOFT_CONFIG \"Install alsoft.conf sample configuration file\" ON)\n    OPTION(ALSOFT_HRTF_DEFS \"Install HRTF definition files\" ON)\n    OPTION(ALSOFT_AMBDEC_PRESETS \"Install AmbDec preset files\" ON)\n    OPTION(ALSOFT_INSTALL \"Install headers and libraries\" ON)\n    \n    \n    \n    IF(NOT WIN32)\n    ELSE()\n        ADD_DEFINITIONS(\"-D_WIN32 -D_WIN32_WINNT=0x0502\")\n    \n        # This option is mainly for static linking OpenAL Soft into another project\n        # that already defines the IDs. It is up to that project to ensure all\n        # required IDs are defined.\n        OPTION(ALSOFT_NO_UID_DEFS \"Do not define GUIDs, IIDs, CLSIDs, or PropertyKeys\" OFF)\n    \n        IF(MINGW)\n            OPTION(ALSOFT_BUILD_IMPORT_LIB \"Build an import .lib using dlltool (requires sed)\" ON)\n            IF(NOT DLLTOOL)\n                IF(HOST)\n                    SET(DLLTOOL \"${HOST}-dlltool\")\n                ELSE()\n                    SET(DLLTOOL \"dlltool\")\n                ENDIF()\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    \n    \n    # QNX's gcc do not uses \/usr\/include and \/usr\/lib pathes by default\n    IF (\"${CMAKE_C_PLATFORM_ID}\" STREQUAL \"QNX\")\n        ADD_DEFINITIONS(\"-I\/usr\/include\")\n        SET(EXTRA_LIBS ${EXTRA_LIBS} -L\/usr\/lib)\n    ENDIF()\n    \n    SET(LIB_MAJOR_VERSION \"1\")\n    SET(LIB_MINOR_VERSION \"17\")\n    SET(LIB_REVISION \"2\")\n    SET(LIB_VERSION \"${LIB_MAJOR_VERSION}.${LIB_MINOR_VERSION}.${LIB_REVISION}\")\n    \n    SET(EXPORT_DECL \"\")\n    SET(ALIGN_DECL \"\")\n    \n    \n    CHECK_C_COMPILER_FLAG(-std=c11 HAVE_STD_C11)\n    IF(HAVE_STD_C11)\n        SET(CMAKE_C_FLAGS \"-std=c11 ${CMAKE_C_FLAGS}\")\n    ELSE()\n        CHECK_C_COMPILER_FLAG(-std=c99 HAVE_STD_C99)\n        IF(HAVE_STD_C99)\n            SET(CMAKE_C_FLAGS \"-std=c99 ${CMAKE_C_FLAGS}\")\n        ENDIF()\n    ENDIF()\n    \n    if(NOT WIN32)\n        # Check if _POSIX_C_SOURCE and _XOPEN_SOURCE needs to be set for POSIX functions\n        CHECK_SYMBOL_EXISTS(posix_memalign stdlib.h HAVE_POSIX_MEMALIGN_DEFAULT)\n        IF(NOT HAVE_POSIX_MEMALIGN_DEFAULT)\n            SET(OLD_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})\n            SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -D_POSIX_C_SOURCE=200112L -D_XOPEN_SOURCE=500\")\n            CHECK_SYMBOL_EXISTS(posix_memalign stdlib.h HAVE_POSIX_MEMALIGN_POSIX)\n            IF(NOT HAVE_POSIX_MEMALIGN_POSIX)\n                SET(CMAKE_REQUIRED_FLAGS ${OLD_REQUIRED_FLAGS})\n            ELSE()\n                ADD_DEFINITIONS(-D_POSIX_C_SOURCE=200112L -D_XOPEN_SOURCE=500)\n            ENDIF()\n        ENDIF()\n        UNSET(OLD_REQUIRED_FLAGS)\n    ENDIF()\n    \n    # Set defines for large file support\n    CHECK_FILE_OFFSET_BITS()\n    IF(_FILE_OFFSET_BITS)\n        ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=${_FILE_OFFSET_BITS})\n        SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -D_FILE_OFFSET_BITS=${_FILE_OFFSET_BITS}\")\n    ENDIF()\n    ADD_DEFINITIONS(-D_LARGEFILE_SOURCE -D_LARGE_FILES)\n    SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -D_LARGEFILE_SOURCE -D_LARGE_FILES\")\n    \n    # MSVC may need workarounds for C99 restrict and inline\n    IF(MSVC)\n        # TODO: Once we truly require C99, these restrict and inline checks should go\n        # away.\n        CHECK_C_SOURCE_COMPILES(\"int *restrict foo;\n                                 int main() {return 0;}\" HAVE_RESTRICT)\n        IF(NOT HAVE_RESTRICT)\n            ADD_DEFINITIONS(\"-Drestrict=\")\n            SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -Drestrict=\")\n        ENDIF()\n    \n        CHECK_C_SOURCE_COMPILES(\"inline void foo(void) { }\n                                 int main() {return 0;}\" HAVE_INLINE)\n        IF(NOT HAVE_INLINE)\n            CHECK_C_SOURCE_COMPILES(\"__inline void foo(void) { }\n                                     int main() {return 0;}\" HAVE___INLINE)\n            IF(NOT HAVE___INLINE)\n                MESSAGE(FATAL_ERROR \"No inline keyword found, please report!\")\n            ENDIF()\n    \n            ADD_DEFINITIONS(-Dinline=__inline)\n            SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -Dinline=__inline\")\n        ENDIF()\n    ENDIF()\n    \n    # Make sure we have C99-style inline semantics with GCC (4.3 or newer).\n    IF(CMAKE_COMPILER_IS_GNUCC)\n        SET(OLD_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS}\")\n        # Force no inlining for the next test.\n        SET(CMAKE_REQUIRED_FLAGS \"${OLD_REQUIRED_FLAGS} -fno-inline\")\n    \n        CHECK_C_SOURCE_COMPILES(\"extern inline int foo() { return 0; }\n                                 int main() {return foo();}\" INLINE_IS_C99)\n        IF(NOT INLINE_IS_C99)\n            MESSAGE(FATAL_ERROR \"Your compiler does not seem to have C99 inline semantics!\n                                 Please update your compiler for better C99 compliance.\")\n        ENDIF()\n    \n        SET(CMAKE_REQUIRED_FLAGS \"${OLD_REQUIRED_FLAGS}\")\n    ENDIF()\n    \n    # Check if we have C99 variable length arrays\n    CHECK_C_SOURCE_COMPILES(\n    \"int main(int argc, char *argv[])\n     {\n         volatile int tmp[argc];\n         tmp[0] = argv[0][0];\n         return tmp[0];\n     }\"\n    HAVE_C99_VLA)\n    \n    # Check if we have C99 bool\n    CHECK_C_SOURCE_COMPILES(\n    \"int main(int argc, char *argv[])\n     {\n         volatile _Bool ret;\n         ret = (argc > 1) ? 1 : 0;\n         return ret ? -1 : 0;\n     }\"\n    HAVE_C99_BOOL)\n    \n    # Check if we have C11 static_assert\n    CHECK_C_SOURCE_COMPILES(\n    \"int main()\n     {\n         _Static_assert(sizeof(int) == sizeof(int), \\\"What\\\");\n         return 0;\n     }\"\n    HAVE_C11_STATIC_ASSERT)\n    \n    # Check if we have C11 alignas\n    CHECK_C_SOURCE_COMPILES(\n    \"_Alignas(16) int foo;\n     int main()\n     {\n         return 0;\n     }\"\n    HAVE_C11_ALIGNAS)\n    \n    # Check if we have C11 _Atomic\n    CHECK_C_SOURCE_COMPILES(\n    \"#include <stdatomic.h>\n     const int _Atomic foo = ATOMIC_VAR_INIT(~0);\n     int main()\n     {\n         return atomic_load(&foo);\n     }\"\n    HAVE_C11_ATOMIC)\n    \n    # Add definitions, compiler switches, etc.\n    INCLUDE_DIRECTORIES(\"${OpenAL_SOURCE_DIR}\/include\" \"${OpenAL_BINARY_DIR}\")\n    IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n        INCLUDE_DIRECTORIES(\"${OpenAL_SOURCE_DIR}\/OpenAL32\/Include\" \"${OpenAL_SOURCE_DIR}\/Alc\")\n        IF(WIN32 AND ALSOFT_NO_UID_DEFS)\n            ADD_DEFINITIONS(\"-DAL_NO_UID_DEFS\")\n        ENDIF()\n    ENDIF()\n    \n    \n    SET(EXTRA_CFLAGS \"\")\n    IF(MSVC)\n        ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)\n        ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_DEPRECATE)\n        SET(EXTRA_CFLAGS \"${EXTRA_CFLAGS} \/wd4098\")\n    \n        IF(NOT DXSDK_DIR)\n            STRING(REGEX REPLACE \"\\\\\\\\\" \"\/\" DXSDK_DIR \"$ENV{DXSDK_DIR}\")\n        ELSE()\n            STRING(REGEX REPLACE \"\\\\\\\\\" \"\/\" DXSDK_DIR \"${DXSDK_DIR}\")\n        ENDIF()\n        IF(DXSDK_DIR)\n            MESSAGE(STATUS \"Using DirectX SDK directory: ${DXSDK_DIR}\")\n        ENDIF()\n    ELSE()\n        SET(EXTRA_CFLAGS \"${EXTRA_CFLAGS} -Winline -Wall\")\n        CHECK_C_COMPILER_FLAG(-Wextra HAVE_W_EXTRA)\n        IF(HAVE_W_EXTRA)\n            SET(EXTRA_CFLAGS \"${EXTRA_CFLAGS} -Wextra\")\n        ENDIF()\n    \n        IF(ALSOFT_WERROR)\n            SET(EXTRA_CFLAGS \"${EXTRA_CFLAGS} -Werror\")\n        ENDIF()\n    \n        CHECK_C_SOURCE_COMPILES(\"int foo() __attribute__((destructor));\n                                 int main() {return 0;}\" HAVE_GCC_DESTRUCTOR)\n    \n        option(ALSOFT_STATIC_LIBGCC \"Force -static-libgcc for static GCC runtimes\" OFF)\n        if(ALSOFT_STATIC_LIBGCC)\n            set(OLD_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\n            set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} -static-libgcc)\n            check_c_source_compiles(\n    \"#include <stdlib.h>\n    int main()\n    {\n        return 0;\n    }\"\n                HAVE_STATIC_LIBGCC_SWITCH\n            )\n            if(HAVE_STATIC_LIBGCC_SWITCH)\n                set(EXTRA_LIBS ${EXTRA_LIBS} -static-libgcc)\n            endif()\n            set(CMAKE_REQUIRED_LIBRARIES ${OLD_REQUIRED_LIBRARIES})\n            unset(OLD_REQUIRED_LIBRARIES)\n        endif()\n    ENDIF()\n    \n    # Set visibility\/export options if available\n    SET(HIDDEN_DECL \"\")\n    IF(WIN32)\n        SET(EXPORT_DECL \"__declspec(dllexport)\")\n        IF(NOT MINGW)\n            SET(ALIGN_DECL \"__declspec(align(x))\")\n        ELSE()\n            SET(ALIGN_DECL \"__declspec(aligned(x))\")\n        ENDIF()\n    ELSE()\n        SET(OLD_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS}\")\n        # Yes GCC, really don't accept visibility modes you don't support\n        SET(CMAKE_REQUIRED_FLAGS \"${OLD_REQUIRED_FLAGS} -Wattributes -Werror\")\n    \n        CHECK_C_SOURCE_COMPILES(\"int foo() __attribute__((visibility(\\\"protected\\\")));\n                                 int main() {return 0;}\" HAVE_GCC_PROTECTED_VISIBILITY)\n        IF(HAVE_GCC_PROTECTED_VISIBILITY)\n            SET(EXPORT_DECL \"__attribute__((visibility(\\\"protected\\\")))\")\n        ELSE()\n            CHECK_C_SOURCE_COMPILES(\"int foo() __attribute__((visibility(\\\"default\\\")));\n                                     int main() {return 0;}\" HAVE_GCC_DEFAULT_VISIBILITY)\n            IF(HAVE_GCC_DEFAULT_VISIBILITY)\n                SET(EXPORT_DECL \"__attribute__((visibility(\\\"default\\\")))\")\n            ENDIF()\n        ENDIF()\n    \n        IF(HAVE_GCC_PROTECTED_VISIBILITY OR HAVE_GCC_DEFAULT_VISIBILITY)\n            CHECK_C_COMPILER_FLAG(-fvisibility=hidden HAVE_VISIBILITY_HIDDEN_SWITCH)\n            IF(HAVE_VISIBILITY_HIDDEN_SWITCH)\n                SET(EXTRA_CFLAGS \"${EXTRA_CFLAGS} -fvisibility=hidden\")\n                SET(HIDDEN_DECL \"__attribute__((visibility(\\\"hidden\\\")))\")\n            ENDIF()\n        ENDIF()\n    \n        CHECK_C_SOURCE_COMPILES(\"int foo __attribute__((aligned(16)));\n                                 int main() {return 0;}\" HAVE_ATTRIBUTE_ALIGNED)\n        IF(HAVE_ATTRIBUTE_ALIGNED)\n            SET(ALIGN_DECL \"__attribute__((aligned(x)))\")\n        ENDIF()\n    \n        SET(CMAKE_REQUIRED_FLAGS \"${OLD_REQUIRED_FLAGS}\")\n    ENDIF()\n    \n    SET(SSE_SWITCH \"\")\n    SET(SSE2_SWITCH \"\")\n    SET(SSE3_SWITCH \"\")\n    SET(SSE4_1_SWITCH \"\")\n    IF(NOT MSVC)\n        CHECK_C_COMPILER_FLAG(-msse HAVE_MSSE_SWITCH)\n        IF(HAVE_MSSE_SWITCH)\n            SET(SSE_SWITCH \"-msse\")\n        ENDIF()\n        CHECK_C_COMPILER_FLAG(-msse2 HAVE_MSSE2_SWITCH)\n        IF(HAVE_MSSE2_SWITCH)\n            SET(SSE2_SWITCH \"-msse2\")\n        ENDIF()\n        CHECK_C_COMPILER_FLAG(-msse3 HAVE_MSSE3_SWITCH)\n        IF(HAVE_MSSE3_SWITCH)\n            SET(SSE3_SWITCH \"-msse3\")\n        ENDIF()\n        CHECK_C_COMPILER_FLAG(-msse4.1 HAVE_MSSE4_1_SWITCH)\n        IF(HAVE_MSSE4_1_SWITCH)\n            SET(SSE4_1_SWITCH \"-msse4.1\")\n        ENDIF()\n    ENDIF()\n    \n    CHECK_C_SOURCE_COMPILES(\"int foo(const char *str, ...) __attribute__((format(printf, 1, 2)));\n                             int main() {return 0;}\" HAVE_GCC_FORMAT)\n    \n    IF(NOT HAVE_GUIDDEF_H)\n        CHECK_INCLUDE_FILE(initguid.h HAVE_INITGUID_H)\n    ENDIF()\n    \n    # Some systems need libm for some of the following math functions to work\n    CHECK_LIBRARY_EXISTS(m pow \"\" HAVE_LIBM)\n    IF(HAVE_LIBM)\n        SET(EXTRA_LIBS m ${EXTRA_LIBS})\n        SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} m)\n    ENDIF()\n    \n    # Check for the dlopen API (for dynamicly loading backend libs)\n    IF(ALSOFT_DLOPEN)\n        CHECK_LIBRARY_EXISTS(dl dlopen \"\" HAVE_LIBDL)\n        IF(HAVE_LIBDL)\n            SET(EXTRA_LIBS dl ${EXTRA_LIBS})\n            SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} dl)\n        ENDIF()\n    \n        CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)\n    ENDIF()\n    \n    # Check for a cpuid intrinsic\n    IF(HAVE_CPUID_H)\n        CHECK_C_SOURCE_COMPILES(\"#include <cpuid.h>\n            int main()\n            {\n                unsigned int eax, ebx, ecx, edx;\n                return __get_cpuid(0, &eax, &ebx, &ecx, &edx);\n            }\" HAVE_GCC_GET_CPUID)\n    ENDIF()\n    IF(HAVE_INTRIN_H)\n        CHECK_C_SOURCE_COMPILES(\"#include <intrin.h>\n            int main()\n            {\n                int regs[4];\n                __cpuid(regs, 0);\n                return regs[0];\n            }\" HAVE_CPUID_INTRINSIC)\n    ENDIF()\n    \n    CHECK_SYMBOL_EXISTS(lrintf math.h HAVE_LRINTF)\n    CHECK_SYMBOL_EXISTS(modff  math.h HAVE_MODFF)\n    IF(NOT HAVE_C99_VLA)\n        CHECK_SYMBOL_EXISTS(alloca malloc.h HAVE_ALLOCA)\n        #IF(NOT HAVE_ALLOCA)\n        #    MESSAGE(FATAL_ERROR \"No alloca function found, please report!\")\n        #ENDIF()\n    ENDIF()\n    \n    IF(HAVE_FLOAT_H)\n        CHECK_SYMBOL_EXISTS(_controlfp float.h HAVE__CONTROLFP)\n        CHECK_SYMBOL_EXISTS(__control87_2 float.h HAVE___CONTROL87_2)\n    ENDIF()\n    \n    CHECK_FUNCTION_EXISTS(stat HAVE_STAT)\n    CHECK_FUNCTION_EXISTS(strtof HAVE_STRTOF)\n    CHECK_FUNCTION_EXISTS(strcasecmp HAVE_STRCASECMP)\n    IF(NOT HAVE_STRCASECMP)\n        CHECK_FUNCTION_EXISTS(_stricmp HAVE__STRICMP)\n        IF(NOT HAVE__STRICMP)\n            MESSAGE(FATAL_ERROR \"No case-insensitive compare function found, please report!\")\n        ENDIF()\n    \n        ADD_DEFINITIONS(-Dstrcasecmp=_stricmp)\n    ENDIF()\n    \n    CHECK_FUNCTION_EXISTS(strncasecmp HAVE_STRNCASECMP)\n    IF(NOT HAVE_STRNCASECMP)\n        CHECK_FUNCTION_EXISTS(_strnicmp HAVE__STRNICMP)\n        IF(NOT HAVE__STRNICMP)\n            MESSAGE(FATAL_ERROR \"No case-insensitive size-limitted compare function found, please report!\")\n        ENDIF()\n    \n        ADD_DEFINITIONS(-Dstrncasecmp=_strnicmp)\n    ENDIF()\n    \n    CHECK_SYMBOL_EXISTS(strnlen string.h HAVE_STRNLEN)\n    CHECK_SYMBOL_EXISTS(snprintf stdio.h HAVE_SNPRINTF)\n    IF(NOT HAVE_SNPRINTF)\n        CHECK_FUNCTION_EXISTS(_snprintf HAVE__SNPRINTF)\n        IF(NOT HAVE__SNPRINTF)\n            MESSAGE(FATAL_ERROR \"No snprintf function found, please report!\")\n        ENDIF()\n    \n        ADD_DEFINITIONS(-Dsnprintf=_snprintf)\n    ENDIF()\n    \n    CHECK_SYMBOL_EXISTS(isfinite math.h HAVE_ISFINITE)\n    IF(NOT HAVE_ISFINITE)\n        CHECK_FUNCTION_EXISTS(finite HAVE_FINITE)\n        IF(NOT HAVE_FINITE)\n            CHECK_FUNCTION_EXISTS(_finite HAVE__FINITE)\n            IF(NOT HAVE__FINITE)\n                MESSAGE(FATAL_ERROR \"No isfinite function found, please report!\")\n            ENDIF()\n            ADD_DEFINITIONS(-Disfinite=_finite)\n        ELSE()\n            ADD_DEFINITIONS(-Disfinite=finite)\n        ENDIF()\n    ENDIF()\n    \n    CHECK_SYMBOL_EXISTS(isnan math.h HAVE_ISNAN)\n    IF(NOT HAVE_ISNAN)\n        CHECK_FUNCTION_EXISTS(_isnan HAVE__ISNAN)\n        IF(NOT HAVE__ISNAN)\n            MESSAGE(FATAL_ERROR \"No isnan function found, please report!\")\n        ENDIF()\n    \n        ADD_DEFINITIONS(-Disnan=_isnan)\n    ENDIF()\n    \n    \n    # Check if we have Windows headers\n    CHECK_INCLUDE_FILE(windows.h HAVE_WINDOWS_H -D_WIN32_WINNT=0x0502)\n    IF(NOT HAVE_WINDOWS_H)\n        CHECK_SYMBOL_EXISTS(gettimeofday sys\/time.h HAVE_GETTIMEOFDAY)\n        IF(NOT HAVE_GETTIMEOFDAY)\n            MESSAGE(FATAL_ERROR \"No timing function found!\")\n        ENDIF()\n    \n        CHECK_SYMBOL_EXISTS(nanosleep time.h HAVE_NANOSLEEP)\n        IF(NOT HAVE_NANOSLEEP)\n            MESSAGE(FATAL_ERROR \"No sleep function found!\")\n        ENDIF()\n    \n        # We need pthreads outside of Windows\n        CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD_H)\n        IF(NOT HAVE_PTHREAD_H)\n            MESSAGE(FATAL_ERROR \"PThreads is required for non-Windows builds!\")\n        ENDIF()\n        # Some systems need pthread_np.h to get recursive mutexes\n        CHECK_INCLUDE_FILES(\"pthread.h;pthread_np.h\" HAVE_PTHREAD_NP_H)\n    \n        CHECK_C_COMPILER_FLAG(-pthread HAVE_PTHREAD)\n        IF(HAVE_PTHREAD)\n            SET(EXTRA_CFLAGS \"${EXTRA_CFLAGS} -pthread\")\n            SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -pthread\")\n            SET(EXTRA_LIBS ${EXTRA_LIBS} -pthread)\n        ENDIF()\n    \n        CHECK_LIBRARY_EXISTS(pthread pthread_create \"\" HAVE_LIBPTHREAD)\n        IF(HAVE_LIBPTHREAD)\n            SET(EXTRA_LIBS pthread ${EXTRA_LIBS})\n        ENDIF()\n    \n        CHECK_SYMBOL_EXISTS(pthread_setschedparam pthread.h HAVE_PTHREAD_SETSCHEDPARAM)\n    \n        IF(HAVE_PTHREAD_NP_H)\n            CHECK_SYMBOL_EXISTS(pthread_setname_np \"pthread.h;pthread_np.h\" HAVE_PTHREAD_SETNAME_NP)\n            IF(NOT HAVE_PTHREAD_SETNAME_NP)\n                CHECK_SYMBOL_EXISTS(pthread_set_name_np \"pthread.h;pthread_np.h\" HAVE_PTHREAD_SET_NAME_NP)\n            ELSE()\n                CHECK_C_SOURCE_COMPILES(\"\n    #include <pthread.h>\n    #include <pthread_np.h>\n    int main()\n    {\n        pthread_setname_np(\\\"testname\\\");\n        return 0;\n    }\"\n                    PTHREAD_SETNAME_NP_ONE_PARAM\n                )\n            ENDIF()\n            CHECK_SYMBOL_EXISTS(pthread_mutexattr_setkind_np \"pthread.h;pthread_np.h\" HAVE_PTHREAD_MUTEXATTR_SETKIND_NP)\n        ELSE()\n            CHECK_SYMBOL_EXISTS(pthread_setname_np pthread.h HAVE_PTHREAD_SETNAME_NP)\n            IF(NOT HAVE_PTHREAD_SETNAME_NP)\n                CHECK_SYMBOL_EXISTS(pthread_set_name_np pthread.h HAVE_PTHREAD_SET_NAME_NP)\n            ELSE()\n                CHECK_C_SOURCE_COMPILES(\"\n    #include <pthread.h>\n    int main()\n    {\n        pthread_setname_np(\\\"testname\\\");\n        return 0;\n    }\"\n                    PTHREAD_SETNAME_NP_ONE_PARAM\n                )\n            ENDIF()\n            CHECK_SYMBOL_EXISTS(pthread_mutexattr_setkind_np pthread.h HAVE_PTHREAD_MUTEXATTR_SETKIND_NP)\n        ENDIF()\n    \n        CHECK_SYMBOL_EXISTS(pthread_mutex_timedlock pthread.h HAVE_PTHREAD_MUTEX_TIMEDLOCK)\n    \n        CHECK_LIBRARY_EXISTS(rt clock_gettime \"\" HAVE_LIBRT)\n        IF(HAVE_LIBRT)\n            SET(EXTRA_LIBS rt ${EXTRA_LIBS})\n        ENDIF()\n    ENDIF()\n    \n    # Check for a 64-bit type\n    IF(NOT HAVE_STDINT_H)\n        IF(HAVE_WINDOWS_H)\n            CHECK_C_SOURCE_COMPILES(\"#define _WIN32_WINNT 0x0502\n                                     #include <windows.h>\n                                     __int64 foo;\n                                     int main() {return 0;}\" HAVE___INT64)\n        ENDIF()\n        IF(NOT HAVE___INT64)\n            IF(NOT SIZEOF_LONG MATCHES \"8\")\n                IF(NOT SIZEOF_LONG_LONG MATCHES \"8\")\n                    MESSAGE(FATAL_ERROR \"No 64-bit types found, please report!\")\n                ENDIF()\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    \n    \n    file(GLOB COMMON_OBJS \"common\/*.c\")\n    file(GLOB OPENAL_OBJS \"OpenAL32\/*.c\")\n    SET(ALC_OBJS  Alc\/ALc.c\n              Alc\/ALu.c\n              Alc\/alcConfig.c\n              Alc\/alcRing.c\n              Alc\/bs2b.c\n              Alc\/effects\/autowah.c\n              Alc\/effects\/chorus.c\n              Alc\/effects\/compressor.c\n              Alc\/effects\/dedicated.c\n              Alc\/effects\/distortion.c\n              Alc\/effects\/echo.c\n              Alc\/effects\/equalizer.c\n              Alc\/effects\/flanger.c\n              Alc\/effects\/modulator.c\n              Alc\/effects\/null.c\n              Alc\/effects\/reverb.c\n              Alc\/helpers.c\n              Alc\/bsinc.c\n              Alc\/hrtf.c\n              Alc\/panning.c\n              Alc\/mixer.c\n              Alc\/mixer_c.c\n    )\n    \n    \n    SET(CPU_EXTS \"Default\")\n    SET(HAVE_SSE        0)\n    SET(HAVE_SSE2       0)\n    SET(HAVE_SSE3       0)\n    SET(HAVE_SSE4_1     0)\n    SET(HAVE_NEON       0)\n    \n    SET(HAVE_ALSA       0)\n    SET(HAVE_OSS        0)\n    SET(HAVE_SOLARIS    0)\n    SET(HAVE_SNDIO      0)\n    SET(HAVE_QSA        0)\n    SET(HAVE_DSOUND     0)\n    SET(HAVE_MMDEVAPI   0)\n    SET(HAVE_WINMM      0)\n    SET(HAVE_PORTAUDIO  0)\n    SET(HAVE_PULSEAUDIO 0)\n    SET(HAVE_COREAUDIO  0)\n    SET(HAVE_OPENSL     0)\n    SET(HAVE_WAVE       0)\n    \n    # Check for SSE support\n    OPTION(ALSOFT_REQUIRE_SSE \"Require SSE support\" OFF)\n    CHECK_INCLUDE_FILE(xmmintrin.h HAVE_XMMINTRIN_H \"${SSE_SWITCH}\")\n    IF(HAVE_XMMINTRIN_H)\n        OPTION(ALSOFT_CPUEXT_SSE \"Enable SSE support\" ON)\n        IF(ALSOFT_CPUEXT_SSE)\n            IF(ALIGN_DECL OR HAVE_C11_ALIGNAS)\n                SET(HAVE_SSE 1)\n                SET(ALC_OBJS  ${ALC_OBJS} Alc\/mixer_sse.c)\n                IF(SSE_SWITCH)\n                    SET_SOURCE_FILES_PROPERTIES(Alc\/mixer_sse.c PROPERTIES\n                                                COMPILE_FLAGS \"${SSE_SWITCH}\")\n                ENDIF()\n                SET(CPU_EXTS \"${CPU_EXTS}, SSE\")\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_SSE AND NOT HAVE_SSE)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required SSE CPU extensions\")\n    ENDIF()\n    \n    OPTION(ALSOFT_REQUIRE_SSE2 \"Require SSE2 support\" OFF)\n    CHECK_INCLUDE_FILE(emmintrin.h HAVE_EMMINTRIN_H \"${SSE2_SWITCH}\")\n    IF(HAVE_EMMINTRIN_H)\n        OPTION(ALSOFT_CPUEXT_SSE2 \"Enable SSE2 support\" ON)\n        IF(HAVE_SSE AND ALSOFT_CPUEXT_SSE2)\n            IF(ALIGN_DECL OR HAVE_C11_ALIGNAS)\n                SET(HAVE_SSE2 1)\n                SET(ALC_OBJS  ${ALC_OBJS} Alc\/mixer_sse2.c)\n                IF(SSE2_SWITCH)\n                    SET_SOURCE_FILES_PROPERTIES(Alc\/mixer_sse2.c PROPERTIES\n                                                COMPILE_FLAGS \"${SSE2_SWITCH}\")\n                ENDIF()\n                SET(CPU_EXTS \"${CPU_EXTS}, SSE2\")\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_SSE2 AND NOT HAVE_SSE2)\n        MESSAGE(FATAL_ERROR \"Failed to enable required SSE2 CPU extensions\")\n    ENDIF()\n    \n    OPTION(ALSOFT_REQUIRE_SSE2 \"Require SSE3 support\" OFF)\n    CHECK_INCLUDE_FILE(pmmintrin.h HAVE_PMMINTRIN_H \"${SSE3_SWITCH}\")\n    IF(HAVE_EMMINTRIN_H)\n        OPTION(ALSOFT_CPUEXT_SSE3 \"Enable SSE3 support\" ON)\n        IF(HAVE_SSE2 AND ALSOFT_CPUEXT_SSE3)\n            IF(ALIGN_DECL OR HAVE_C11_ALIGNAS)\n                SET(HAVE_SSE3 1)\n                SET(ALC_OBJS  ${ALC_OBJS} Alc\/mixer_sse3.c)\n                IF(SSE2_SWITCH)\n                    SET_SOURCE_FILES_PROPERTIES(Alc\/mixer_sse3.c PROPERTIES\n                                                COMPILE_FLAGS \"${SSE3_SWITCH}\")\n                ENDIF()\n                SET(CPU_EXTS \"${CPU_EXTS}, SSE3\")\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_SSE3 AND NOT HAVE_SSE3)\n        MESSAGE(FATAL_ERROR \"Failed to enable required SSE3 CPU extensions\")\n    ENDIF()\n    \n    OPTION(ALSOFT_REQUIRE_SSE4_1 \"Require SSE4.1 support\" OFF)\n    CHECK_INCLUDE_FILE(smmintrin.h HAVE_SMMINTRIN_H \"${SSE4_1_SWITCH}\")\n    IF(HAVE_SMMINTRIN_H)\n        OPTION(ALSOFT_CPUEXT_SSE4_1 \"Enable SSE4.1 support\" ON)\n        IF(HAVE_SSE2 AND ALSOFT_CPUEXT_SSE4_1)\n            IF(ALIGN_DECL OR HAVE_C11_ALIGNAS)\n                SET(HAVE_SSE4_1 1)\n                SET(ALC_OBJS  ${ALC_OBJS} Alc\/mixer_sse41.c)\n                IF(SSE4_1_SWITCH)\n                    SET_SOURCE_FILES_PROPERTIES(Alc\/mixer_sse41.c PROPERTIES\n                                                COMPILE_FLAGS \"${SSE4_1_SWITCH}\")\n                ENDIF()\n                SET(CPU_EXTS \"${CPU_EXTS}, SSE4.1\")\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_SSE4_1 AND NOT HAVE_SSE4_1)\n        MESSAGE(FATAL_ERROR \"Failed to enable required SSE4.1 CPU extensions\")\n    ENDIF()\n    \n    # Check for ARM Neon support\n    OPTION(ALSOFT_REQUIRE_NEON \"Require ARM Neon support\" OFF)\n    CHECK_INCLUDE_FILE(arm_neon.h HAVE_ARM_NEON_H)\n    IF(HAVE_ARM_NEON_H)\n        OPTION(ALSOFT_CPUEXT_NEON \"Enable ARM Neon support\" ON)\n        IF(ALSOFT_CPUEXT_NEON)\n            SET(HAVE_NEON 1)\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/mixer_neon.c)\n            SET(CPU_EXTS \"${CPU_EXTS}, Neon\")\n            SET_SOURCE_FILES_PROPERTIES(Alc\/mixer_neon.c PROPERTIES COMPILE_FLAGS -mfpu=neon)\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_NEON AND NOT HAVE_NEON)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required ARM Neon CPU extensions\")\n    ENDIF()\n    \n    \n    IF(WIN32 OR HAVE_DLFCN_H)\n        SET(IS_LINKED \"\")\n        MACRO(ADD_BACKEND_LIBS _LIBS)\n        ENDMACRO()\n    ELSE()\n        SET(IS_LINKED \" (linked)\")\n        MACRO(ADD_BACKEND_LIBS _LIBS)\n            SET(EXTRA_LIBS ${_LIBS} ${EXTRA_LIBS})\n        ENDMACRO()\n    ENDIF()\n    \n    SET(BACKENDS \"\")\n    SET(ALC_OBJS  ${ALC_OBJS}\n                  Alc\/backends\/base.c\n                  # Default backends, always available\n                  Alc\/backends\/loopback.c\n                  Alc\/backends\/null.c\n    )\n    \n    # Check ALSA backend\n    OPTION(ALSOFT_REQUIRE_ALSA \"Require ALSA backend\" OFF)\n    FIND_PACKAGE(ALSA)\n    IF(ALSA_FOUND)\n        OPTION(ALSOFT_BACKEND_ALSA \"Enable ALSA backend\" ON)\n        IF(ALSOFT_BACKEND_ALSA)\n            SET(HAVE_ALSA 1)\n            SET(BACKENDS  \"${BACKENDS} ALSA${IS_LINKED},\")\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/alsa.c)\n            ADD_BACKEND_LIBS(${ALSA_LIBRARIES})\n            IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n                INCLUDE_DIRECTORIES(${ALSA_INCLUDE_DIRS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_ALSA AND NOT HAVE_ALSA)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required ALSA backend\")\n    ENDIF()\n    \n    # Check OSS backend\n    OPTION(ALSOFT_REQUIRE_OSS \"Require OSS backend\" OFF)\n    FIND_PACKAGE(OSS)\n    IF(OSS_FOUND)\n        OPTION(ALSOFT_BACKEND_OSS \"Enable OSS backend\" ON)\n        IF(ALSOFT_BACKEND_OSS)\n            SET(HAVE_OSS 1)\n            SET(BACKENDS  \"${BACKENDS} OSS,\")\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/oss.c)\n            IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n                INCLUDE_DIRECTORIES(${OSS_INCLUDE_DIRS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_OSS AND NOT HAVE_OSS)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required OSS backend\")\n    ENDIF()\n    \n    # Check Solaris backend\n    OPTION(ALSOFT_REQUIRE_SOLARIS \"Require Solaris backend\" OFF)\n    FIND_PACKAGE(AudioIO)\n    IF(AUDIOIO_FOUND)\n        OPTION(ALSOFT_BACKEND_SOLARIS \"Enable Solaris backend\" ON)\n        IF(ALSOFT_BACKEND_SOLARIS)\n            SET(HAVE_SOLARIS 1)\n            SET(BACKENDS  \"${BACKENDS} Solaris,\")\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/solaris.c)\n            IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n                INCLUDE_DIRECTORIES(${AUDIOIO_INCLUDE_DIRS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_SOLARIS AND NOT HAVE_SOLARIS)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required Solaris backend\")\n    ENDIF()\n    \n    # Check SndIO backend\n    OPTION(ALSOFT_REQUIRE_SNDIO \"Require SndIO backend\" OFF)\n    FIND_PACKAGE(SoundIO)\n    IF(SOUNDIO_FOUND)\n        OPTION(ALSOFT_BACKEND_SNDIO \"Enable SndIO backend\" ON)\n        IF(ALSOFT_BACKEND_SNDIO)\n            SET(HAVE_SNDIO 1)\n            SET(BACKENDS  \"${BACKENDS} SndIO (linked),\")\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/sndio.c)\n            SET(EXTRA_LIBS ${SOUNDIO_LIBRARIES} ${EXTRA_LIBS})\n            IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n                INCLUDE_DIRECTORIES(${SOUNDIO_INCLUDE_DIRS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_SNDIO AND NOT HAVE_SNDIO)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required SndIO backend\")\n    ENDIF()\n    \n    # Check QSA backend\n    OPTION(ALSOFT_REQUIRE_QSA \"Require QSA backend\" OFF)\n    FIND_PACKAGE(QSA)\n    IF(QSA_FOUND)\n        OPTION(ALSOFT_BACKEND_QSA \"Enable QSA backend\" ON)\n        IF(ALSOFT_BACKEND_QSA)\n            SET(HAVE_QSA 1)\n            SET(BACKENDS  \"${BACKENDS} QSA (linked),\")\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/qsa.c)\n            SET(EXTRA_LIBS ${QSA_LIBRARIES} ${EXTRA_LIBS})\n            IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n                INCLUDE_DIRECTORIES(${QSA_INCLUDE_DIRS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_QSA AND NOT HAVE_QSA)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required QSA backend\")\n    ENDIF()\n    \n    # Check Windows-only backends\n    OPTION(ALSOFT_REQUIRE_WINMM \"Require Windows Multimedia backend\" OFF)\n    OPTION(ALSOFT_REQUIRE_DSOUND \"Require DirectSound backend\" OFF)\n    OPTION(ALSOFT_REQUIRE_MMDEVAPI \"Require MMDevApi backend\" OFF)\n    IF(HAVE_WINDOWS_H)\n        # Check MMSystem backend\n        CHECK_INCLUDE_FILES(\"windows.h;mmsystem.h\" HAVE_MMSYSTEM_H -D_WIN32_WINNT=0x0502)\n        IF(HAVE_MMSYSTEM_H)\n            CHECK_SHARED_FUNCTION_EXISTS(waveOutOpen \"windows.h;mmsystem.h\" winmm \"\" HAVE_LIBWINMM)\n            IF(HAVE_LIBWINMM)\n                OPTION(ALSOFT_BACKEND_WINMM \"Enable Windows Multimedia backend\" ON)\n                IF(ALSOFT_BACKEND_WINMM)\n                    SET(HAVE_WINMM 1)\n                    SET(BACKENDS  \"${BACKENDS} WinMM,\")\n                    SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/winmm.c)\n                    SET(EXTRA_LIBS winmm ${EXTRA_LIBS})\n                ENDIF()\n            ENDIF()\n        ENDIF()\n    \n        # Check DSound backend\n        FIND_PACKAGE(DSound)\n        IF(DSOUND_FOUND)\n            OPTION(ALSOFT_BACKEND_DSOUND \"Enable DirectSound backend\" ON)\n            IF(ALSOFT_BACKEND_DSOUND)\n                SET(HAVE_DSOUND 1)\n                SET(BACKENDS  \"${BACKENDS} DirectSound${IS_LINKED},\")\n                SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/dsound.c)\n                ADD_BACKEND_LIBS(${DSOUND_LIBRARIES})\n                IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n                    INCLUDE_DIRECTORIES(${DSOUND_INCLUDE_DIRS})\n                ENDIF()\n            ENDIF()\n        ENDIF()\n    \n        # Check for MMDevApi backend\n        CHECK_INCLUDE_FILE(mmdeviceapi.h HAVE_MMDEVICEAPI_H)\n        IF(HAVE_MMDEVICEAPI_H)\n            OPTION(ALSOFT_BACKEND_MMDEVAPI \"Enable MMDevApi backend\" ON)\n            IF(ALSOFT_BACKEND_MMDEVAPI)\n                SET(HAVE_MMDEVAPI 1)\n                SET(BACKENDS  \"${BACKENDS} MMDevApi,\")\n                SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/mmdevapi.c)\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_WINMM AND NOT HAVE_WINMM)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required WinMM backend\")\n    ENDIF()\n    IF(ALSOFT_REQUIRE_DSOUND AND NOT HAVE_DSOUND)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required DSound backend\")\n    ENDIF()\n    IF(ALSOFT_REQUIRE_MMDEVAPI AND NOT HAVE_MMDEVAPI)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required MMDevApi backend\")\n    ENDIF()\n    \n    # Check PortAudio backend\n    OPTION(ALSOFT_REQUIRE_PORTAUDIO \"Require PortAudio backend\" OFF)\n    FIND_PACKAGE(PortAudio)\n    IF(PORTAUDIO_FOUND)\n        OPTION(ALSOFT_BACKEND_PORTAUDIO \"Enable PortAudio backend\" ON)\n        IF(ALSOFT_BACKEND_PORTAUDIO)\n            SET(HAVE_PORTAUDIO 1)\n            SET(BACKENDS  \"${BACKENDS} PortAudio${IS_LINKED},\")\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/portaudio.c)\n            ADD_BACKEND_LIBS(${PORTAUDIO_LIBRARIES})\n            IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n                INCLUDE_DIRECTORIES(${PORTAUDIO_INCLUDE_DIRS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_PORTAUDIO AND NOT HAVE_PORTAUDIO)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required PortAudio backend\")\n    ENDIF()\n    \n    # Check PulseAudio backend\n    OPTION(ALSOFT_REQUIRE_PULSEAUDIO \"Require PulseAudio backend\" OFF)\n    FIND_PACKAGE(PulseAudio)\n    IF(PULSEAUDIO_FOUND)\n        OPTION(ALSOFT_BACKEND_PULSEAUDIO \"Enable PulseAudio backend\" ON)\n        IF(ALSOFT_BACKEND_PULSEAUDIO)\n            SET(HAVE_PULSEAUDIO 1)\n            SET(BACKENDS  \"${BACKENDS} PulseAudio${IS_LINKED},\")\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/pulseaudio.c)\n            ADD_BACKEND_LIBS(${PULSEAUDIO_LIBRARIES})\n            IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n                INCLUDE_DIRECTORIES(${PULSEAUDIO_INCLUDE_DIRS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_PULSEAUDIO AND NOT HAVE_PULSEAUDIO)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required PulseAudio backend\")\n    ENDIF()\n    \n    # Check JACK backend\n    OPTION(ALSOFT_REQUIRE_JACK \"Require JACK backend\" OFF)\n    FIND_PACKAGE(JACK)\n    IF(JACK_FOUND)\n        OPTION(ALSOFT_BACKEND_JACK \"Enable JACK backend\" ON)\n        IF(ALSOFT_BACKEND_JACK)\n            SET(HAVE_JACK 1)\n            SET(BACKENDS  \"${BACKENDS} JACK${IS_LINKED},\")\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/jack.c)\n            ADD_BACKEND_LIBS(${JACK_LIBRARIES})\n            IF(CMAKE_VERSION VERSION_LESS \"2.8.8\")\n                INCLUDE_DIRECTORIES(${JACK_INCLUDE_DIRS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_JACK AND NOT HAVE_JACK)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required JACK backend\")\n    ENDIF()\n    \n    # Check CoreAudio backend\n    OPTION(ALSOFT_REQUIRE_COREAUDIO \"Require CoreAudio backend\" OFF)\n    FIND_LIBRARY(COREAUDIO_FRAMEWORK\n                 NAMES CoreAudio\n                 PATHS \/System\/Library\/Frameworks\n    )\n    IF(COREAUDIO_FRAMEWORK)\n        OPTION(ALSOFT_BACKEND_COREAUDIO \"Enable CoreAudio backend\" ON)\n        IF(ALSOFT_BACKEND_COREAUDIO)\n            SET(HAVE_COREAUDIO 1)\n            SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/coreaudio.c)\n            SET(BACKENDS  \"${BACKENDS} CoreAudio,\")\n            SET(EXTRA_LIBS ${COREAUDIO_FRAMEWORK} ${EXTRA_LIBS})\n            SET(EXTRA_LIBS \/System\/Library\/Frameworks\/AudioUnit.framework ${EXTRA_LIBS})\n            SET(EXTRA_LIBS \/System\/Library\/Frameworks\/ApplicationServices.framework ${EXTRA_LIBS})\n    \n            # Some versions of OSX may need the AudioToolbox framework. Add it if\n            # it's found.\n            FIND_LIBRARY(AUDIOTOOLBOX_LIBRARY\n                         NAMES AudioToolbox\n                         PATHS ~\/Library\/Frameworks\n                               \/Library\/Frameworks\n                               \/System\/Library\/Frameworks\n                        )\n            IF(AUDIOTOOLBOX_LIBRARY)\n                SET(EXTRA_LIBS ${AUDIOTOOLBOX_LIBRARY} ${EXTRA_LIBS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_COREAUDIO AND NOT HAVE_COREAUDIO)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required CoreAudio backend\")\n    ENDIF()\n    \n    # Check for OpenSL (Android) backend\n    OPTION(ALSOFT_REQUIRE_OPENSL \"Require OpenSL backend\" OFF)\n    CHECK_INCLUDE_FILES(\"SLES\/OpenSLES.h;SLES\/OpenSLES_Android.h\" HAVE_SLES_OPENSLES_ANDROID_H)\n    IF(HAVE_SLES_OPENSLES_ANDROID_H)\n        CHECK_SHARED_FUNCTION_EXISTS(slCreateEngine \"SLES\/OpenSLES.h\" OpenSLES \"\" HAVE_LIBOPENSLES)\n        IF(HAVE_LIBOPENSLES)\n            OPTION(ALSOFT_BACKEND_OPENSL \"Enable OpenSL backend\" ON)\n            IF(ALSOFT_BACKEND_OPENSL)\n                SET(HAVE_OPENSL 1)\n                SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/opensl.c)\n                SET(BACKENDS  \"${BACKENDS} OpenSL,\")\n                SET(EXTRA_LIBS OpenSLES ${EXTRA_LIBS})\n            ENDIF()\n        ENDIF()\n    ENDIF()\n    IF(ALSOFT_REQUIRE_OPENSL AND NOT HAVE_OPENSL)\n        MESSAGE(FATAL_ERROR \"Failed to enabled required OpenSL backend\")\n    ENDIF()\n    \n    # Optionally enable the Wave Writer backend\n    OPTION(ALSOFT_BACKEND_WAVE \"Enable Wave Writer backend\" ON)\n    IF(ALSOFT_BACKEND_WAVE)\n        SET(HAVE_WAVE 1)\n        SET(ALC_OBJS  ${ALC_OBJS} Alc\/backends\/wave.c)\n        SET(BACKENDS  \"${BACKENDS} WaveFile,\")\n    ENDIF()\n    \n    # This is always available\n    SET(BACKENDS  \"${BACKENDS} Null\")\n    \n    option(ALSOFT_EMBED_HRTF_DATA \"Embed the HRTF data files (increases library footprint)\" OFF)\n    if(ALSOFT_EMBED_HRTF_DATA)\n        if(WIN32)\n            set(ALC_OBJS  ${ALC_OBJS} Alc\/hrtf_res.rc)\n        else()\n            set(FILENAMES default-44100.mhr default-48000.mhr)\n            foreach(FILENAME ${FILENAMES})\n                set(outfile ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}\/${FILENAME}${CMAKE_C_OUTPUT_EXTENSION})\n                add_custom_command(OUTPUT ${outfile}\n                    DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}\/hrtf\/${FILENAME}\"\n                    WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\/hrtf\"\n                    COMMAND \"${CMAKE_LINKER}\" -r -b binary -o \"${outfile}\" ${FILENAME}\n                    COMMAND \"${CMAKE_OBJCOPY}\" --rename-section .data=.rodata,alloc,load,readonly,data,contents \"${outfile}\" \"${outfile}\"\n                    COMMENT \"Generating ${FILENAME}${CMAKE_C_OUTPUT_EXTENSION}\"\n                    VERBATIM\n                )\n                set(ALC_OBJS  ${ALC_OBJS} ${outfile})\n            endforeach()\n            unset(outfile)\n            unset(FILENAMES)\n        endif()\n    endif()\n    \n    # End configuration\n    CONFIGURE_FILE(\n        \"${OpenAL_SOURCE_DIR}\/config.h.in\"\n        \"${OpenAL_BINARY_DIR}\/config.h\")\n    \n    set(src ${COMMON_OBJS} ${OPENAL_OBJS} ${ALC_OBJS})\n\npost_target: |\n    SET_PROPERTY(TARGET ${this} APPEND PROPERTY COMPILE_FLAGS ${EXTRA_CFLAGS})\n    SET_PROPERTY(TARGET ${this} APPEND PROPERTY COMPILE_DEFINITIONS AL_BUILD_LIBRARY AL_ALEXT_PROTOTYPES)\n    IF(WIN32 AND ALSOFT_NO_UID_DEFS)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY COMPILE_DEFINITIONS AL_NO_UID_DEFS)\n    ENDIF()\n    SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES \"${OpenAL_SOURCE_DIR}\/OpenAL32\/Include\" \"${OpenAL_SOURCE_DIR}\/Alc\")\n    IF(HAVE_ALSA)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES ${ALSA_INCLUDE_DIRS})\n    ENDIF()\n    IF(HAVE_OSS)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES ${OSS_INCLUDE_DIRS})\n    ENDIF()\n    IF(HAVE_SOLARIS)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES ${AUDIOIO_INCLUDE_DIRS})\n    ENDIF()\n    IF(HAVE_SNDIO)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES ${SOUNDIO_INCLUDE_DIRS})\n    ENDIF()\n    IF(HAVE_QSA)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES ${QSA_INCLUDE_DIRS})\n    ENDIF()\n    IF(HAVE_DSOUND)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES ${DSOUND_INCLUDE_DIRS})\n    ENDIF()\n    IF(HAVE_PORTAUDIO)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES ${PORTAUDIO_INCLUDE_DIRS})\n    ENDIF()\n    IF(HAVE_PULSEAUDIO)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES ${PULSEAUDIO_INCLUDE_DIRS})\n    ENDIF()\n    IF(HAVE_JACK)\n        SET_PROPERTY(TARGET ${this} APPEND PROPERTY INCLUDE_DIRECTORIES ${JACK_INCLUDE_DIRS})\n    ENDIF()\n    \n    TARGET_LINK_LIBRARIES(${this} PUBLIC ${EXTRA_LIBS})\n\ncheck_function_exists:\n    -   aligned_alloc\n    -   posix_memalign\n    -   _aligned_malloc\n\ncheck_include_exists:\n    -   file: cpuid.h\n        variable: HAVE_CPUID_H\n        cpp: false\n    -   file: dirent.h\n        variable: HAVE_DIRENT_H\n        cpp: false\n    -   file: fenv.h\n        variable: HAVE_FENV_H\n        cpp: false\n    -   file: float.h\n        variable: HAVE_FLOAT_H\n        cpp: false\n    -   file: guiddef.h\n        variable: HAVE_GUIDDEF_H\n        cpp: false\n    -   file: ieeefp.h\n        variable: HAVE_IEEEFP_H\n        cpp: false\n    -   file: intrin.h\n        variable: HAVE_INTRIN_H\n        cpp: false\n    -   file: malloc.h\n        variable: HAVE_MALLOC_H\n        cpp: false\n    -   file: stdalign.h\n        variable: HAVE_STDALIGN_H\n        cpp: false\n    -   file: stdbool.h\n        variable: HAVE_STDBOOL_H\n        cpp: false\n    -   file: stdint.h\n        variable: HAVE_STDINT_H\n        cpp: false\n    -   file: strings.h\n        variable: HAVE_STRINGS_H\n        cpp: false\n    -   file: sys\/sysconf.h\n        variable: HAVE_SYS_SYSCONF_H\n        cpp: false\n\ncheck_type_size:\n    -   long\n    -   long long\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/kcat\/openal-soft",
            "tag": "openal-soft-1.17.2"
        }
    },
    "version": "1.17.2",
    "sha256": "3546ba785e3f79e3837f5af8f6d95c90969f72633d362917a6dfddbfb09c4719",
    "created": "2017-01-04 18:17:51.641632"
}

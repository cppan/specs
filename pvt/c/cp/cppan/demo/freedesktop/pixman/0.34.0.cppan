{
    "project": "pvt.cppan.demo.freedesktop.pixman",
    "cppan": "source:\n    remote: https:\/\/www.cairographics.org\/releases\/pixman-0.34.0.tar.gz\n\nversion: 0.34.0\n\ntype: library\n\nstatic_only: true\n\nfiles:\n    -   pixman\/.*\\.c\n    -   pixman\/.*\\.h\n\nexclude_from_build:\n    -   pixman-region.c\n    -   pixman-vmx.c\n    -   pixman-arm-neon.c\n    -   pixman-arm-simd.c\n    -   pixman-mips-dspr2.c\n\ninclude_directories:\n    public: pixman\n\npost_sources: |\n    if (USE_VMX)\n        add_src(pixman-vmx.c)\n    endif()\n    \n    if (USE_ARM_NEON)\n        add_src(pixman-arm-neon.c)\n    endif()\n    \n    if (USE_ARM_SIMD)\n        add_src(pixman-arm-simd.c)\n    endif()\n    \n    if (USE_MIPS_DSPR2)\n        add_src(pixman-mips-dspr2.c)\n    endif()\n    \n\ncheck_function_exists:\n    -   alarm\n    -   getisax\n    -   getpagesize\n    -   gettimeofday\n    -   mmap\n    -   mprotect\n    -   posix_memalign\n    -   sigaction\n\ncheck_include_exists:\n    -   file: fenv.h\n        variable: HAVE_FENV_H\n        cpp: false\n    -   file: sys\/mman.h\n        variable: HAVE_SYS_MMAN_H\n        cpp: false\n\ncheck_type_size:\n    -   long\n\ncheck_library_function:\n    -   function: feenableexcept\n        library: m\n    -   function: pixman_version_string\n        library: pixman-1\n\ncheck_c_source_compiles:\n    USE_ARM_IWMMXT:\n        text: \"\\n#ifndef __arm__\\n#error \\\"IWMMXT is only available on ARM\\\"\\n#endif\\n#ifndef __IWMMXT__\\n#error \\\"IWMMXT not enabled (with -march=iwmmxt)\\\"\\n#endif\\n#if defined(__GNUC__) && (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 8))\\n#error \\\"Need GCC >= 4.8 for IWMMXT intrinsics\\\"\\n#endif\\n#include <mmintrin.h>\\nint main () {\\n\\tunion {\\n\\t\\t__m64 v;\\n\\t\\tchar c[8];\\n\\t} a = { .c = {1, 2, 3, 4, 5, 6, 7, 8} };\\n\\tint b = 4;\\n\\t__m64 c = _mm_srli_si64 (a.v, b);\\n}\"\n        invert: false\n    USE_ARM_NEON:\n        text: \"\\n.text\\n.fpu neon\\n.arch armv7a\\n.object_arch armv4\\n.eabi_attribute 10, 0\\n.arm\\n.altmacro\\n#ifndef __ARM_EABI__\\n#error EABI is required (to be sure that calling conventions are compatible)\\n#endif\\npld [r0]\\nvmovn.u16 d0, q0\"\n        invert: false\n    USE_ARM_SIMD:\n        text: \"\\n.text\\n.arch armv6\\n.object_arch armv4\\n.arm\\n.altmacro\\n#ifndef __ARM_EABI__\\n#error EABI is required (to be sure that calling conventions are compatible)\\n#endif\\npld [r0]\\nuqadd8 r0, r0, r0\"\n        invert: false\n    USE_GCC_INLINE_ASM:\n        text: \"\\nint main () {\\n    \/* Most modern architectures have a NOP instruction, so this is a fairly generic test. *\/\\n\\tasm volatile ( \\\"\\\\tnop\\\\n\\\" : : : \\\"cc\\\", \\\"memory\\\" );\\n    return 0;\\n}\"\n        invert: false\n    USE_LOONGSON_MMI:\n        text: \"\\n#ifndef __mips_loongson_vector_rev\\n#error \\\"Loongson Multimedia Instructions are only available on Loongson\\\"\\n#endif\\n#if defined(__GNUC__) && (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 4))\\n#error \\\"Need GCC >= 4.4 for Loongson MMI compilation\\\"\\n#endif\\n#include \\\"pixman\/loongson-mmintrin.h\\\"\\nint main () {\\n    union {\\n        __m64 v;\\n        char c[8];\\n    } a = { .c = {1, 2, 3, 4, 5, 6, 7, 8} };\\n    int b = 4;\\n    __m64 c = _mm_srli_pi16 (a.v, b);\\n    return 0;\\n}\"\n        invert: false\n    USE_MIPS_DSPR2:\n        text: \"\\n#if !(defined(__mips__) &&  __mips_isa_rev >= 2)\\n#error MIPS DSPr2 is currently only available on MIPS32r2 platforms.\\n#endif\\nint\\nmain ()\\n{\\n    int c = 0, a = 0, b = 0;\\n    __asm__ __volatile__ (\\n        \\\"precr.qb.ph %[c], %[a], %[b]          \\\\n\\\\t\\\"\\n        : [c] \\\"=r\\\" (c)\\n        : [a] \\\"r\\\" (a), [b] \\\"r\\\" (b)\\n    );\\n    return c;\\n}\"\n        invert: false\n    USE_SSE2:\n        text: \"\\n#if defined(__GNUC__) && (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 2))\\n#   if !defined(__amd64__) && !defined(__x86_64__)\\n#      error \\\"Need GCC >= 4.2 for SSE2 intrinsics on x86\\\"\\n#   endif\\n#endif\\n#include <mmintrin.h>\\n#include <xmmintrin.h>\\n#include <emmintrin.h>\\nint param;\\nint main () {\\n    __m128i a = _mm_set1_epi32 (param), b = _mm_set1_epi32 (param + 1), c;\\n\\tc = _mm_xor_si128 (a, b);\\n    return _mm_cvtsi128_si32(c);\\n}\"\n        invert: false\n    USE_SSSE3:\n        text: \"\\n#include <mmintrin.h>\\n#include <xmmintrin.h>\\n#include <emmintrin.h>\\n#include <tmmintrin.h>\\nint param;\\nint main () {\\n    __m128i a = _mm_set1_epi32 (param), b = _mm_set1_epi32 (param + 1), c;\\n    c = _mm_maddubs_epi16 (a, b);\\n    return _mm_cvtsi128_si32(c);\\n}\"\n        invert: false\n    USE_VMX:\n        text: \"\\n#if defined(__GNUC__) && (__GNUC__ < 3 || (__GNUC__ == 3 && __GNUC_MINOR__ < 4))\\n#error \\\"Need GCC >= 3.4 for sane altivec support\\\"\\n#endif\\n#include <altivec.h>\\nint main () {\\n    vector unsigned int v = vec_splat_u32 (1);\\n    v = vec_sub (v, v);\\n    return 0;\\n}\"\n        invert: false\n    USE_X86_MMX:\n        text: \"\\n#if defined(__GNUC__) && (__GNUC__ < 3 || (__GNUC__ == 3 && __GNUC_MINOR__ < 4))\\n#error \\\"Need GCC >= 3.4 for MMX intrinsics\\\"\\n#endif\\n#include <mmintrin.h>\\n#include <stdint.h>\\n\\n\/* Check support for block expressions *\/\\n#define _mm_shuffle_pi16(A, N)\\t\\t\\t\\t\\t\\t\\\\\\n    ({\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\\\\n\\t__m64 ret;\\t\\t\\t\\t\\t\\t\\t\\\\\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\\\\n\\t\/* Some versions of clang will choke on K *\/ \\t\\t\\t\\\\\\n\\tasm (\\\"pshufw %2, %1, %0\\\\n\\\\t\\\"\\t\\t\\t\\t\\t\\\\\\n\\t     : \\\"=y\\\" (ret)\\t\\t\\t\\t\\t\\t\\\\\\n\\t     : \\\"y\\\" (A), \\\"K\\\" ((const int8_t)N)\\t\\t\\t\\t\\\\\\n\\t);\\t\\t\\t\\t\\t\\t\\t\\t\\\\\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\\\\n\\tret;\\t\\t\\t\\t\\t\\t\\t\\t\\\\\\n    })\\n\\nint main () {\\n    __m64 v = _mm_cvtsi32_si64 (1);\\n    __m64 w;\\n\\n    w = _mm_shuffle_pi16(v, 5);\\n\\n    \/* Some versions of clang will choke on this *\/\\n    asm (\\\"pmulhuw %1, %0\\\\n\\\\t\\\"\\n\\t: \\\"+y\\\" (w)\\n\\t: \\\"y\\\" (v)\\n    );\\n\\n    return _mm_cvtsi64_si32 (v);\\n}\"\n        invert: false\n\ncheck_decl_exists:\n    -   FE_DIVBYZERO\n    -   __amd64\n    -   __SUNPRO_C\n\n",
    "version": "0.34.0",
    "source": {
        "remote": {
            "url": "https:\/\/www.cairographics.org\/releases\/pixman-0.34.0.tar.gz"
        }
    },
    "sha256": "5ecfbffb9c86d3bc189c7ca8657314a3b5c52c8efc32f2ad5179c2bd0708b680",
    "created": "2016-12-05 10:31:14.344828"
}

{
    "project": "pvt.cppan.demo.c_ares",
    "cppan": "source:\n    git: https:\/\/github.com\/c-ares\/c-ares\n    branch: master\n\nversion: master\n\ntype: library\n\nfiles:\n    -   \"[^\/]*\\\\.c\"\n    -   \"[^\/]*\\\\.h\"\n    -   ares_build.h.cmake\n    -   ares_config.h.cmake\n\nexclude_from_package:\n    -   acountry.c\n    -   adig.c\n    -   ahost.c\n\noptions:\n    any:\n        definitions:\n            private:\n                -   CARES_BUILDING_LIBRARY\n                -   HAVE_CONFIG_H\n                -   HAVE_RECV\n                -   HAVE_RECVFROM\n                -   HAVE_SEND\n                -   HAVE_SENDTO\n                -   HAVE_STRUCT_ADDRINFO\n                -   HAVE_STRUCT_SOCKADDR_IN6\n                -   HAVE_STRUCT_TIMEVAL\n            unix:\n                private:\n                    -   HAVE_FCNTL_O_NONBLOCK\n            win32:\n                private:\n                    -   HAVE_IOCTLSOCKET_FIONBIO\n    static:\n        definitions:\n            public:\n                -   CARES_STATICLIB\n\npost_sources: |\n    ################################################################################\n    # recv, recvfrom, send, getnameinfo, gethostname\n    # ARGUMENTS AND RETURN VALUES\n    #\n    # The AutoTools build tries to be really thorough here.  So much so that it\n    # takes forever.  We really don't want to do that.  Lets make some educated\n    # guesses based on datatypes we have available, and for others, use some 'sane'\n    # defaults.  This should be much quicker and nearly as accurate ... and even\n    # if not, it probably won't matter in the least.\n    \n    IF (HAVE_SSIZE_T AND HAVE_SOCKLEN_T)\n        # If we have ssize_t and socklen_t, the API is usually sane and uses ssize_t and size_t for lengths\n        SET (RECVFROM_TYPE_RETV ssize_t)\n        SET (RECVFROM_TYPE_ARG3 size_t)\n    ELSE ()\n        SET (RECVFROM_TYPE_RETV int)\n        SET (RECVFROM_TYPE_ARG3 int)\n    ENDIF ()\n    \n    IF (HAVE_TYPE_SOCKET)\n        # If the SOCKET type is defined, it uses socket ... should be windows only\n        SET (RECVFROM_TYPE_ARG1 SOCKET)\n    ELSE ()\n        SET (RECVFROM_TYPE_ARG1 int)\n    ENDIF()\n    \n    IF (HAVE_SOCKLEN_T)\n        # If we have socklen_t the APIs pretty much always actually use it\n        SET (RECVFROM_TYPE_ARG6 \"socklen_t *\")\n        SET (GETNAMEINFO_TYPE_ARG2 socklen_t)\n        SET (GETNAMEINFO_TYPE_ARG46 socklen_t)\n    ELSE ()\n        SET (RECVFROM_TYPE_ARG6 \"int *\")\n        SET (GETNAMEINFO_TYPE_ARG2 int)\n        SET (GETNAMEINFO_TYPE_ARG46 int)\n    ENDIF ()\n    \n    # Functions are typically consistent so the equivalent fields map ... equivalently\n    SET (RECV_TYPE_RETV ${RECVFROM_TYPE_RETV})\n    SET (SEND_TYPE_RETV ${RECVFROM_TYPE_RETV})\n    SET (RECV_TYPE_ARG1 ${RECVFROM_TYPE_ARG1})\n    SET (SEND_TYPE_ARG1 ${RECVFROM_TYPE_ARG1})\n    SET (RECV_TYPE_ARG3 ${RECVFROM_TYPE_ARG3})\n    SET (SEND_TYPE_ARG3 ${RECVFROM_TYPE_ARG3})\n    SET (GETHOSTNAME_TYPE_ARG2 ${RECVFROM_TYPE_ARG3})\n    \n    # These should always be \"sane\" values to use always\n    SET (RECVFROM_QUAL_ARG5 )\n    SET (RECVFROM_TYPE_ARG2 \"void *\")\n    SET (RECVFROM_TYPE_ARG4 int)\n    SET (RECVFROM_TYPE_ARG5 \"struct sockaddr *\")\n    SET (RECV_TYPE_ARG2 \"void *\")\n    SET (RECV_TYPE_ARG4 int)\n    SET (GETNAMEINFO_TYPE_ARG1 \"struct sockaddr *\")\n    SET (GETNAMEINFO_TYPE_ARG7 int)\n    SET (SEND_TYPE_ARG2 \"void *\")\n    SET (SEND_TYPE_ARG4 int)\n    ################################################################################\n    \n    \n    # HAVE_CXX11  ??\n    # HAVE_SIG_ATOMIC_T_VOLATILE  ??\n    \n    \n    # Set a few variables by hand that C-Ares wants, logically, based on detection\n    # data.\n    \n    IF (HAVE_SOCKLEN_T)\n        Set (CARES_TYPEOF_ARES_SOCKLEN_T \"socklen_t\")\n    ELSE ()\n        Set (CARES_TYPEOF_ARES_SOCKLEN_T \"int\")\n    ENDIF ()\n    \n    IF (HAVE_FCNTL AND HAVE_O_NONBLOCK)\n        SET (HAVE_FCNTL_O_NONBLOCK 1)\n    ENDIF ()\n    \n    IF (HAVE_IOCTL AND HAVE_FIONBIO)\n        SET (HAVE_IOCTL_FIONBIO 1)\n    ENDIF ()\n    \n    IF (HAVE_IOCTLSOCKET AND HAVE_FIONBIO)\n        SET (HAVE_IOCTLSOCKET_FIONBIO 1)\n    ENDIF ()\n    \n    IF (HAVE_IOCTLSOCKET_CAMEL AND HAVE_FIONBIO)\n        SET (HAVE_IOCTLSOCKET_CAMEL_FIONBIO 1)\n    ENDIF ()\n    \n    IF (HAVE_GETADDRINFO)\n        IF (CMAKE_SYSTEM_NAME STREQUAL \"Darwin\" OR\n            CMAKE_SYSTEM_NAME STREQUAL \"HPUX\" OR\n            CMAKE_SYSTEM_NAME STREQUAL \"NetBSD\" OR\n            CMAKE_SYSTEM_NAME STREQUAL \"SunOS\" OR\n            CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\" OR\n            CMAKE_SYSTEM_NAME STREQUAL \"AIX\" OR\n            WIN32)\n                SET (HAVE_GETADDRINFO_THREADSAFE 1)\n        ENDIF ()\n    ENDIF ()\n    \n    IF (HAVE_TIME_H AND HAVE_SYS_TIME_H)\n        SET (TIME_WITH_SYS_TIME 1)\n    ENDIF ()\n    \n    IF (HAVE_GETSERVBYPORT_R)\n        # TODO : Should probably autodetect\n        IF (CMAKE_SYSTEM_NAME STREQUAL \"SunOS\")\n            SET (GETSERVBYPORT_R_ARGS 5)\n        ELSEIF (CMAKE_SYSTEM_NAME STREQUAL \"AIX\" OR\n            CMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\")\n            SET (GETSERVBYPORT_R_ARGS 4)\n        ELSE ()\n            # Probably linux\n            SET (GETSERVBYPORT_R_ARGS 6)\n        ENDIF ()\n    ENDIF ()\n    \n    # Set some aliases used for ares_build.h\n    IF (HAVE_SYS_TYPES_H)\n        SET (CARES_HAVE_SYS_TYPES_H 1)\n    ENDIF ()\n    IF (HAVE_SYS_SOCKET_H)\n        SET (CARES_HAVE_SYS_SOCKET_H 1)\n    ENDIF()\n    IF (HAVE_WS2TCPIP_H)\n        SET (CARES_HAVE_WS2TCPIP_H 1)\n    ENDIF()\n    IF (HAVE_WINSOCK2_H)\n        SET (CARES_HAVE_WINSOCK2_H 1)\n    ENDIF()\n    IF (HAVE_WINDOWS_H)\n        SET (CARES_HAVE_WINDOWS_H 1)\n    ENDIF()\n    \n    # Write ares_build.h configuration file.  This is an installed file.\n    configure_file(${SDIR}\/ares_build.h.cmake ${BDIR}\/ares_build.h)\n    \n    # Write ares_config.h configuration file.  This is used only for the build.\n    configure_file(${SDIR}\/ares_config.h.cmake ${BDIR}\/ares_config.h)\n    \n    \n    #-   type: struct addrinfo\n    #-   type: struct sockaddr_in6\n    #-   type: struct timeval\n    #-   recv\n    #-   recvfrom\n    #-   send\n    #-   sendto\n\ncheck_function_exists:\n    -   bitncmp\n    -   gethostbyname\n    -   gettimeofday\n    -   if_indextoname\n    -   strcasecmp\n\ncheck_include_exists:\n    -   file: arpa\/inet.h\n        variable: HAVE_ARPA_INET_H\n        cpp: false\n    -   file: arpa\/nameser_compat.h\n        variable: HAVE_ARPA_NAMESER_COMPAT_H\n        cpp: false\n    -   file: arpa\/nameser.h\n        variable: HAVE_ARPA_NAMESER_H\n        cpp: false\n    -   file: assert.h\n        variable: HAVE_ASSERT_H\n        cpp: false\n    -   file: errno.h\n        variable: HAVE_ERRNO_H\n        cpp: false\n    -   file: limits.h\n        variable: HAVE_LIMITS_H\n        cpp: false\n    -   file: netdb.h\n        variable: HAVE_NETDB_H\n        cpp: false\n    -   file: netinet\/in.h\n        variable: HAVE_NETINET_IN_H\n        cpp: false\n    -   file: netinet\/tcp.h\n        variable: HAVE_NETINET_TCP_H\n        cpp: false\n    -   file: net\/if.h\n        variable: HAVE_NET_IF_H\n        cpp: false\n    -   file: socket.h\n        variable: HAVE_SOCKET_H\n        cpp: false\n    -   file: stdbool.h\n        variable: HAVE_STDBOOL_H\n        cpp: false\n    -   file: stdlib.h\n        variable: HAVE_STDLIB_H\n        cpp: false\n    -   file: strings.h\n        variable: HAVE_STRINGS_H\n        cpp: false\n    -   file: sys\/ioctl.h\n        variable: HAVE_SYS_IOCTL_H\n        cpp: false\n    -   file: sys\/param.h\n        variable: HAVE_SYS_PARAM_H\n        cpp: false\n    -   file: sys\/select.h\n        variable: HAVE_SYS_SELECT_H\n        cpp: false\n    -   file: sys\/socket.h\n        variable: HAVE_SYS_SOCKET_H\n        cpp: false\n    -   file: sys\/time.h\n        variable: HAVE_SYS_TIME_H\n        cpp: false\n    -   file: sys\/types.h\n        variable: HAVE_SYS_TYPES_H\n        cpp: false\n    -   file: sys\/uio.h\n        variable: HAVE_SYS_UIO_H\n        cpp: false\n    -   file: time.h\n        variable: HAVE_TIME_H\n        cpp: false\n\ncheck_type_size:\n    -   type: bool\n    -   type: in_addr_t\n    -   type: long\n    -   type: long long\n    -   type: signal\n    -   type: sig_atomic_t\n    -   type: sockaddr_storage\n    -   type: SOCKET\n    -   type: socklen_t\n    -   type: ssize_t\n    -   type: struct in6_addr\n    -   type: struct sockaddr_storage\n\ncheck_library_function:\n    -   function: gethostbyname\n        library: nsl\n    -   function: strcasecmp\n        library: resolve\n\ncheck_struct_member:\n    -   member: ai_flags\n        struct: struct addrinfo\n    -   member: sin6_scope_id\n        struct: struct sockaddr_in6\n\ncheck_c_source_compiles:\n    HAVE_TIME_WITH_SYS_TIME:\n        text: \"\\n#include <time.h>\\n#include <sys\/time.h>\\nint main() {return 0;}\\n\"\n        invert: false\n    STDC_HEADERS:\n        text: \"\\n#include <stdlib.h>\\n#include <stdarg.h>\\n#include <string.h>\\n#include <float.h>\\nint main() {return 0;}\\n\"\n        invert: false\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/c-ares\/c-ares",
            "branch": "master"
        }
    },
    "version": "master",
    "sha256": "46addd854a40e479672666b95037e479ea225e21ded54a5c46f78aea7e7e6b16",
    "created": "2017-02-26 23:58:35.93892"
}

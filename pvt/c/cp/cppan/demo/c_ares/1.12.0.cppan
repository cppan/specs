{
    "project": "pvt.cppan.demo.c_ares",
    "cppan": "source:\n    git: https:\/\/github.com\/c-ares\/c-ares\n    tag: cares-1_12_0\n\nversion: 1.12.0\n\ntype: library\n\nfiles:\n    -   \"[^\/]*\\\\.c\"\n    -   \"[^\/]*\\\\.cmake\"\n    -   \"[^\/]*\\\\.h\"\n\nexclude_from_package:\n    -   acountry.c\n    -   adig.c\n    -   ahost.c\n\noptions:\n    any:\n        definitions:\n            private:\n                -   CARES_BUILDING_LIBRARY\n    static:\n        definitions:\n            public:\n                -   CARES_STATICLIB\n\npost_sources: |\n    if(HAVE_SOCKLEN_T)\n        set(CARES_TYPEOF_ARES_SOCKLEN_T \"socklen_t\")\n    else()\n        set(CARES_TYPEOF_ARES_SOCKLEN_T \"int\")\n    endif()\n    \n    IF (HAVE_SSIZE_T AND HAVE_SOCKLEN_T)\n        # If we have ssize_t and socklen_t, the API is usually sane and uses ssize_t and size_t for lengths\n        SET (RECVFROM_TYPE_RETV ssize_t)\n        SET (RECVFROM_TYPE_ARG3 size_t)\n    ELSE ()\n        SET (RECVFROM_TYPE_RETV int)\n        SET (RECVFROM_TYPE_ARG3 int)\n    ENDIF ()\n    \n    IF (HAVE_TYPE_SOCKET)\n        # If the SOCKET type is defined, it uses socket ... should be windows only\n        SET (RECVFROM_TYPE_ARG1 SOCKET)\n    ELSE ()\n        SET (RECVFROM_TYPE_ARG1 int)\n    ENDIF()\n    \n    IF (HAVE_SOCKLEN_T)\n        # If we have socklen_t the APIs pretty much always actually use it\n        SET (RECVFROM_TYPE_ARG6 \"socklen_t *\")\n        SET (GETNAMEINFO_TYPE_ARG2 socklen_t)\n        SET (GETNAMEINFO_TYPE_ARG46 socklen_t)\n    ELSE ()\n        SET (RECVFROM_TYPE_ARG6 \"int *\")\n        SET (GETNAMEINFO_TYPE_ARG2 int)\n        SET (GETNAMEINFO_TYPE_ARG46 int)\n    ENDIF ()\n    \n    # Functions are typically consistent so the equivalent fields map ... equivalently\n    SET (RECV_TYPE_RETV ${RECVFROM_TYPE_RETV})\n    SET (SEND_TYPE_RETV ${RECVFROM_TYPE_RETV})\n    SET (RECV_TYPE_ARG1 ${RECVFROM_TYPE_ARG1})\n    SET (SEND_TYPE_ARG1 ${RECVFROM_TYPE_ARG1})\n    SET (RECV_TYPE_ARG3 ${RECVFROM_TYPE_ARG3})\n    SET (SEND_TYPE_ARG3 ${RECVFROM_TYPE_ARG3})\n    SET (GETHOSTNAME_TYPE_ARG2 ${RECVFROM_TYPE_ARG3})\n    \n    # These should always be \"sane\" values to use always\n    SET (RECVFROM_QUAL_ARG5 )\n    SET (RECVFROM_TYPE_ARG2 \"void *\")\n    SET (RECVFROM_TYPE_ARG4 int)\n    SET (RECVFROM_TYPE_ARG5 \"struct sockaddr *\")\n    SET (RECV_TYPE_ARG2 \"void *\")\n    SET (RECV_TYPE_ARG4 int)\n    SET (GETNAMEINFO_TYPE_ARG1 \"struct sockaddr *\")\n    SET (GETNAMEINFO_TYPE_ARG7 int)\n    SET (SEND_TYPE_ARG2 \"void *\")\n    SET (SEND_TYPE_ARG4 int)\n    \n    set(CARES_HAVE_SYS_TYPES_H ${HAVE_SYS_TYPES_H})\n    set(CARES_HAVE_SYS_SOCKET_H ${HAVE_SYS_SOCKET_H})\n    set(CARES_HAVE_WINDOWS_H ${HAVE_WINDOWS_H})\n    set(CARES_HAVE_WS2TCPIP_H ${HAVE_WS2TCPIP_H})\n    set(CARES_HAVE_WINSOCK2_H ${HAVE_WINSOCK2_H})\n    \n    # Write ares_build.h configuration file.  This is an installed file.\n    configure_file(${SDIR}\/ares_build.h.cmake ${BDIR}\/ares_build.h)\n    \n    # Write ares_config.h configuration file.  This is used only for the build.\n    configure_file(${SDIR}\/ares_config.h.cmake ${BDIR}\/ares_config.h)\n\ncheck_function_exists:\n    -   bitncmp\n    -   gethostbyname\n    -   gettimeofday\n    -   if_indextoname\n    -   strcasecmp\n\ncheck_include_exists:\n    -   file: arpa\/inet.h\n        variable: HAVE_ARPA_INET_H\n        cpp: false\n    -   file: arpa\/nameser_compat.h\n        variable: HAVE_ARPA_NAMESER_COMPAT_H\n        cpp: false\n    -   file: arpa\/nameser.h\n        variable: HAVE_ARPA_NAMESER_H\n        cpp: false\n    -   file: assert.h\n        variable: HAVE_ASSERT_H\n        cpp: false\n    -   file: errno.h\n        variable: HAVE_ERRNO_H\n        cpp: false\n    -   file: limits.h\n        variable: HAVE_LIMITS_H\n        cpp: false\n    -   file: netdb.h\n        variable: HAVE_NETDB_H\n        cpp: false\n    -   file: netinet\/in.h\n        variable: HAVE_NETINET_IN_H\n        cpp: false\n    -   file: netinet\/tcp.h\n        variable: HAVE_NETINET_TCP_H\n        cpp: false\n    -   file: net\/if.h\n        variable: HAVE_NET_IF_H\n        cpp: false\n    -   file: socket.h\n        variable: HAVE_SOCKET_H\n        cpp: false\n    -   file: stdbool.h\n        variable: HAVE_STDBOOL_H\n        cpp: false\n    -   file: stdlib.h\n        variable: HAVE_STDLIB_H\n        cpp: false\n    -   file: strings.h\n        variable: HAVE_STRINGS_H\n        cpp: false\n    -   file: sys\/ioctl.h\n        variable: HAVE_SYS_IOCTL_H\n        cpp: false\n    -   file: sys\/param.h\n        variable: HAVE_SYS_PARAM_H\n        cpp: false\n    -   file: sys\/select.h\n        variable: HAVE_SYS_SELECT_H\n        cpp: false\n    -   file: sys\/socket.h\n        variable: HAVE_SYS_SOCKET_H\n        cpp: false\n    -   file: sys\/time.h\n        variable: HAVE_SYS_TIME_H\n        cpp: false\n    -   file: sys\/types.h\n        variable: HAVE_SYS_TYPES_H\n        cpp: false\n    -   file: sys\/uio.h\n        variable: HAVE_SYS_UIO_H\n        cpp: false\n    -   file: time.h\n        variable: HAVE_TIME_H\n        cpp: false\n    -   file: windows.h\n        variable: HAVE_WINDOWS_H\n        cpp: false\n    -   file: winsock2.h\n        variable: HAVE_WINSOCK2_H\n        cpp: false\n    -   file: ws2tcpip.h\n        variable: HAVE_WS2TCPIP_H\n        cpp: false\n\ncheck_type_size:\n    -   type: bool\n    -   type: long\n    -   type: signal\n    -   type: ssize_t\n\ncheck_library_function:\n    -   function: gethostbyname\n        library: nsl\n    -   function: strcasecmp\n        library: resolve\n\ncheck_c_source_compiles:\n    HAVE_TIME_WITH_SYS_TIME:\n        text: \"\\n#include <time.h>\\n#include <sys\/time.h>\\nint main() {return 0;}\\n\"\n        invert: false\n    STDC_HEADERS:\n        text: \"\\n#include <stdlib.h>\\n#include <stdarg.h>\\n#include <string.h>\\n#include <float.h>\\nint main() {return 0;}\\n\"\n        invert: false\n\nchecks:\n    HAVE_STRUCT_ADDRINFO_AI_FLAGS:\n        text: CHECK_STRUCT_HAS_MEMBER(\"struct addrinfo\" ai_flags \"\" HAVE_STRUCT_ADDRINFO_AI_FLAGS)\n        invert: false\n    HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID:\n        text: CHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in6\" sin6_scope_id \"\" HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID)\n        invert: false\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/c-ares\/c-ares",
            "tag": "cares-1_12_0"
        }
    },
    "version": "1.12.0",
    "sha256": "fcd4fba64655adae86e1804c643399f18e816bda9632f620907ef9c78204996f",
    "created": "2017-02-12 00:30:04.083654"
}

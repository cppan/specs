{
    "project": "pvt.cppan.demo.valve.sdl.sdl",
    "cppan": "version: !<!> 2.0.4\nfiles:\n  - cmake\/.*\n  - include\/.*\n  - src\/.*\\.m\n  - src\/.*\\.c\n  - src\/.*\\.h\npost_sources: !<!> \"set(SDL2_SOURCE_DIR ${SDIR})\\nset(SDL2_BINARY_DIR ${BDIR})\\n\\ninclude(CheckFunctionExists)\\ninclude(CheckLibraryExists)\\ninclude(CheckIncludeFiles)\\ninclude(CheckIncludeFile)\\ninclude(CheckSymbolExists)\\ninclude(CheckCSourceRuns)\\ninclude(CheckCCompilerFlag)\\ninclude(CheckTypeSize)\\ninclude(CheckStructHasMember)\\ninclude(CMakeDependentOption)\\ninclude(FindPkgConfig)\\nset(CMAKE_MODULE_PATH \\\"${SDL2_SOURCE_DIR}\/cmake\\\")\\ninclude(${SDL2_SOURCE_DIR}\/cmake\/macros.cmake)\\ninclude(${SDL2_SOURCE_DIR}\/cmake\/sdlchecks.cmake)\\n\\n# General settings\\n# Edit include\/SDL_version.h and change the version, then:\\n#   SDL_MICRO_VERSION += 1;\\n#   SDL_INTERFACE_AGE += 1;\\n#   SDL_BINARY_AGE += 1;\\n# if any functions have been added, set SDL_INTERFACE_AGE to 0.\\n# if backwards compatibility has been broken,\\n# set SDL_BINARY_AGE and SDL_INTERFACE_AGE to 0.\\nset(SDL_MAJOR_VERSION ${PACKAGE_VERSION_MAJOR})\\nset(SDL_MINOR_VERSION ${PACKAGE_VERSION_MINOR})\\nset(SDL_MICRO_VERSION ${PACKAGE_VERSION_PATCH})\\nset(SDL_INTERFACE_AGE 0)\\nset(SDL_BINARY_AGE 4)\\nset(SDL_VERSION \\\"${SDL_MAJOR_VERSION}.${SDL_MINOR_VERSION}.${SDL_MICRO_VERSION}\\\")\\n\\n# Calculate a libtool-like version number\\nmath(EXPR LT_CURRENT \\\"${SDL_MICRO_VERSION} - ${SDL_INTERFACE_AGE}\\\")\\nmath(EXPR LT_AGE \\\"${SDL_BINARY_AGE} - ${SDL_INTERFACE_AGE}\\\")\\nmath(EXPR LT_MAJOR \\\"${LT_CURRENT}- ${LT_AGE}\\\")\\nset(LT_REVISION \\\"${SDL_INTERFACE_AGE}\\\")\\nset(LT_RELEASE \\\"${SDL_MAJOR_VERSION}.${SDL_MINOR_VERSION}\\\")\\nset(LT_VERSION \\\"${LT_MAJOR}.${LT_AGE}.${LT_REVISION}\\\")\\n\\nmessage(STATUS \\\"${LT_VERSION} :: ${LT_AGE} :: ${LT_REVISION} :: ${LT_CURRENT} :: ${LT_RELEASE}\\\")\\n\\n# General settings & flags\\nset(LIBRARY_OUTPUT_DIRECTORY \\\"build\\\")\\n# Check for 64 or 32 bit\\nset(SIZEOF_VOIDP ${CMAKE_SIZEOF_VOID_P})\\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\\n  set(ARCH_64 TRUE)\\n  set(PROCESSOR_ARCH \\\"x64\\\")\\nelse()\\n  set(ARCH_64 FALSE)\\n  set(PROCESSOR_ARCH \\\"x86\\\")\\nendif()\\nset(LIBNAME SDL2)\\nif(NOT LIBTYPE)\\n  set(LIBTYPE SHARED)\\nendif()\\n\\n# Get the platform\\nif(WIN32)\\n  if(NOT WINDOWS)\\n    set(WINDOWS TRUE)\\n  endif()\\nelseif(UNIX AND NOT APPLE)\\n  if(CMAKE_SYSTEM_NAME MATCHES \\\".*Linux\\\")\\n    set(LINUX TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\"kFreeBSD.*\\\")\\n    set(FREEBSD TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\"kNetBSD.*|NetBSD.*\\\")\\n    set(NETBSD TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\"kOpenBSD.*|OpenBSD.*\\\")\\n    set(OPENBSD TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\".*GNU.*\\\")\\n    set(GNU TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\".*BSDI.*\\\")\\n    set(BSDI TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\"DragonFly.*|FreeBSD\\\")\\n    set(FREEBSD TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\"SYSV5.*\\\")\\n    set(SYSV5 TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\"Solaris.*\\\")\\n    set(SOLARIS TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\"HP-UX.*\\\")\\n    set(HPUX TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\"AIX.*\\\")\\n    set(AIX TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\"Minix.*\\\")\\n    set(MINIX TRUE)\\n  endif()\\nelseif(APPLE)\\n  if(CMAKE_SYSTEM_NAME MATCHES \\\".*Darwin.*\\\")\\n    set(DARWIN TRUE)\\n  elseif(CMAKE_SYSTEM_NAME MATCHES \\\".*MacOS.*\\\")\\n    set(MACOSX TRUE)\\n  endif()\\n  # TODO: iOS?\\nelseif(CMAKE_SYSTEM_NAME MATCHES \\\"BeOS.*\\\")\\n  message_error(\\\"BeOS support has been removed as of SDL 2.0.2.\\\")\\nelseif(CMAKE_SYSTEM_NAME MATCHES \\\"Haiku.*\\\")\\n  set(HAIKU TRUE)\\nendif()\\n\\n# Don't mistake osx for unix\\nif(UNIX AND NOT APPLE)\\n  set(UNIX_SYS ON)\\nelse()\\n  set(UNIX_SYS OFF)\\nendif()\\n\\nif(UNIX OR APPLE)\\n  set(UNIX_OR_MAC_SYS ON)\\nelse()\\n  set(UNIX_OR_MAC_SYS OFF)\\nendif()\\n\\nif (UNIX_OR_MAC_SYS AND NOT EMSCRIPTEN) # JavaScript does not yet have threading support, so disable pthreads when building for Emscripten.\\n  set(SDL_PTHREADS_ENABLED_BY_DEFAULT ON)\\nelse()\\n  set(SDL_PTHREADS_ENABLED_BY_DEFAULT OFF)\\nendif()\\n\\n# Default option knobs\\nif(APPLE OR ARCH_64)\\n  set(OPT_DEF_SSEMATH ON)\\nendif()\\nif(UNIX OR MINGW OR MSYS)\\n  set(OPT_DEF_LIBC ON)\\nendif()\\n\\n# Compiler info\\nif(CMAKE_COMPILER_IS_GNUCC)\\n  set(USE_GCC TRUE)\\n  set(OPT_DEF_ASM TRUE)\\nelseif(CMAKE_C_COMPILER_ID MATCHES \\\"Clang\\\")\\n  set(USE_CLANG TRUE)\\n  set(OPT_DEF_ASM TRUE)\\nelseif(MSVC_VERSION GREATER 1400) # VisualStudio 8.0+\\n  set(OPT_DEF_ASM TRUE)\\n  #set(CMAKE_C_FLAGS \\\"\/ZI \/WX- \/\\nelse()\\n  set(OPT_DEF_ASM FALSE)\\nendif()\\n\\n# Default flags, if not set otherwise\\nif(\\\"$ENV{CFLAGS}\\\" STREQUAL \\\"\\\")\\n  if(USE_GCC OR USE_CLANG)\\n    set(CMAKE_C_FLAGS \\\"-g -O3\\\")\\n  endif()\\nelse()\\n  set(CMAKE_C_FLAGS \\\"$ENV{CFLAGS}\\\")\\n  list(APPEND EXTRA_CFLAGS \\\"$ENV{CFLAGS}\\\")\\nendif()\\nif(NOT (\\\"$ENV{CFLAGS}\\\" STREQUAL \\\"\\\")) # Hackish, but does the trick on Win32\\n  list(APPEND EXTRA_LDFLAGS \\\"$ENV{LDFLAGS}\\\")\\nendif()\\n\\nif(MSVC)\\n  # Make sure \/RTC1 is disabled, otherwise it will use functions from the CRT\\n  foreach(flag_var\\n      CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\\n      CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)\\n    string(REGEX REPLACE \\\"\/RTC(su|[1su])\\\" \\\"\\\" ${flag_var} \\\"${${flag_var}}\\\")\\n  endforeach(flag_var)\\nendif()\\n\\n# Emscripten toolchain has a nonempty default value for this, and the checks\\n# in this file need to change that, so remember the original value, and\\n# restore back to that afterwards. For check_function_exists() to work in\\n# Emscripten, this value must be at its default value.\\nset(ORIG_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})\\n\\nif(CYGWIN)\\n  # We build SDL on cygwin without the UNIX emulation layer\\n  include_directories(\\\"-I\/usr\/include\/mingw\\\")\\n  set(CMAKE_REQUIRED_FLAGS \\\"-mno-cygwin\\\")\\n  check_c_source_compiles(\\\"int main(int argc, char **argv) {}\\\"\\n    HAVE_GCC_NO_CYGWIN)\\n  set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\\n  if(HAVE_GCC_NO_CYGWIN)\\n    list(APPEND EXTRA_LDFLAGS \\\"-mno-cygwin\\\")\\n  endif()\\nendif()\\n\\nadd_definitions(-DUSING_GENERATED_CONFIG_H)\\n# General includes\\ninclude_directories(${SDL2_BINARY_DIR}\/include ${SDL2_SOURCE_DIR}\/include)\\n\\n# All these ENABLED_BY_DEFAULT vars will default to ON if not specified, so\\n#  you only need to have a platform override them if they are disabling.\\nset(OPT_DEF_ASM TRUE)\\nif(EMSCRIPTEN)\\n  # Set up default values for the currently supported set of subsystems:\\n  # Emscripten\/Javascript does not have assembly support, a dynamic library\\n  # loading architecture, low-level CPU inspection or multithreading.\\n  set(OPT_DEF_ASM FALSE)\\n  set(SDL_ATOMIC_ENABLED_BY_DEFAULT OFF)\\n  set(SDL_THREADS_ENABLED_BY_DEFAULT OFF)\\n  set(SDL_LOADSO_ENABLED_BY_DEFAULT OFF)\\n  set(SDL_CPUINFO_ENABLED_BY_DEFAULT OFF)\\n  set(SDL_DLOPEN_ENABLED_BY_DEFAULT OFF)\\nendif()\\n\\nset(SDL_SUBSYSTEMS\\n    Atomic Audio Video Render Events Joystick Haptic Power Threads Timers\\n    File Loadso CPUinfo Filesystem Dlopen)\\nforeach(_SUB ${SDL_SUBSYSTEMS})\\n  string(TOUPPER ${_SUB} _OPT)\\n  if (NOT DEFINED SDL_${_OPT}_ENABLED_BY_DEFAULT)\\n    set(SDL_${_OPT}_ENABLED_BY_DEFAULT ON)\\n  endif()\\n  option(SDL_${_OPT} \\\"Enable the ${_SUB} subsystem\\\" ${SDL_${_OPT}_ENABLED_BY_DEFAULT})\\nendforeach()\\n\\noption_string(ASSERTIONS \\\"Enable internal sanity checks (auto\/disabled\/release\/enabled\/paranoid)\\\" \\\"auto\\\")\\n#set_option(DEPENDENCY_TRACKING \\\"Use gcc -MMD -MT dependency tracking\\\" ON)\\nset_option(LIBC                \\\"Use the system C library\\\" ${OPT_DEF_LIBC})\\nset_option(GCC_ATOMICS         \\\"Use gcc builtin atomics\\\" ${USE_GCC})\\nset_option(ASSEMBLY            \\\"Enable assembly routines\\\" ${OPT_DEF_ASM})\\nset_option(SSEMATH             \\\"Allow GCC to use SSE floating point math\\\" ${OPT_DEF_SSEMATH})\\nset_option(MMX                 \\\"Use MMX assembly routines\\\" ${OPT_DEF_ASM})\\nset_option(3DNOW               \\\"Use 3Dnow! MMX assembly routines\\\" ${OPT_DEF_ASM})\\nset_option(SSE                 \\\"Use SSE assembly routines\\\" ${OPT_DEF_ASM})\\nset_option(SSE2                \\\"Use SSE2 assembly routines\\\" ${OPT_DEF_SSEMATH})\\nset_option(ALTIVEC             \\\"Use Altivec assembly routines\\\" ${OPT_DEF_ASM})\\nset_option(DISKAUDIO           \\\"Support the disk writer audio driver\\\" ON)\\nset_option(DUMMYAUDIO          \\\"Support the dummy audio driver\\\" ON)\\nset_option(VIDEO_DIRECTFB      \\\"Use DirectFB video driver\\\" OFF)\\ndep_option(DIRECTFB_SHARED     \\\"Dynamically load directfb support\\\" ON \\\"VIDEO_DIRECTFB\\\" OFF)\\nset_option(FUSIONSOUND         \\\"Use FusionSound audio driver\\\" OFF)\\ndep_option(FUSIONSOUND_SHARED  \\\"Dynamically load fusionsound audio support\\\" ON \\\"FUSIONSOUND\\\" OFF)\\nset_option(VIDEO_DUMMY         \\\"Use dummy video driver\\\" ON)\\nset_option(VIDEO_OPENGL        \\\"Include OpenGL support\\\" ON)\\nset_option(VIDEO_OPENGLES      \\\"Include OpenGL ES support\\\" ON)\\nset_option(PTHREADS            \\\"Use POSIX threads for multi-threading\\\" ${SDL_PTHREADS_ENABLED_BY_DEFAULT})\\ndep_option(PTHREADS_SEM        \\\"Use pthread semaphores\\\" ON \\\"PTHREADS\\\" OFF)\\nset_option(SDL_DLOPEN          \\\"Use dlopen for shared object loading\\\" ${SDL_DLOPEN_ENABLED_BY_DEFAULT})\\nset_option(OSS                 \\\"Support the OSS audio API\\\" ${UNIX_SYS})\\nset_option(ALSA                \\\"Support the ALSA audio API\\\" ${UNIX_SYS})\\ndep_option(ALSA_SHARED         \\\"Dynamically load ALSA audio support\\\" ON \\\"ALSA\\\" OFF)\\nset_option(ESD                 \\\"Support the Enlightened Sound Daemon\\\" ${UNIX_SYS})\\ndep_option(ESD_SHARED          \\\"Dynamically load ESD audio support\\\" ON \\\"ESD\\\" OFF)\\nset_option(PULSEAUDIO          \\\"Use PulseAudio\\\" ${UNIX_SYS})\\ndep_option(PULSEAUDIO_SHARED   \\\"Dynamically load PulseAudio support\\\" ON \\\"PULSEAUDIO\\\" OFF)\\nset_option(ARTS                \\\"Support the Analog Real Time Synthesizer\\\" ${UNIX_SYS})\\ndep_option(ARTS_SHARED         \\\"Dynamically load aRts audio support\\\" ON \\\"ARTS\\\" OFF)\\nset_option(NAS                 \\\"Support the NAS audio API\\\" ${UNIX_SYS})\\nset_option(NAS_SHARED          \\\"Dynamically load NAS audio API\\\" ${UNIX_SYS})\\nset_option(SNDIO               \\\"Support the sndio audio API\\\" ${UNIX_SYS})\\nset_option(RPATH               \\\"Use an rpath when linking SDL\\\" ${UNIX_SYS})\\nset_option(CLOCK_GETTIME       \\\"Use clock_gettime() instead of gettimeofday()\\\" OFF)\\nset_option(INPUT_TSLIB         \\\"Use the Touchscreen library for input\\\" ${UNIX_SYS})\\nset_option(VIDEO_X11           \\\"Use X11 video driver\\\" ${UNIX_SYS})\\nset_option(VIDEO_WAYLAND       \\\"Use Wayland video driver\\\" ${UNIX_SYS})\\ndep_option(WAYLAND_SHARED      \\\"Dynamically load Wayland support\\\" ON \\\"VIDEO_WAYLAND\\\" OFF)\\ndep_option(VIDEO_WAYLAND_QT_TOUCH  \\\"QtWayland server support for Wayland video driver\\\" ON \\\"VIDEO_WAYLAND\\\" OFF)\\nset_option(VIDEO_MIR           \\\"Use Mir video driver\\\" ${UNIX_SYS})\\ndep_option(MIR_SHARED          \\\"Dynamically load Mir support\\\" ON \\\"VIDEO_MIR\\\" OFF)\\nset_option(VIDEO_RPI           \\\"Use Raspberry Pi video driver\\\" ${UNIX_SYS})\\ndep_option(X11_SHARED          \\\"Dynamically load X11 support\\\" ON \\\"VIDEO_X11\\\" OFF)\\nset(SDL_X11_OPTIONS Xcursor Xinerama XInput Xrandr Xscrnsaver XShape Xvm)\\nforeach(_SUB ${SDL_X11_OPTIONS})\\n  string(TOUPPER \\\"VIDEO_X11_${_SUB}\\\" _OPT)\\n  dep_option(${_OPT}           \\\"Enable ${_SUB} support\\\" ON \\\"VIDEO_X11\\\" OFF)\\nendforeach()\\nset_option(VIDEO_COCOA         \\\"Use Cocoa video driver\\\" ${APPLE})\\nset_option(DIRECTX             \\\"Use DirectX for Windows audio\/video\\\" ${WINDOWS})\\nset_option(RENDER_D3D          \\\"Enable the Direct3D render driver\\\" ${WINDOWS})\\nset_option(VIDEO_VIVANTE       \\\"Use Vivante EGL video driver\\\" ${UNIX_SYS})\\n\\n# TODO: We should (should we?) respect cmake's ${BUILD_SHARED_LIBS} flag here\\n# The options below are for compatibility to configure's default behaviour.\\nif (LIBRARY_TYPE STREQUAL \\\"SHARED\\\")\\n    set(SDL_SHARED ON CACHE BOOL \\\"Build a shared version of the library\\\")\\nendif()\\n\\nif (LIBRARY_TYPE STREQUAL \\\"STATIC\\\")\\n    set(SDL_STATIC ON CACHE BOOL \\\"Build a static version of the library\\\")\\nendif()\\n\\n# General source files\\nfile(GLOB SOURCE_FILES\\n  ${SDL2_SOURCE_DIR}\/src\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/atomic\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/audio\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/cpuinfo\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/dynapi\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/events\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/file\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/libm\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/render\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/render\/*\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/stdlib\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/thread\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/timer\/*.c\\n  ${SDL2_SOURCE_DIR}\/src\/video\/*.c)\\n\\n\\nif(ASSERTIONS STREQUAL \\\"auto\\\")\\n  # Do nada - use optimization settings to determine the assertion level\\nelseif(ASSERTIONS STREQUAL \\\"disabled\\\")\\n  set(SDL_DEFAULT_ASSERT_LEVEL 0)\\nelseif(ASSERTIONS STREQUAL \\\"release\\\")\\n  set(SDL_DEFAULT_ASSERT_LEVEL 1)\\nelseif(ASSERTIONS STREQUAL \\\"enabled\\\")\\n  set(SDL_DEFAULT_ASSERT_LEVEL 2)\\nelseif(ASSERTIONS STREQUAL \\\"paranoid\\\")\\n  set(SDL_DEFAULT_ASSERT_LEVEL 3)\\nelse()\\n  message_error(\\\"unknown assertion level\\\")\\nendif()\\nset(HAVE_ASSERTIONS ${ASSERTIONS})\\n\\n# Compiler option evaluation\\nif(USE_GCC OR USE_CLANG)\\n  if(DEPENDENCY_TRACKING)\\n    check_c_source_compiles(\\\"\\n        #if !defined(__GNUC__) || __GNUC__ < 3\\n        #error Dependency tracking requires GCC 3.0 or newer\\n        #endif\\n        int main(int argc, char **argv) { }\\\" HAVE_DEPENDENCY_TRACKING)\\n  endif()\\n\\n  if(GCC_ATOMICS)\\n    check_c_source_compiles(\\\"int main(int argc, char **argv) {\\n        int a;\\n        void *x, *y, *z;\\n        __sync_lock_test_and_set(&a, 4);\\n        __sync_lock_test_and_set(&x, y);\\n        __sync_fetch_and_add(&a, 1);\\n        __sync_bool_compare_and_swap(&a, 5, 10);\\n        __sync_bool_compare_and_swap(&x, y, z); }\\\" HAVE_GCC_ATOMICS)\\n    if(NOT HAVE_GCC_ATOMICS)\\n      check_c_source_compiles(\\\"int main(int argc, char **argv) {\\n          int a;\\n          __sync_lock_test_and_set(&a, 1);\\n          __sync_lock_release(&a); }\\\" HAVE_GCC_SYNC_LOCK_TEST_AND_SET)\\n    endif()\\n  endif()\\n\\n  set(CMAKE_REQUIRED_FLAGS \\\"-mpreferred-stack-boundary=2\\\")\\n  check_c_source_compiles(\\\"int x = 0; int main(int argc, char **argv) {}\\\"\\n    HAVE_GCC_PREFERRED_STACK_BOUNDARY)\\n  set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\\n\\n  set(CMAKE_REQUIRED_FLAGS \\\"-fvisibility=hidden -Werror\\\")\\n  check_c_source_compiles(\\\"\\n      #if !defined(__GNUC__) || __GNUC__ < 4\\n      #error SDL only uses visibility attributes in GCC 4 or newer\\n      #endif\\n      int main(int argc, char **argv) {}\\\" HAVE_GCC_FVISIBILITY)\\n  if(HAVE_GCC_FVISIBILITY)\\n    list(APPEND EXTRA_CFLAGS \\\"-fvisibility=hidden\\\")\\n  endif()\\n  set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\\n\\n  check_c_compiler_flag(-Wall HAVE_GCC_WALL)\\n  if(HAVE_GCC_WALL)\\n    list(APPEND EXTRA_CFLAGS \\\"-Wall\\\")\\n    if(HAIKU)\\n      set(CMAKE_C_FLAGS \\\"${CMAKE_C_FLAGS} -Wno-multichar\\\")\\n    endif()\\n  endif()\\n  check_c_compiler_flag(-Wshadow HAVE_GCC_WSHADOW)\\n  if(HAVE_GCC_WSHADOW)\\n    list(APPEND EXTRA_CFLAGS \\\"-Wshadow\\\")\\n  endif()\\nendif()\\n\\nif(ASSEMBLY)\\n  if(USE_GCC OR USE_CLANG)\\n    set(SDL_ASSEMBLY_ROUTINES 1)\\n    # TODO: Those all seem to be quite GCC specific - needs to be\\n    # reworked for better compiler support\\n    set(HAVE_ASSEMBLY TRUE)\\n    if(MMX)\\n      set(CMAKE_REQUIRED_FLAGS \\\"-mmmx\\\")\\n      check_c_source_compiles(\\\"\\n          #ifdef __MINGW32__\\n          #include <_mingw.h>\\n          #ifdef __MINGW64_VERSION_MAJOR\\n          #include <intrin.h>\\n          #else\\n          #include <mmintrin.h>\\n          #endif\\n          #else\\n          #include <mmintrin.h>\\n          #endif\\n          #ifndef __MMX__\\n          #error Assembler CPP flag not enabled\\n          #endif\\n          int main(int argc, char **argv) { }\\\" HAVE_MMX)\\n      if(HAVE_MMX)\\n        list(APPEND EXTRA_CFLAGS \\\"-mmmx\\\")\\n      endif()\\n      set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\\n    endif()\\n\\n    if(3DNOW)\\n      set(CMAKE_REQUIRED_FLAGS \\\"-m3dnow\\\")\\n      check_c_source_compiles(\\\"\\n          #include <mm3dnow.h>\\n          #ifndef __3dNOW__\\n          #error Assembler CPP flag not enabled\\n          #endif\\n          int main(int argc, char **argv) {\\n            void *p = 0;\\n            _m_prefetch(p);\\n          }\\\" HAVE_3DNOW)\\n      if(HAVE_3DNOW)\\n        list(APPEND EXTRA_CFLAGS \\\"-m3dnow\\\")\\n      endif()\\n      set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\\n    endif()\\n\\n    if(SSE)\\n      set(CMAKE_REQUIRED_FLAGS \\\"-msse\\\")\\n      check_c_source_compiles(\\\"\\n          #ifdef __MINGW32__\\n          #include <_mingw.h>\\n          #ifdef __MINGW64_VERSION_MAJOR\\n          #include <intrin.h>\\n          #else\\n          #include <xmmintrin.h>\\n          #endif\\n          #else\\n          #include <xmmintrin.h>\\n          #endif\\n          #ifndef __SSE__\\n          #error Assembler CPP flag not enabled\\n          #endif\\n          int main(int argc, char **argv) { }\\\" HAVE_SSE)\\n      if(HAVE_SSE)\\n        list(APPEND EXTRA_CFLAGS \\\"-msse\\\")\\n      endif()\\n      set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\\n    endif()\\n\\n    if(SSE2)\\n      set(CMAKE_REQUIRED_FLAGS \\\"-msse2\\\")\\n      check_c_source_compiles(\\\"\\n          #ifdef __MINGW32__\\n          #include <_mingw.h>\\n          #ifdef __MINGW64_VERSION_MAJOR\\n          #include <intrin.h>\\n          #else\\n          #include <emmintrin.h>\\n          #endif\\n          #else\\n          #include <emmintrin.h>\\n          #endif\\n          #ifndef __SSE2__\\n          #error Assembler CPP flag not enabled\\n          #endif\\n          int main(int argc, char **argv) { }\\\" HAVE_SSE2)\\n      if(HAVE_SSE2)\\n        list(APPEND EXTRA_CFLAGS \\\"-msse2\\\")\\n      endif()\\n      set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\\n    endif()\\n\\n    if(SSEMATH)\\n      if(SSE OR SSE2)\\n        if(USE_GCC)\\n          list(APPEND EXTRA_CFLAGS \\\"-mfpmath=387\\\")\\n        endif()\\n        set(HAVE_SSEMATH TRUE)\\n      endif()\\n    endif()\\n\\n    if(ALTIVEC)\\n      set(CMAKE_REQUIRED_FLAGS \\\"-maltivec\\\")\\n      check_c_source_compiles(\\\"\\n          #include <altivec.h>\\n          vector unsigned int vzero() {\\n              return vec_splat_u32(0);\\n          }\\n          int main(int argc, char **argv) { }\\\" HAVE_ALTIVEC_H_HDR)\\n      check_c_source_compiles(\\\"\\n          vector unsigned int vzero() {\\n              return vec_splat_u32(0);\\n          }\\n          int main(int argc, char **argv) { }\\\" HAVE_ALTIVEC)\\n      set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\\n      if(HAVE_ALTIVEC OR HAVE_ALTIVEC_H_HDR)\\n        set(HAVE_ALTIVEC TRUE) # if only HAVE_ALTIVEC_H_HDR is set\\n        list(APPEND EXTRA_CFLAGS \\\"-maltivec\\\")\\n        set(SDL_ALTIVEC_BLITTERS 1)\\n        if(HAVE_ALTIVEC_H_HDR)\\n          set(HAVE_ALTIVEC_H 1)\\n        endif()\\n      endif()\\n    endif()\\n  elseif(MSVC_VERSION GREATER 1500)\\n    # TODO: SDL_cpuinfo.h needs to support the user's configuration wish\\n    # for MSVC - right now it is always activated\\n    if(NOT ARCH_64)\\n      set(HAVE_MMX TRUE)\\n      set(HAVE_3DNOW TRUE)\\n    endif()\\n    set(HAVE_SSE TRUE)\\n    set(HAVE_SSE2 TRUE)\\n    set(SDL_ASSEMBLY_ROUTINES 1)\\n  endif()\\n# TODO:\\n#else()\\n#  if(USE_GCC OR USE_CLANG)\\n#    list(APPEND EXTRA_CFLAGS \\\"-mno-sse\\\" \\\"-mno-sse2\\\" \\\"-mno-mmx\\\")\\n#  endif()\\nendif()\\n\\n# TODO: Can't deactivate on FreeBSD? w\/o LIBC, SDL_stdinc.h can't define\\n# anything.\\nif(LIBC)\\n  if(WINDOWS AND NOT MINGW)\\n    set(HAVE_LIBC TRUE)\\n    foreach(_HEADER stdio.h string.h ctype.h math.h)\\n      string(TOUPPER \\\"HAVE_${_HEADER}\\\" _UPPER)\\n      string(REPLACE \\\".\\\" \\\"_\\\" _HAVE_H ${_UPPER})\\n      set(${_HAVE_H} 1)\\n    endforeach()\\n    set(HAVE_SIGNAL_H 1)\\n    foreach(_FN\\n            malloc calloc realloc free qsort abs memset memcpy memmove memcmp\\n            strlen _strrev _strupr _strlwr strchr strrchr strstr itoa _ltoa\\n            _ultoa strtol strtoul strtoll strtod atoi atof strcmp strncmp\\n            _stricmp _strnicmp sscanf atan atan2 acos asin ceil copysign cos\\n            cosf fabs floor log pow scalbn sin sinf sqrt sqrtf tan tanf)\\n      string(TOUPPER ${_FN} _UPPER)\\n      set(HAVE_${_UPPER} 1)\\n    endforeach()\\n    if(NOT CYGWIN AND NOT MINGW)\\n      set(HAVE_ALLOCA 1)\\n    endif()\\n    set(HAVE_M_PI 1)\\n    add_definitions(-D_USE_MATH_DEFINES) # needed for M_PI\\n    set(STDC_HEADERS 1)\\n  else()\\n    set(HAVE_LIBC TRUE)\\n    check_include_file(sys\/types.h HAVE_SYS_TYPES_H)\\n    foreach(_HEADER\\n            stdio.h stdlib.h stddef.h stdarg.h malloc.h memory.h string.h\\n            strings.h inttypes.h stdint.h ctype.h math.h iconv.h signal.h)\\n      string(TOUPPER \\\"HAVE_${_HEADER}\\\" _UPPER)\\n      string(REPLACE \\\".\\\" \\\"_\\\" _HAVE_H ${_UPPER})\\n      check_include_file(\\\"${_HEADER}\\\" ${_HAVE_H})\\n    endforeach()\\n\\n    check_include_files(\\\"dlfcn.h;stdint.h;stddef.h;inttypes.h;stdlib.h;strings.h;string.h;float.h\\\" STDC_HEADERS)\\n    check_type_size(\\\"size_t\\\" SIZEOF_SIZE_T)\\n    check_symbol_exists(M_PI math.h HAVE_M_PI)\\n    # TODO: refine the mprotect check\\n    check_c_source_compiles(\\\"#include <sys\/types.h>\\n                             #include <sys\/mman.h>\\n                             int main() { }\\\" HAVE_MPROTECT)\\n    foreach(_FN\\n            strtod malloc calloc realloc free getenv setenv putenv unsetenv\\n            qsort abs bcopy memset memcpy memmove memcmp strlen strlcpy strlcat\\n            strdup _strrev _strupr _strlwr strchr strrchr strstr itoa _ltoa\\n            _uitoa _ultoa strtol strtoul _i64toa _ui64toa strtoll strtoull\\n            atoi atof strcmp strncmp _stricmp strcasecmp _strnicmp strncasecmp\\n            vsscanf vsnprintf fseeko fseeko64 sigaction setjmp\\n            nanosleep sysconf sysctlbyname\\n            )\\n      string(TOUPPER ${_FN} _UPPER)\\n      set(_HAVEVAR \\\"HAVE_${_UPPER}\\\")\\n      check_function_exists(\\\"${_FN}\\\" ${_HAVEVAR})\\n    endforeach()\\n\\n    check_library_exists(m pow \\\"\\\" HAVE_LIBM)\\n    if(HAVE_LIBM)\\n      set(CMAKE_REQUIRED_LIBRARIES m)\\n      foreach(_FN\\n              atan atan2 ceil copysign cos cosf fabs floor log pow scalbn sin\\n              sinf sqrt sqrtf tan tanf acos asin)\\n        string(TOUPPER ${_FN} _UPPER)\\n        set(_HAVEVAR \\\"HAVE_${_UPPER}\\\")\\n        check_function_exists(\\\"${_FN}\\\" ${_HAVEVAR})\\n      endforeach()\\n      set(CMAKE_REQUIRED_LIBRARIES)\\n      list(APPEND EXTRA_LIBS m)\\n    endif()\\n\\n    check_library_exists(iconv iconv_open \\\"\\\" HAVE_LIBICONV)\\n    if(HAVE_LIBICONV)\\n      list(APPEND EXTRA_LIBS iconv)\\n      set(HAVE_ICONV 1)\\n    endif()\\n\\n    if(NOT APPLE)\\n      check_include_file(alloca.h HAVE_ALLOCA_H)\\n      check_function_exists(alloca HAVE_ALLOCA)\\n    else()\\n      set(HAVE_ALLOCA_H 1)\\n      set(HAVE_ALLOCA 1)\\n    endif()\\n\\n    check_struct_has_member(\\\"struct sigaction\\\" \\\"sa_sigaction\\\" \\\"signal.h\\\" HAVE_SA_SIGACTION)\\n  endif()\\nelse()\\n  if(WINDOWS)\\n    set(HAVE_STDARG_H 1)\\n    set(HAVE_STDDEF_H 1)\\n  endif()\\nendif()\\n\\n\\n# Enable\/disable various subsystems of the SDL library\\nforeach(_SUB ${SDL_SUBSYSTEMS})\\n  string(TOUPPER ${_SUB} _OPT)\\n  if(NOT SDL_${_OPT})\\n    set(SDL_${_OPT}_DISABLED 1)\\n  endif()\\nendforeach()\\nif(SDL_JOYSTICK)\\n  file(GLOB JOYSTICK_SOURCES ${SDL2_SOURCE_DIR}\/src\/joystick\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${JOYSTICK_SOURCES})\\nendif()\\nif(SDL_HAPTIC)\\n  if(NOT SDL_JOYSTICK)\\n    # Haptic requires some private functions from the joystick subsystem.\\n    message_error(\\\"SDL_HAPTIC requires SDL_JOYSTICK, which is not enabled\\\")\\n  endif()\\n  file(GLOB HAPTIC_SOURCES ${SDL2_SOURCE_DIR}\/src\/haptic\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${HAPTIC_SOURCES})\\nendif()\\nif(SDL_POWER)\\n  file(GLOB POWER_SOURCES ${SDL2_SOURCE_DIR}\/src\/power\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${POWER_SOURCES})\\nendif()\\n# TODO: in configure.in, the test for LOADSO and SDL_DLOPEN is a bit weird:\\n# if LOADSO is not wanted, SDL_LOADSO_DISABLED is set\\n# If however on Unix or APPLE dlopen() is detected via CheckDLOPEN(),\\n# SDL_LOADSO_DISABLED will not be set, regardless of the LOADSO settings\\n\\n# General SDL subsystem options, valid for all platforms\\nif(SDL_AUDIO)\\n  # CheckDummyAudio\/CheckDiskAudio - valid for all platforms\\n  if(DUMMYAUDIO)\\n    set(SDL_AUDIO_DRIVER_DUMMY 1)\\n    file(GLOB DUMMYAUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/dummy\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${DUMMYAUDIO_SOURCES})\\n    set(HAVE_DUMMYAUDIO TRUE)\\n  endif()\\n  if(DISKAUDIO)\\n    set(SDL_AUDIO_DRIVER_DISK 1)\\n    file(GLOB DISKAUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/disk\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${DISKAUDIO_SOURCES})\\n    set(HAVE_DISKAUDIO TRUE)\\n  endif()\\nendif()\\n\\nif(SDL_DLOPEN)\\n  # Relevant for Unix\/Darwin only\\n  if(UNIX OR APPLE)\\n    CheckDLOPEN()\\n  endif()\\nendif()\\n\\nif(SDL_VIDEO)\\n  if(VIDEO_DUMMY)\\n    set(SDL_VIDEO_DRIVER_DUMMY 1)\\n    file(GLOB VIDEO_DUMMY_SOURCES ${SDL2_SOURCE_DIR}\/src\/video\/dummy\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${VIDEO_DUMMY_SOURCES})\\n    set(HAVE_VIDEO_DUMMY TRUE)\\n    set(HAVE_SDL_VIDEO TRUE)\\n  endif()\\nendif()\\n\\nif(ANDROID)\\n  file(GLOB ANDROID_CORE_SOURCES ${SDL2_SOURCE_DIR}\/src\/core\/android\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${ANDROID_CORE_SOURCES})\\n  file(GLOB ANDROID_MAIN_SOURCES ${SDL2_SOURCE_DIR}\/src\/main\/android\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${ANDROID_MAIN_SOURCES})\\n  if(SDL_AUDIO)\\n    set(SDL_AUDIO_DRIVER_ANDROID 1)\\n    file(GLOB ANDROID_AUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/android\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${ANDROID_AUDIO_SOURCES})\\n    set(HAVE_SDL_AUDIO TRUE)\\n  endif()\\n  if(SDL_FILESYSTEM)\\n    set(SDL_FILESYSTEM_ANDROID 1)\\n    file(GLOB ANDROID_FILESYSTEM_SOURCES ${SDL2_SOURCE_DIR}\/src\/filesystem\/android\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${ANDROID_FILESYSTEM_SOURCES})\\n    set(HAVE_SDL_FILESYSTEM TRUE)\\n  endif()\\n  if(SDL_JOYSTICK)\\n    set(SDL_JOYSTICK_ANDROID 1)\\n    file(GLOB ANDROID_JOYSTICK_SOURCES ${SDL2_SOURCE_DIR}\/src\/joystick\/android\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${ANDROID_JOYSTICK_SOURCES})\\n    set(HAVE_SDL_JOYSTICK TRUE)\\n  endif()\\n  if(SDL_POWER)\\n    set(SDL_POWER_ANDROID 1)\\n    file(GLOB ANDROID_POWER_SOURCES ${SDL2_SOURCE_DIR}\/src\/power\/android\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${ANDROID_POWER_SOURCES})\\n    set(HAVE_SDL_POWER TRUE)\\n  endif()\\n  if(SDL_VIDEO)\\n    set(SDL_VIDEO_DRIVER_ANDROID 1)\\n    file(GLOB ANDROID_VIDEO_SOURCES ${SDL2_SOURCE_DIR}\/src\/video\/android\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${ANDROID_VIDEO_SOURCES})\\n    set(HAVE_SDL_VIDEO TRUE)\\n\\n    #enable gles\\n    if(VIDEO_OPENGLES)\\n      set(SDL_VIDEO_OPENGL_EGL 1)\\n      set(HAVE_VIDEO_OPENGLES TRUE)\\n      set(SDL_VIDEO_OPENGL_ES2 1)\\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\\n    endif()\\n  endif()\\n  list(APPEND EXTRA_LDFLAGS \\\"-Wl,--undefined=Java_org_libsdl_app_SDLActivity_nativeInit\\\")\\nendif()\\n\\n# Platform-specific options and settings\\nif(EMSCRIPTEN)\\n  # Hide noisy warnings that intend to aid mostly during initial stages of porting a new\\n  # project. Uncomment at will for verbose cross-compiling -I\/..\/ path info.\\n  add_definitions(-Wno-warn-absolute-paths)\\n  if(SDL_AUDIO)\\n    set(SDL_AUDIO_DRIVER_EMSCRIPTEN 1)\\n    file(GLOB EM_AUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/emscripten\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${EM_AUDIO_SOURCES})\\n    set(HAVE_SDL_AUDIO TRUE)\\n  endif()\\n  if(SDL_FILESYSTEM)\\n    set(SDL_FILESYSTEM_EMSCRIPTEN 1)\\n    file(GLOB EM_FILESYSTEM_SOURCES ${SDL2_SOURCE_DIR}\/src\/filesystem\/emscripten\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${EM_FILESYSTEM_SOURCES})\\n    set(HAVE_SDL_FILESYSTEM TRUE)\\n  endif()\\n  if(SDL_JOYSTICK)\\n    set(SDL_JOYSTICK_EMSCRIPTEN 1)\\n    file(GLOB EM_JOYSTICK_SOURCES ${SDL2_SOURCE_DIR}\/src\/joystick\/emscripten\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${EM_JOYSTICK_SOURCES})\\n    set(HAVE_SDL_JOYSTICK TRUE)\\n  endif()\\n  if(SDL_POWER)\\n    set(SDL_POWER_EMSCRIPTEN 1)\\n    file(GLOB EM_POWER_SOURCES ${SDL2_SOURCE_DIR}\/src\/power\/emscripten\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${EM_POWER_SOURCES})\\n    set(HAVE_SDL_POWER TRUE)\\n  endif()\\n  if(SDL_VIDEO)\\n    set(SDL_VIDEO_DRIVER_EMSCRIPTEN 1)\\n    file(GLOB EM_VIDEO_SOURCES ${SDL2_SOURCE_DIR}\/src\/video\/emscripten\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${EM_VIDEO_SOURCES})\\n    set(HAVE_SDL_VIDEO TRUE)\\n\\n    #enable gles\\n    if(VIDEO_OPENGLES)\\n      set(SDL_VIDEO_OPENGL_EGL 1)\\n      set(HAVE_VIDEO_OPENGLES TRUE)\\n      set(SDL_VIDEO_OPENGL_ES2 1)\\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\\n    endif()\\n  endif()\\nelseif(UNIX AND NOT APPLE)\\n  if(SDL_AUDIO)\\n    if(SYSV5 OR SOLARIS OR HPUX)\\n        set(SDL_AUDIO_DRIVER_SUNAUDIO 1)\\n        file(GLOB SUN_AUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/sun\/*.c)\\n        set(SOURCE_FILES ${SOURCE_FILES} ${SUN_AUDIO_SOURCES})\\n        set(HAVE_SDL_AUDIO TRUE)\\n    elseif(NETBSD OR OPENBSD)\\n        set(SDL_AUDIO_DRIVER_BSD 1)\\n        file(GLOB BSD_AUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/bsd\/*.c)\\n        set(SOURCE_FILES ${SOURCE_FILES} ${BSD_AUDIO_SOURCES})\\n        set(HAVE_SDL_AUDIO TRUE)\\n    elseif(AIX)\\n        set(SDL_AUDIO_DRIVER_PAUDIO 1)\\n        file(GLOB AIX_AUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/paudio\/*.c)\\n        set(SOURCE_FILES ${SOURCE_FILES} ${AIX_AUDIO_SOURCES})\\n        set(HAVE_SDL_AUDIO TRUE)\\n    endif()\\n    CheckOSS()\\n    CheckALSA()\\n    CheckPulseAudio()\\n    CheckESD()\\n    CheckARTS()\\n    CheckNAS()\\n    CheckSNDIO()\\n    CheckFusionSound()\\n  endif()\\n\\n  if(SDL_VIDEO)\\n    # Need to check for Raspberry PI first and add platform specific compiler flags, otherwise the test for GLES fails!\\n    CheckRPI()\\n    CheckX11()\\n    CheckMir()\\n    CheckDirectFB()\\n    CheckOpenGLX11()\\n    CheckOpenGLESX11()\\n    CheckWayland()\\n    CheckVivante()\\n  endif()\\n\\n  if(LINUX)\\n    check_c_source_compiles(\\\"\\n        #include <linux\/input.h>\\n        #ifndef EVIOCGNAME\\n        #error EVIOCGNAME() ioctl not available\\n        #endif\\n        int main(int argc, char** argv) {}\\\" HAVE_INPUT_EVENTS)\\n\\n    check_c_source_compiles(\\\"\\n        #include <linux\/kd.h>\\n        #include <linux\/keyboard.h>\\n\\n        int main(int argc, char **argv)\\n        {\\n            struct kbentry kbe;\\n            kbe.kb_table = KG_CTRL;\\n            ioctl(0, KDGKBENT, &kbe);\\n        }\\\" HAVE_INPUT_KD)\\n\\n    file(GLOB CORE_SOURCES ${SDL2_SOURCE_DIR}\/src\/core\/linux\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${CORE_SOURCES})\\n\\n    if(HAVE_INPUT_EVENTS)\\n      set(SDL_INPUT_LINUXEV 1)\\n    endif()\\n\\n    if(SDL_HAPTIC AND HAVE_INPUT_EVENTS)\\n      set(SDL_HAPTIC_LINUX 1)\\n      file(GLOB HAPTIC_SOURCES ${SDL2_SOURCE_DIR}\/src\/haptic\/linux\/*.c)\\n      set(SOURCE_FILES ${SOURCE_FILES} ${HAPTIC_SOURCES})\\n      set(HAVE_SDL_HAPTIC TRUE)\\n    endif()\\n\\n    if(HAVE_INPUT_KD)\\n      set(SDL_INPUT_LINUXKD 1)\\n    endif()\\n\\n    check_include_file(\\\"libudev.h\\\" HAVE_LIBUDEV_H)\\n\\n    # !!! FIXME: this needs pkg-config to find the include path, I think.\\n    check_include_file(\\\"dbus\/dbus.h\\\" HAVE_DBUS_DBUS_H)\\n  endif()\\n\\n  if(INPUT_TSLIB)\\n    check_c_source_compiles(\\\"\\n        #include \\\\\\\"tslib.h\\\\\\\"\\n        int main(int argc, char** argv) { }\\\" HAVE_INPUT_TSLIB)\\n    if(HAVE_INPUT_TSLIB)\\n      set(SDL_INPUT_TSLIB 1)\\n      list(APPEND EXTRA_LIBS ts)\\n    endif()\\n  endif()\\n\\n  if(SDL_JOYSTICK)\\n    CheckUSBHID()   # seems to be BSD specific - limit the test to BSD only?\\n    if(LINUX AND NOT ANDROID)\\n      set(SDL_JOYSTICK_LINUX 1)\\n      file(GLOB JOYSTICK_SOURCES ${SDL2_SOURCE_DIR}\/src\/joystick\/linux\/*.c)\\n      set(SOURCE_FILES ${SOURCE_FILES} ${JOYSTICK_SOURCES})\\n      set(HAVE_SDL_JOYSTICK TRUE)\\n    endif()\\n  endif()\\n\\n  CheckPTHREAD()\\n\\n  if(CLOCK_GETTIME)\\n    check_library_exists(rt clock_gettime \\\"\\\" FOUND_CLOCK_GETTIME)\\n    if(FOUND_CLOCK_GETTIME)\\n      list(APPEND EXTRA_LIBS rt)\\n      set(HAVE_CLOCK_GETTIME 1)\\n    else()\\n      check_library_exists(c clock_gettime \\\"\\\" FOUND_CLOCK_GETTIME)\\n      if(FOUND_CLOCK_GETTIME)\\n        set(HAVE_CLOCK_GETTIME 1)\\n      endif()\\n    endif()\\n  endif()\\n\\n  check_include_file(linux\/version.h HAVE_LINUX_VERSION_H)\\n  if(HAVE_LINUX_VERSION_H)\\n    set(CMAKE_C_FLAGS \\\"${CMAKE_C_FLAGS} -DHAVE_LINUX_VERSION_H\\\")\\n  endif()\\n\\n  if(SDL_POWER)\\n    if(LINUX)\\n      set(SDL_POWER_LINUX 1)\\n      file(GLOB POWER_SOURCES ${SDL2_SOURCE_DIR}\/src\/power\/linux\/*.c)\\n      set(SOURCE_FILES ${SOURCE_FILES} ${POWER_SOURCES})\\n      set(HAVE_SDL_POWER TRUE)\\n    endif()\\n  endif()\\n\\n  if(SDL_FILESYSTEM)\\n    set(SDL_FILESYSTEM_UNIX 1)\\n    file(GLOB FILESYSTEM_SOURCES ${SDL2_SOURCE_DIR}\/src\/filesystem\/unix\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${FILESYSTEM_SOURCES})\\n    set(HAVE_SDL_FILESYSTEM TRUE)\\n  endif()\\n\\n  if(SDL_TIMERS)\\n    set(SDL_TIMER_UNIX 1)\\n    file(GLOB TIMER_SOURCES ${SDL2_SOURCE_DIR}\/src\/timer\/unix\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${TIMER_SOURCES})\\n    set(HAVE_SDL_TIMERS TRUE)\\n  endif()\\n\\n  if(RPATH)\\n    set(SDL_RLD_FLAGS \\\"\\\")\\n    if(BSDI OR FREEBSD OR LINUX OR NETBSD)\\n      set(SDL_RLD_FLAGS \\\"-Wl,-rpath,\\\\${libdir}\\\")\\n    elseif(SOLARIS)\\n      set(SDL_RLD_FLAGS \\\"-R\\\\${libdir}\\\")\\n    endif()\\n    set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\\n    set(HAVE_RPATH TRUE)\\n  endif()\\n\\nelseif(WINDOWS)\\n  find_program(WINDRES windres)\\n\\n  check_c_source_compiles(\\\"\\n    #include <windows.h>\\n    int main(int argc, char **argv) { }\\\" HAVE_WIN32_CC)\\n\\n  file(GLOB CORE_SOURCES ${SDL2_SOURCE_DIR}\/src\/core\/windows\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${CORE_SOURCES})\\n\\n  if(MSVC)\\n    # Prevent codegen that would use the VC runtime libraries.\\n    add_definitions(\/GS-)\\n    if(NOT ARCH_64)\\n      add_definitions(\/arch:SSE)\\n    endif()\\n  endif()\\n\\n  # Check for DirectX\\n  if(DIRECTX)\\n    if(DEFINED MSVC_VERSION AND NOT ${MSVC_VERSION} LESS 1700)\\n        set(USE_WINSDK_DIRECTX TRUE)\\n    endif()\\n    if(NOT CMAKE_COMPILER_IS_MINGW AND NOT USE_WINSDK_DIRECTX)\\n      if(\\\"$ENV{DXSDK_DIR}\\\" STREQUAL \\\"\\\")\\n        message_error(\\\"DIRECTX requires the \\\\$DXSDK_DIR environment variable to be set\\\")\\n      endif()\\n      set(CMAKE_REQUIRED_FLAGS \\\"\/I\\\\\\\"$ENV{DXSDK_DIR}\\\\\\\\Include\\\\\\\"\\\")\\n    endif()\\n\\n    if(HAVE_WIN32_CC)\\n      # xinput.h may need windows.h, but doesn't include it itself.\\n      check_c_source_compiles(\\\"\\n        #include <windows.h>\\n        #include <xinput.h>\\n        int main(int argc, char **argv) { }\\\" HAVE_XINPUT_H)\\n    else()\\n      check_include_file(xinput.h HAVE_XINPUT_H)\\n    endif()\\n\\n    check_include_file(d3d9.h HAVE_D3D_H)\\n    check_include_file(d3d11_1.h HAVE_D3D11_H)\\n    check_include_file(ddraw.h HAVE_DDRAW_H)\\n    check_include_file(dsound.h HAVE_DSOUND_H)\\n    check_include_file(dinput.h HAVE_DINPUT_H)\\n    check_include_file(xaudio2.h HAVE_XAUDIO2_H)\\n    check_include_file(dxgi.h HAVE_DXGI_H)\\n    if(HAVE_D3D_H OR HAVE_D3D11_H OR HAVE_DDRAW_H OR HAVE_DSOUND_H OR HAVE_DINPUT_H OR HAVE_XAUDIO2_H)\\n      set(HAVE_DIRECTX TRUE)\\n      if(NOT CMAKE_COMPILER_IS_MINGW AND NOT USE_WINSDK_DIRECTX)\\n      # TODO: change $ENV{DXSDL_DIR} to get the path from the include checks\\n        link_directories($ENV{DXSDK_DIR}\\\\\\\\lib\\\\\\\\${PROCESSOR_ARCH})\\n        include_directories($ENV{DXSDK_DIR}\\\\\\\\Include)\\n      endif()\\n    endif()\\n    set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\\n  endif()\\n\\n  if(SDL_AUDIO)\\n    set(SDL_AUDIO_DRIVER_WINMM 1)\\n    file(GLOB WINMM_AUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/winmm\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${WINMM_AUDIO_SOURCES})\\n    set(HAVE_SDL_AUDIO TRUE)\\n\\n    if(HAVE_DSOUND_H)\\n      set(SDL_AUDIO_DRIVER_DSOUND 1)\\n      file(GLOB DSOUND_AUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/directsound\/*.c)\\n      set(SOURCE_FILES ${SOURCE_FILES} ${DSOUND_AUDIO_SOURCES})\\n    endif()\\n\\n    if(HAVE_XAUDIO2_H)\\n      set(SDL_AUDIO_DRIVER_XAUDIO2 1)\\n      file(GLOB XAUDIO2_AUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/xaudio2\/*.c)\\n      set(SOURCE_FILES ${SOURCE_FILES} ${XAUDIO2_AUDIO_SOURCES})\\n    endif()\\n  endif()\\n\\n  if(SDL_VIDEO)\\n    # requires SDL_LOADSO on Windows (IME, DX, etc.)\\n    if(NOT SDL_LOADSO)\\n      message_error(\\\"SDL_VIDEO requires SDL_LOADSO, which is not enabled\\\")\\n    endif()\\n    set(SDL_VIDEO_DRIVER_WINDOWS 1)\\n    file(GLOB WIN_VIDEO_SOURCES ${SDL2_SOURCE_DIR}\/src\/video\/windows\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${WIN_VIDEO_SOURCES})\\n\\n    if(RENDER_D3D AND HAVE_D3D_H)\\n      set(SDL_VIDEO_RENDER_D3D 1)\\n      set(HAVE_RENDER_D3D TRUE)\\n    endif()\\n    if(RENDER_D3D AND HAVE_D3D11_H)\\n      set(SDL_VIDEO_RENDER_D3D11 1)\\n      set(HAVE_RENDER_D3D TRUE)\\n    endif()\\n    set(HAVE_SDL_VIDEO TRUE)\\n  endif()\\n\\n  if(SDL_THREADS)\\n    set(SDL_THREAD_WINDOWS 1)\\n    set(SOURCE_FILES ${SOURCE_FILES}\\n      ${SDL2_SOURCE_DIR}\/src\/thread\/windows\/SDL_sysmutex.c\\n      ${SDL2_SOURCE_DIR}\/src\/thread\/windows\/SDL_syssem.c\\n      ${SDL2_SOURCE_DIR}\/src\/thread\/windows\/SDL_systhread.c\\n      ${SDL2_SOURCE_DIR}\/src\/thread\/windows\/SDL_systls.c\\n      ${SDL2_SOURCE_DIR}\/src\/thread\/generic\/SDL_syscond.c)\\n    set(HAVE_SDL_THREADS TRUE)\\n  endif()\\n\\n  if(SDL_POWER)\\n    set(SDL_POWER_WINDOWS 1)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${SDL2_SOURCE_DIR}\/src\/power\/windows\/SDL_syspower.c)\\n    set(HAVE_SDL_POWER TRUE)\\n  endif()\\n\\n  if(SDL_FILESYSTEM)\\n    set(SDL_FILESYSTEM_WINDOWS 1)\\n    file(GLOB FILESYSTEM_SOURCES ${SDL2_SOURCE_DIR}\/src\/filesystem\/windows\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${FILESYSTEM_SOURCES})\\n    set(HAVE_SDL_FILESYSTEM TRUE)\\n  endif()\\n\\n  # Libraries for Win32 native and MinGW\\n  list(APPEND EXTRA_LIBS user32 gdi32 winmm imm32 ole32 oleaut32 version uuid)\\n\\n  # TODO: in configure.in the check for timers is set on\\n  # cygwin | mingw32* - does this include mingw32CE?\\n  if(SDL_TIMERS)\\n    set(SDL_TIMER_WINDOWS 1)\\n    file(GLOB TIMER_SOURCES ${SDL2_SOURCE_DIR}\/src\/timer\/windows\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${TIMER_SOURCES})\\n    set(HAVE_SDL_TIMERS TRUE)\\n  endif()\\n\\n  if(SDL_LOADSO)\\n    set(SDL_LOADSO_WINDOWS 1)\\n    file(GLOB LOADSO_SOURCES ${SDL2_SOURCE_DIR}\/src\/loadso\/windows\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${LOADSO_SOURCES})\\n    set(HAVE_SDL_LOADSO TRUE)\\n  endif()\\n\\n  file(GLOB CORE_SOURCES ${SDL2_SOURCE_DIR}\/src\/core\/windows\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${CORE_SOURCES})\\n\\n  if(SDL_VIDEO)\\n    if(VIDEO_OPENGL)\\n      set(SDL_VIDEO_OPENGL 1)\\n      set(SDL_VIDEO_OPENGL_WGL 1)\\n      set(SDL_VIDEO_RENDER_OGL 1)\\n      set(HAVE_VIDEO_OPENGL TRUE)\\n    endif()\\n\\n    if(VIDEO_OPENGLES)\\n      set(SDL_VIDEO_OPENGL_EGL 1)\\n      set(SDL_VIDEO_OPENGL_ES2 1)\\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\\n      set(HAVE_VIDEO_OPENGLES TRUE)\\n    endif()\\n  endif()\\n\\n  if(SDL_JOYSTICK)\\n    file(GLOB JOYSTICK_SOURCES ${SDL2_SOURCE_DIR}\/src\/joystick\/windows\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${JOYSTICK_SOURCES})\\n    if(HAVE_DINPUT_H)\\n      set(SDL_JOYSTICK_DINPUT 1)\\n      list(APPEND EXTRA_LIBS dinput8 dxguid)\\n      if(CMAKE_COMPILER_IS_MINGW)\\n        list(APPEND EXTRA_LIBS dxerr8)\\n      elseif (NOT USE_WINSDK_DIRECTX)\\n        list(APPEND EXTRA_LIBS dxerr)\\n      endif()\\n    endif()\\n    if(HAVE_XINPUT_H)\\n      set(SDL_JOYSTICK_XINPUT 1)\\n    endif()\\n    if(NOT HAVE_DINPUT_H AND NOT HAVE_XINPUT_H)\\n      set(SDL_JOYSTICK_WINMM 1)\\n    endif()\\n    set(HAVE_SDL_JOYSTICK TRUE)\\n\\n    if(SDL_HAPTIC)\\n      if(HAVE_DINPUT_H OR HAVE_XINPUT_H)\\n        file(GLOB HAPTIC_SOURCES ${SDL2_SOURCE_DIR}\/src\/haptic\/windows\/*.c)\\n        if(HAVE_DINPUT_H)\\n          set(SDL_HAPTIC_DINPUT 1)\\n        endif()\\n        if(HAVE_XINPUT_H)\\n          set(SDL_HAPTIC_XINPUT 1)\\n        endif()\\n      else()\\n        file(GLOB HAPTIC_SOURCES ${SDL2_SOURCE_DIR}\/src\/haptic\/dummy\/*.c)\\n        set(SDL_HAPTIC_DUMMY 1)\\n      endif()\\n      set(SOURCE_FILES ${SOURCE_FILES} ${HAPTIC_SOURCES})\\n      set(HAVE_SDL_HAPTIC TRUE)\\n    endif()\\n  endif()\\n\\n  file(GLOB VERSION_SOURCES ${SDL2_SOURCE_DIR}\/src\/main\/windows\/*.rc)\\n  if(MINGW OR CYGWIN)\\n    list(APPEND EXTRA_LIBS mingw32)\\n    list(APPEND EXTRA_LDFLAGS \\\"-mwindows\\\")\\n  endif()\\nelseif(APPLE)\\n  # TODO: rework this for proper MacOS X, iOS and Darwin support\\n\\n  # Requires the darwin file implementation\\n  if(SDL_FILE)\\n    file(GLOB EXTRA_SOURCES ${SDL2_SOURCE_DIR}\/src\/file\/cocoa\/*.m)\\n    set(SOURCE_FILES ${EXTRA_SOURCES} ${SOURCE_FILES})\\n    set_source_files_properties(${EXTRA_SOURCES} PROPERTIES LANGUAGE C)\\n    set(HAVE_SDL_FILE TRUE)\\n    set(SDL_FRAMEWORK_COCOA 1)\\n    set(SDL_FRAMEWORK_COREVIDEO 1)\\n  else()\\n    message_error(\\\"SDL_FILE must be enabled to build on MacOS X\\\")\\n  endif()\\n\\n  if(SDL_AUDIO)\\n    set(SDL_AUDIO_DRIVER_COREAUDIO 1)\\n    file(GLOB AUDIO_SOURCES ${SDL2_SOURCE_DIR}\/src\/audio\/coreaudio\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${AUDIO_SOURCES})\\n    set(HAVE_SDL_AUDIO TRUE)\\n    set(SDL_FRAMEWORK_COREAUDIO 1)\\n    set(SDL_FRAMEWORK_AUDIOUNIT 1)\\n  endif()\\n\\n  if(SDL_JOYSTICK)\\n    set(SDL_JOYSTICK_IOKIT 1)\\n    file(GLOB JOYSTICK_SOURCES ${SDL2_SOURCE_DIR}\/src\/joystick\/darwin\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${JOYSTICK_SOURCES})\\n    set(HAVE_SDL_JOYSTICK TRUE)\\n    set(SDL_FRAMEWORK_IOKIT 1)\\n    set(SDL_FRAMEWORK_FF 1)\\n  endif()\\n\\n  if(SDL_HAPTIC)\\n    set(SDL_HAPTIC_IOKIT 1)\\n    file(GLOB HAPTIC_SOURCES ${SDL2_SOURCE_DIR}\/src\/haptic\/darwin\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${HAPTIC_SOURCES})\\n    set(HAVE_SDL_HAPTIC TRUE)\\n    set(SDL_FRAMEWORK_IOKIT 1)\\n    set(SDL_FRAMEWORK_FF 1)\\n    if(NOT SDL_JOYSTICK)\\n      message(FATAL_ERROR \\\"SDL_HAPTIC requires SDL_JOYSTICK to be enabled\\\")\\n    endif()\\n  endif()\\n\\n  if(SDL_POWER)\\n    set(SDL_POWER_MACOSX 1)\\n    file(GLOB POWER_SOURCES ${SDL2_SOURCE_DIR}\/src\/power\/macosx\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${POWER_SOURCES})\\n    set(HAVE_SDL_POWER TRUE)\\n    set(SDL_FRAMEWORK_CARBON 1)\\n    set(SDL_FRAMEWORK_IOKIT 1)\\n  endif()\\n\\n  if(SDL_TIMERS)\\n    set(SDL_TIMER_UNIX 1)\\n    file(GLOB TIMER_SOURCES ${SDL2_SOURCE_DIR}\/src\/timer\/unix\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${TIMER_SOURCES})\\n    set(HAVE_SDL_TIMERS TRUE)\\n  endif(SDL_TIMERS)\\n\\n  if(SDL_FILESYSTEM)\\n    set(SDL_FILESYSTEM_COCOA 1)\\n    file(GLOB FILESYSTEM_SOURCES ${SDL2_SOURCE_DIR}\/src\/filesystem\/cocoa\/*.m)\\n    set_source_files_properties(${FILESYSTEM_SOURCES} PROPERTIES LANGUAGE C)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${FILESYSTEM_SOURCES})\\n    set(HAVE_SDL_FILESYSTEM TRUE)\\n  endif()\\n\\n  # Actually load the frameworks at the end so we don't duplicate include.\\n  if(SDL_FRAMEWORK_COREVIDEO)\\n    find_library(COREVIDEO CoreVideo)\\n    list(APPEND EXTRA_LIBS ${COREVIDEO})\\n  endif()\\n  if(SDL_FRAMEWORK_COCOA)\\n    find_library(COCOA_LIBRARY Cocoa)\\n    list(APPEND EXTRA_LIBS ${COCOA_LIBRARY})\\n  endif()\\n  if(SDL_FRAMEWORK_IOKIT)\\n    find_library(IOKIT IOKit)\\n    list(APPEND EXTRA_LIBS ${IOKIT})\\n  endif()\\n  if(SDL_FRAMEWORK_FF)\\n    find_library(FORCEFEEDBACK ForceFeedback)\\n    list(APPEND EXTRA_LIBS ${FORCEFEEDBACK})\\n  endif()\\n  if(SDL_FRAMEWORK_CARBON)\\n    find_library(CARBON_LIBRARY Carbon)\\n    list(APPEND EXTRA_LIBS ${CARBON_LIBRARY})\\n  endif()\\n  if(SDL_FRAMEWORK_COREAUDIO)\\n    find_library(COREAUDIO CoreAudio)\\n    list(APPEND EXTRA_LIBS ${COREAUDIO})\\n  endif()\\n  if(SDL_FRAMEWORK_AUDIOUNIT)\\n    find_library(AUDIOUNIT AudioUnit)\\n    list(APPEND EXTRA_LIBS ${AUDIOUNIT})\\n  endif()\\n\\n  # iOS hack needed - http:\/\/code.google.com\/p\/ios-cmake\/ ?\\n  if(SDL_VIDEO)\\n    CheckCOCOA()\\n    if(VIDEO_OPENGL)\\n      set(SDL_VIDEO_OPENGL 1)\\n      set(SDL_VIDEO_OPENGL_CGL 1)\\n      set(SDL_VIDEO_RENDER_OGL 1)\\n      set(HAVE_VIDEO_OPENGL TRUE)\\n    endif()\\n  endif()\\n\\n  CheckPTHREAD()\\nelseif(HAIKU)\\n  if(SDL_VIDEO)\\n    set(SDL_VIDEO_DRIVER_HAIKU 1)\\n    file(GLOB HAIKUVIDEO_SOURCES ${SDL2_SOURCE_DIR}\/src\/video\/haiku\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${HAIKUVIDEO_SOURCES})\\n    set(HAVE_SDL_VIDEO TRUE)\\n\\n    set(SDL_FILESYSTEM_HAIKU 1)\\n    file(GLOB FILESYSTEM_SOURCES ${SDL2_SOURCE_DIR}\/src\/filesystem\/haiku\/*.cc)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${FILESYSTEM_SOURCES})\\n    set(HAVE_SDL_FILESYSTEM TRUE)\\n\\n    if(SDL_TIMERS)\\n      set(SDL_TIMER_HAIKU 1)\\n      file(GLOB TIMER_SOURCES ${SDL2_SOURCE_DIR}\/src\/timer\/haiku\/*.c)\\n      set(SOURCE_FILES ${SOURCE_FILES} ${TIMER_SOURCES})\\n      set(HAVE_SDL_TIMERS TRUE)\\n    endif(SDL_TIMERS)\\n\\n    if(VIDEO_OPENGL)\\n      # TODO: Use FIND_PACKAGE(OpenGL) instead\\n      set(SDL_VIDEO_OPENGL 1)\\n      set(SDL_VIDEO_OPENGL_BGL 1)\\n      set(SDL_VIDEO_RENDER_OGL 1)\\n      list(APPEND EXTRA_LIBS GL)\\n      set(HAVE_VIDEO_OPENGL TRUE)\\n    endif()\\n  endif()\\n\\n  CheckPTHREAD()\\nendif()\\n\\n# Dummies\\n# configure.in does it differently:\\n# if not have X\\n#   if enable_X {  SDL_X_DISABLED = 1 }\\n#   [add dummy sources]\\n# so it always adds a dummy, without checking, if it was actually requested.\\n# This leads to missing internal references on building, since the\\n# src\/X\/*.c does not get included.\\nif(NOT HAVE_SDL_JOYSTICK)\\n  set(SDL_JOYSTICK_DISABLED 1)\\n  if(SDL_JOYSTICK AND NOT APPLE) # results in unresolved symbols on OSX\\n\\n    file(GLOB JOYSTICK_SOURCES ${SDL2_SOURCE_DIR}\/src\/joystick\/dummy\/*.c)\\n    set(SOURCE_FILES ${SOURCE_FILES} ${JOYSTICK_SOURCES})\\n  endif()\\nendif()\\nif(NOT HAVE_SDL_HAPTIC)\\n  set(SDL_HAPTIC_DISABLED 1)\\n  file(GLOB HAPTIC_SOURCES ${SDL2_SOURCE_DIR}\/src\/haptic\/dummy\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${HAPTIC_SOURCES})\\nendif()\\nif(NOT HAVE_SDL_LOADSO)\\n  set(SDL_LOADSO_DISABLED 1)\\n  file(GLOB LOADSO_SOURCES ${SDL2_SOURCE_DIR}\/src\/loadso\/dummy\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${LOADSO_SOURCES})\\nendif()\\nif(NOT HAVE_SDL_FILESYSTEM)\\n  set(SDL_FILESYSTEM_DISABLED 1)\\n  file(GLOB FILESYSTEM_SOURCES ${SDL2_SOURCE_DIR}\/src\/filesystem\/dummy\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${FILESYSTEM_SOURCES})\\nendif()\\n\\n# We always need to have threads and timers around\\nif(NOT HAVE_SDL_THREADS)\\n  set(SDL_THREADS_DISABLED 1)\\n  file(GLOB THREADS_SOURCES ${SDL2_SOURCE_DIR}\/src\/thread\/generic\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${THREADS_SOURCES})\\nendif()\\nif(NOT HAVE_SDL_TIMERS)\\n  set(SDL_TIMERS_DISABLED 1)\\n  file(GLOB TIMER_SOURCES ${SDL2_SOURCE_DIR}\/src\/timer\/dummy\/*.c)\\n  set(SOURCE_FILES ${SOURCE_FILES} ${TIMER_SOURCES})\\nendif()\\n\\nconfigure_file(\\\"${SDL2_SOURCE_DIR}\/include\/SDL_config.h.cmake\\\"\\n  \\\"${SDL2_BINARY_DIR}\/include\/SDL_config.h\\\")\\n\\n# Prepare the flags and remove duplicates\\nif(EXTRA_LDFLAGS)\\n  list(REMOVE_DUPLICATES EXTRA_LDFLAGS)\\nendif()\\nif(EXTRA_LIBS)\\n  list(REMOVE_DUPLICATES EXTRA_LIBS)\\nendif()\\nif(EXTRA_CFLAGS)\\n  list(REMOVE_DUPLICATES EXTRA_CFLAGS)\\nendif()\\nlisttostr(EXTRA_CFLAGS _EXTRA_CFLAGS)\\nset(EXTRA_CFLAGS ${_EXTRA_CFLAGS})\\n\\n##### Info output #####\\nmessage(STATUS \\\"\\\")\\nmessage(STATUS \\\"SDL2 was configured with the following options:\\\")\\nmessage(STATUS \\\"\\\")\\nmessage(STATUS \\\"Platform: ${CMAKE_SYSTEM}\\\")\\nmessage(STATUS \\\"64-bit:   ${ARCH_64}\\\")\\nmessage(STATUS \\\"Compiler: ${CMAKE_C_COMPILER}\\\")\\nmessage(STATUS \\\"\\\")\\nmessage(STATUS \\\"Subsystems:\\\")\\nforeach(_SUB ${SDL_SUBSYSTEMS})\\n  string(TOUPPER ${_SUB} _OPT)\\n  message_bool_option(${_SUB} SDL_${_OPT})\\nendforeach()\\nmessage(STATUS \\\"\\\")\\nmessage(STATUS \\\"Options:\\\")\\nlist(SORT ALLOPTIONS)\\nforeach(_OPT ${ALLOPTIONS})\\n  # Longest option is VIDEO_X11_XSCREENSAVER = 22 characters\\n  # Get the padding\\n  string(LENGTH ${_OPT} _OPTLEN)\\n  math(EXPR _PADLEN \\\"23 - ${_OPTLEN}\\\")\\n  string(RANDOM LENGTH ${_PADLEN} ALPHABET \\\" \\\" _PADDING)\\n  message_tested_option(${_OPT} ${_PADDING})\\nendforeach()\\nmessage(STATUS \\\"\\\")\\nmessage(STATUS \\\" CFLAGS:        ${CMAKE_C_FLAGS}\\\")\\nmessage(STATUS \\\" EXTRA_CFLAGS:  ${EXTRA_CFLAGS}\\\")\\nmessage(STATUS \\\" EXTRA_LDFLAGS: ${EXTRA_LDFLAGS}\\\")\\nmessage(STATUS \\\" EXTRA_LIBS:    ${EXTRA_LIBS}\\\")\\nmessage(STATUS \\\"\\\")\\nif(UNIX)\\n  message(STATUS \\\"If something was not detected, although the libraries\\\")\\n  message(STATUS \\\"were installed, then make sure you have set the\\\")\\n  message(STATUS \\\"CFLAGS and LDFLAGS environment variables correctly.\\\")\\n  message(STATUS \\\"\\\")\\nendif()\\n\\n# Ensure that the extra cflags are used at compile time\\nset(CMAKE_C_FLAGS \\\"${CMAKE_C_FLAGS} ${EXTRA_CFLAGS}\\\")\\n\\nset(src ${SOURCE_FILES})\\n\"\npost_target: !<!> \"if(MSVC)\\nset_target_properties(${this} PROPERTIES LINK_FLAGS_RELEASE \\\"\/NODEFAULTLIB\\\")\\nset_target_properties(${this} PROPERTIES LINK_FLAGS_DEBUG \\\"\/NODEFAULTLIB\\\")\\nset_target_properties(${this} PROPERTIES STATIC_LIBRARY_FLAGS \\\"\/NODEFAULTLIB\\\")\\nendif()\\n# TODO: Win32 platforms keep the same suffix .lib for import and static\\n# libraries - do we need to consider this?\\ntarget_link_libraries(${this} PUBLIC ${EXTRA_LIBS})\\ntarget_link_libraries(${this} PRIVATE ${EXTRA_LDFLAGS})\"\nsource:\n  remote: !<!> https:\/\/www.libsdl.org\/release\/SDL2-2.0.4.tar.gz",
    "version": "2.0.4",
    "source": {
        "remote": {
            "url": "https:\/\/www.libsdl.org\/release\/SDL2-2.0.4.tar.gz"
        }
    }
}

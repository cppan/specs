{
    "project": "pvt.cppan.demo.stellar_group.hpx.hpx",
    "cppan": "source:\n    git: https:\/\/github.com\/STEllAR-GROUP\/hpx\n    tag: 1.0.0\n\nversion: 1.0.0\n\ntype: library\n\nshared_only: true\n\nfiles:\n    -   cmake\/.*\n    -   hpx\/.*\n    -   plugins\/parcelport\/tcp\/.*\n    -   src\/.*\n\nexclude_from_build:\n    -   cmake\/.*\n    -   src\/components\/.*\n    -   src\/hpx_main.*\n    -   src\/hpx_user.*\n    -   src\/main.cpp\n\ninclude_directories:\n    public:\n        -   .\n\noptions:\n    any:\n        definitions:\n            private:\n                -   HPX_APPLICATION_EXPORTS\n                -   HPX_COMPONENT_EXPORTS\n                -   HPX_COROUTINE_EXPORTS\n                -   HPX_EXPORTS\n                -   HPX_LIBRARY_EXPORTS\n                -   HPX_SERIALIZATION_EXPORTS\n        compile_options:\n            msvc:\n                private:\n                    -   \/bigobj\n        link_libraries:\n            win32:\n                public:\n                    -   Dbghelp\n                    -   Psapi\n                    -   Shlwapi\n    static:\n        definitions:\n            public:\n                -   HPX_HAVE_STATIC_LINKING\n\ndependencies:\n    public:\n        pvt.cppan.demo.boost.accumulators:\n            version: 1\n        pvt.cppan.demo.boost.any:\n            version: 1\n        pvt.cppan.demo.boost.asio:\n            version: 1\n        pvt.cppan.demo.boost.assign:\n            version: 1\n        pvt.cppan.demo.boost.bimap:\n            version: 1\n        pvt.cppan.demo.boost.date_time:\n            version: 1\n        pvt.cppan.demo.boost.dynamic_bitset:\n            version: 1\n        pvt.cppan.demo.boost.filesystem:\n            version: 1\n        pvt.cppan.demo.boost.format:\n            version: 1\n        pvt.cppan.demo.boost.icl:\n            version: 1\n        pvt.cppan.demo.boost.iostreams:\n            version: 1\n        pvt.cppan.demo.boost.lockfree:\n            version: 1\n        pvt.cppan.demo.boost.program_options:\n            version: 1\n        pvt.cppan.demo.boost.regex:\n            version: 1\n        pvt.cppan.demo.boost.signals2:\n            version: 1\n        pvt.cppan.demo.boost.thread:\n            version: 1\n        pvt.cppan.demo.google.snappy:\n            version: master\n        pvt.cppan.demo.open_mpi.hwloc:\n            version: 1\n\npost_sources: |\n    set(PROJECT_SOURCE_DIR ${SDIR})\n    set(PROJECT_BINARY_DIR ${BDIR})\n    \n    if (WIN32)\n        #if (CMAKE_SIZEOF_VOID_P EQUAL 4)\n            remove_src(src\/runtime\/threads\/coroutines\/switch_to_fiber.asm)\n        #endif()\n        remove_src_dir(src\/components\/performance_counters\/io\/*)\n    endif()\n    \n    \n    set(HPX_MAJOR_VERSION 1)\n    set(HPX_MINOR_VERSION 0)\n    set(HPX_PATCH_LEVEL   0)\n    set(HPX_VERSION \"${HPX_MAJOR_VERSION}.${HPX_MINOR_VERSION}.${HPX_PATCH_LEVEL}\")\n    set(HPX_LIBRARY_VERSION \"${HPX_VERSION}\")\n    set(HPX_SOVERSION ${HPX_MAJOR_VERSION})\n    set(HPX_PACKAGE_NAME HPX)\n    \n    ################################################################################\n    # CMake configuration\n    ################################################################################\n    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${SDIR}\/cmake\")\n    \n    # We safe the passed compiler flag to a special variable. This is needed for our\n    # build system unit tests. Some flags might influence the created symbols (\n    # _GLIBCXX_DEBUG i look at you)\n    set(CMAKE_CXX_FLAGS_SAFE ${CMAKE_CXX_FLAGS})\n    \n    include(CheckCXXCompilerFlag)\n    include(CMakeDependentOption)\n    \n    # include additional macro definitions\n    include(HPX_Utils)\n    include(HPX_ExportTargets)\n    include(HPX_Libraries)\n    include(HPX_LibraryDir)\n    include(HPX_AddConfigTest)\n    include(HPX_AddDefinitions)\n    \n    hpx_force_out_of_tree_build(\"This project requires an out-of-source-tree build. See README.rst. Clean your CMake cache and CMakeFiles if this message persists.\")\n    \n    if(NOT HPX_CMAKE_LOGLEVEL)\n      set(HPX_CMAKE_LOGLEVEL \"WARN\")\n    endif()\n    \n    ################################################################################\n    # Fortran compiler detection\n    #\n    hpx_option(HPX_WITH_FORTRAN\n      BOOL\n      \"Enable or disable the compilation of Fortran examples using HPX\"\n      OFF ADVANCED)\n    \n    if (HPX_WITH_FORTRAN)\n      include(HPX_FortranCompiler)\n    endif()\n    \n    ################################################################################\n    \n    ################################################################################\n    # Setup platform for which HPX should be compiled for.\n    #\n    include(HPX_SetPlatform)\n    if(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n      unset(HPX_LIBRARY_VERSION)\n      unset(HPX_SOVERSION)\n    endif()\n    ################################################################################\n    \n    ################################################################################\n    # Set our build options cache variables which are customizable by users\n    #\n    \n    ## Generic build options\n    set(DEFAULT_MALLOC \"system\")\n    if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n      set(DEFAULT_MALLOC \"tcmalloc\")\n    #    set(DEFAULT_MALLOC \"jemalloc\")\n    endif()\n    \n    hpx_option(HPX_WITH_MALLOC\n      STRING\n      \"Define which allocator should be linked in. Options are: system, tcmalloc, jemalloc, tbbmalloc, and custom (default is: tcmalloc)\"\n      ${DEFAULT_MALLOC}\n      STRINGS \"system;tcmalloc;jemalloc;tbbmalloc;custom\")\n    \n    hpx_option(HPX_WITH_HWLOC\n      BOOL\n      \"Use Hwloc for hardware topology information and thread pinning. If disabled, performance might be reduced.\"\n      ON ADVANCED)\n    \n    # Logging configuration\n    hpx_option(HPX_WITH_LOGGING BOOL\n      \"Build HPX with logging enabled (default: ON).\"\n      ON ADVANCED)\n    if(HPX_WITH_LOGGING)\n      hpx_add_config_define(HPX_HAVE_LOGGING)\n    endif()\n    \n    ## Compiler related build options\n    hpx_option(HPX_WITH_GCC_VERSION_CHECK BOOL\n      \"Don't ignore version reported by gcc (default: ON)\"\n      ON ADVANCED)\n    \n    hpx_option(HPX_WITH_DEFAULT_TARGETS BOOL\n      \"Associate the core HPX library with the default build target (default: ON).\"\n      ON ADVANCED CATEGORY \"Build Targets\")\n    \n    hpx_option(HPX_WITH_COMPILER_WARNINGS BOOL\n      \"Enable compiler warnings (default: ON)\"\n      ON ADVANCED)\n    \n    hpx_option(HPX_WITH_DOCUMENTATION BOOL\n      \"Build the HPX documentation (default OFF).\"\n      OFF CATEGORY \"Build Targets\")\n    \n    hpx_option(HPX_WITH_DOCUMENTATION_SINGLEPAGE BOOL\n      \"The HPX documentation should be built as a single page HTML (default OFF).\"\n      OFF CATEGORY \"Build Targets\")\n    \n    if(MSVC)\n      hpx_option(HPX_WITH_PSEUDO_DEPENDENCIES BOOL\n        \"Force creating pseudo targets and pseudo dependencies (default OFF).\"\n        OFF CATEGORY \"Build Targets\")\n    else()\n      hpx_option(HPX_WITH_PSEUDO_DEPENDENCIES BOOL\n        \"Force creating pseudo targets and pseudo dependencies (default ON).\"\n        ON CATEGORY \"Build Targets\")\n    endif()\n    \n    ################################################################################\n    # Some platforms do not support dynamic linking. Enable this to link all\n    # libraries statically. This also changes some of the internals of HPX related\n    # to how components are loaded.\n    ################################################################################\n    if(\"${LIBRARY_TYPE}\" STREQUAL \"STATIC\")\n      hpx_add_config_define(HPX_HAVE_STATIC_LINKING)\n      set(hpx_library_link_mode STATIC)\n      set(CMAKE_SHARED_LIBS OFF)\n      set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})\n    \n      if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n        hpx_option(HPX_WITH_STATIC_EXE_LINKING BOOL\n          \"Compile HPX statically linked executables (Default: OFF)\" OFF ADVANCED)\n    \n        if(HPX_WITH_STATIC_EXE_LINKING)\n          set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static\")\n        endif()\n      endif()\n    else()\n      set(hpx_library_link_mode SHARED)\n    endif()\n    \n    ################################################################################\n    \n    hpx_option(HPX_WITH_EXAMPLES BOOL \"Build the HPX examples (default ON)\" OFF CATEGORY \"Build Targets\")\n    hpx_option(HPX_WITH_TESTS BOOL \"Build the HPX tests (default ON)\" OFF CATEGORY \"Build Targets\")\n    hpx_option(HPX_WITH_TESTS_BENCHMARKS BOOL \"Build HPX benchmark tests (default: ON)\" OFF ADVANCED CATEGORY \"Build Targets\")\n    hpx_option(HPX_WITH_TESTS_REGRESSIONS BOOL \"Build HPX regression tests (default: ON)\" OFF ADVANCED CATEGORY \"Build Targets\")\n    hpx_option(HPX_WITH_TESTS_UNIT BOOL \"Build HPX unit tests (default: ON)\" OFF ADVANCED CATEGORY \"Build Targets\")\n    hpx_option(HPX_WITH_TESTS_HEADERS BOOL \"Build HPX header tests (default: OFF)\" OFF ADVANCED CATEGORY \"Build Targets\")\n    hpx_option(HPX_WITH_TESTS_EXTERNAL_BUILD BOOL \"Build external cmake build tests (default: ON)\" OFF ADVANCED CATEGORY \"Build Targets\")\n    hpx_option(HPX_WITH_TOOLS BOOL \"Build HPX tools (default: OFF)\" OFF ADVANCED CATEGORY \"Build Targets\")\n    hpx_option(HPX_WITH_RUNTIME BOOL \"Build HPX runtime (default: ON)\" OFF ADVANCED CATEGORY \"Build Targets\")\n    \n    hpx_option(HPX_WITH_COMPILE_ONLY_TESTS BOOL\n      \"Create build system support for compile time only HPX tests (default ON)\"\n      ON CATEGORY \"Build Targets\")\n    \n    # Enable IO-counters on linux systems only\n    set(HPX_WITH_IO_COUNTERS_DEFAULT OFF)\n    if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n      set(HPX_WITH_IO_COUNTERS_DEFAULT ON)\n    endif()\n    \n    hpx_option(HPX_WITH_IO_COUNTERS BOOL\n      \"Build HPX runtime (default: ${HPX_WITH_IO_COUNTERS_DEFAULT})\"\n      ${HPX_WITH_IO_COUNTERS_DEFAULT} ADVANCED CATEGORY \"Build Targets\")\n    if(HPX_WITH_IO_COUNTERS)\n      hpx_add_config_define(HPX_HAVE_IO_COUNTERS)\n    endif()\n    \n    set(HPX_FULL_RPATH_DEFAULT ON)\n    if(APPLE OR WIN32)\n      set(HPX_FULL_RPATH_DEFAULT OFF)\n    endif()\n    hpx_option(HPX_WITH_FULL_RPATH BOOL\n      \"Build and link HPX libraries and executables with full RPATHs (default: ${HPX_FULL_RPATH_DEFAULT})\"\n      ${HPX_FULL_RPATH_DEFAULT} ADVANCED)\n    \n    ################################################################################\n    # HPX Compute configuration\n    ################################################################################\n    hpx_option(HPX_WITH_CUDA BOOL\n      \"Enable CUDA support (default: OFF)\" OFF ADVANCED)\n    hpx_option(HPX_WITH_CUDA_CLANG BOOL\n      \"Use clang to compile CUDA code (default: OFF)\" OFF ADVANCED)\n    if(HPX_WITH_CUDA)\n      find_package(CUDA REQUIRED)\n      set(HPX_WITH_COMPUTE On)\n      hpx_add_config_define(HPX_HAVE_CUDA)\n      hpx_add_config_define(HPX_HAVE_COMPUTE)\n      if(NOT HPX_WITH_CUDA_ARCH)\n        hpx_info(\"HPX_WITH_CUDA_ARCH has not been defined, default value is sm_20\")\n        set(HPX_WITH_CUDA_ARCH sm_20)\n      endif()\n      foreach(arch ${HPX_WITH_CUDA_ARCH})\n        string(REGEX MATCHALL \"sm_[0-9][0-9]\" arch ${arch})\n        if(NOT arch)\n          hpx_error(\"Each architecture defined in HPX_WITH_CUDA_ARCH should be a list of items, each of the form sm_XX\")\n        endif()\n        string(APPEND HPX_CUDA_CLANG_FLAGS \" --cuda-gpu-arch=${arch}\")\n      endforeach()\n      string(REGEX REPLACE \";\" \" \" HPX_WITH_CUDA_ARCH_INFO \"${HPX_WITH_CUDA_ARCH}\")\n    else()\n      set(HPX_TLL_PUBLIC \"PUBLIC\")      # keywords for target_link_libraries\n      set(HPX_TLL_PRIVATE \"PRIVATE\")\n    endif()\n    if(HPX_WITH_CUDA_CLANG AND NOT (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\"))\n      hpx_error(\"To use Cuda Clang, please select Clang as your default C++ compiler\")\n    endif()\n    hpx_option(HPX_WITH_HCC BOOL\n      \"Enable hcc support (default: OFF)\" OFF ADVANCED)\n    hpx_option(HPX_WITH_SYCL BOOL\n      \"Enable sycl support (default: OFF)\" OFF ADVANCED)\n    \n    ################################################################################\n    # HPX datapar configuration\n    ################################################################################\n    hpx_option(HPX_WITH_DATAPAR_VC BOOL\n      \"Enable data parallel algorithm support using the external Vc library (default: OFF)\" OFF ADVANCED)\n    if(HPX_WITH_DATAPAR_VC)\n      hpx_option(HPX_WITH_DATAPAR_VC_NO_LIBRARY BOOL\n        \"Don't link with the Vc static library (default: OFF)\" OFF ADVANCED)\n    endif()\n    hpx_option(HPX_WITH_DATAPAR_BOOST_SIMD BOOL\n      \"Enable data parallel algorithm support using the external Boost.SIMD library (default: OFF)\" OFF ADVANCED)\n    \n    if(HPX_WITH_DATAPAR_VC AND HPX_WITH_DATAPAR_BOOST_SIMD)\n      hpx_error(\"Please select only one of the supported external vectorization libraries (HPX_WITH_DATAPAR_VC or HPX_WITH_DATAPAR_BOOST_SIMD)\")\n    endif()\n    \n    if(HPX_WITH_DATAPAR_VC)\n      include(HPX_SetupVc)\n    endif()\n    if((NOT HPX_WITH_DATAPAR_VC) AND (NOT HPX_WITH_DATAPAR_BOOST_SIMD))\n      hpx_info(\"No vectorization library configured\")\n    else()\n      set(HPX_WITH_DATAPAR ON)\n    endif()\n    \n    ################################################################################\n    # Native TLS configuration\n    ################################################################################\n    set(HPX_WITH_NATIVE_TLS_DEFAULT ON)\n    if(APPLE)\n      set(HPX_WITH_NATIVE_TLS_DEFAULT OFF)\n    endif()\n    hpx_option(HPX_WITH_NATIVE_TLS BOOL\n      \"Use native TLS support if available (default: ${HPX_WITH_NATIVE_TLS_DEFAULT})\"\n      ${HPX_WITH_NATIVE_TLS_DEFAULT} ADVANCED)\n    if(HPX_WITH_NATIVE_TLS)\n      hpx_info(\"Native TLS is enabled.\")\n      hpx_add_config_define(HPX_HAVE_NATIVE_TLS)\n    else()\n      hpx_info(\"Native TLS is disabled.\")\n    endif()\n    \n    ################################################################################\n    # Threadlevel Nice option\n    ################################################################################\n    hpx_option(HPX_WITH_NICE_THREADLEVEL BOOL\n      \"Set HPX worker threads to have high NICE level (may impact performance) (default: OFF)\"\n      OFF ADVANCED)\n    if(HPX_WITH_NICE_THREADLEVEL)\n      hpx_info(\"Nice threadlevel is enabled.\")\n      hpx_add_config_define(HPX_HAVE_NICE_THREADLEVEL)\n    else()\n      hpx_info(\"Nice threadlevel is disabled.\")\n    endif()\n    \n    ################################################################################\n    # Utility configuration\n    ################################################################################\n    set(HPX_HIDDEN_VISIBILITY_DEFAULT ON)\n    if(CMAKE_COMPILER_IS_GNUCXX)\n      if(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n        set(HPX_HIDDEN_VISIBILITY_DEFAULT OFF)\n      endif()\n    endif()\n    if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n      set(HPX_HIDDEN_VISIBILITY_DEFAULT OFF)\n    endif()\n    if(APPLE)\n      set(HPX_HIDDEN_VISIBILITY_DEFAULT OFF)\n    endif()\n    \n    hpx_option(HPX_WITH_HIDDEN_VISIBILITY BOOL\n      \"Use -fvisibility=hidden for builds on platforms which support it (default ${HPX_HIDDEN_VISIBILITY_DEFAULT})\"\n      ${HPX_HIDDEN_VISIBILITY_DEFAULT}\n      ADVANCED)\n    \n    hpx_option(HPX_WITH_AUTOMATIC_SERIALIZATION_REGISTRATION BOOL\n      \"Use automatic serialization registration for actions and functions. This affects compatibility between HPX applications compiled with different compilers (default ON)\"\n      ON\n      ADVANCED)\n    if(HPX_WITH_AUTOMATIC_SERIALIZATION_REGISTRATION)\n      hpx_add_config_define(HPX_HAVE_AUTOMATIC_SERIALIZATION_REGISTRATION)\n    endif()\n    \n    hpx_option(HPX_WITH_DISABLED_SIGNAL_EXCEPTION_HANDLERS BOOL\n      \"Disables the mechanism that produces debug output for caught signals and unhandled exceptions (default: OFF)\"\n      OFF\n      ADVANCED)\n    \n    if(HPX_WITH_DISABLED_SIGNAL_EXCEPTION_HANDLERS)\n      add_definitions(-DHPX_WITH_DISABLED_SIGNAL_EXCEPTION_HANDLERS)\n    endif()\n    \n    ## Thread Manager related build options\n    \n    set(HPX_MAX_CPU_COUNT_DEFAULT \"64\")\n    hpx_option(HPX_WITH_MAX_CPU_COUNT STRING\n      \"HPX applications will not use more that this number of OS-Threads (default: ${HPX_MAX_CPU_COUNT_DEFAULT})\"\n      ${HPX_MAX_CPU_COUNT_DEFAULT}\n      CATEGORY \"Thread Manager\" ADVANCED)\n    hpx_add_config_define(HPX_HAVE_MAX_CPU_COUNT ${HPX_WITH_MAX_CPU_COUNT})\n    \n    hpx_option(HPX_WITH_MORE_THAN_64_THREADS BOOL\n      \"HPX applications will be able to run on more than 64 cores\"\n      (NOT (${HPX_WITH_MAX_CPU_COUNT} LESS 65))\n      CATEGORY \"Thread Manager\" ADVANCED)\n    if(HPX_WITH_MORE_THAN_64_THREADS)\n      hpx_add_config_define(HPX_HAVE_MORE_THAN_64_THREADS)\n    endif()\n    \n    hpx_option(HPX_WITH_THREAD_STACK_MMAP BOOL\n      \"Use mmap for stack allocation on appropriate platforms\"\n      ON\n      CATEGORY \"Thread Manager\" ADVANCED)\n    \n    hpx_option(HPX_WITH_THREAD_MANAGER_IDLE_BACKOFF BOOL\n      \"HPX scheduler threads are backing off on idle queues (default: ON)\"\n      ON\n      CATEGORY \"Thread Manager\" ADVANCED)\n    \n    hpx_option(HPX_WITH_STACKTRACES BOOL\n      \"Attach backtraces to HPX exceptions (default: ON)\"\n      ON\n      CATEGORY \"Thread Manager\" ADVANCED)\n    \n    hpx_option(HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION BOOL\n      \"Enable thread stack back trace being captured on suspension (default: OFF)\"\n      OFF\n      CATEGORY \"Thread Manager\" ADVANCED)\n    \n    if(HPX_WITH_STACKTRACES OR HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION)\n      hpx_info(\"Stack traces are enabled.\")\n      hpx_add_config_define(HPX_HAVE_STACKTRACES)\n      if(WIN32)\n        hpx_libraries(dbghelp)\n      endif()\n    \n      hpx_option(HPX_WITH_THREAD_BACKTRACE_DEPTH STRING\n        \"Thread stack back trace depth being captured (default: 5)\"\n        \"5\"\n        CATEGORY \"Thread Manager\" ADVANCED)\n      hpx_add_config_define(HPX_HAVE_THREAD_BACKTRACE_DEPTH\n        ${HPX_WITH_THREAD_BACKTRACE_DEPTH})\n    endif()\n    \n    if(HPX_WITH_THREAD_BACKTRACE_ON_SUSPENSION)\n      hpx_add_config_define(HPX_HAVE_THREAD_BACKTRACE_ON_SUSPENSION)\n    \n      hpx_option(HPX_WITH_THREAD_FULLBACKTRACE_ON_SUSPENSION BOOL\n        \"Enable thread stack back trace being captured on suspension (default: OFF)\"\n        OFF\n        CATEGORY \"Thread Manager\" ADVANCED)\n      if(HPX_WITH_THREAD_FULLBACKTRACE_ON_SUSPENSION)\n        hpx_add_config_define(HPX_HAVE_THREAD_FULLBAKCTRACE_ON_SUSPENSION)\n      endif()\n    endif()\n    \n    hpx_option(HPX_WITH_THREAD_TARGET_ADDRESS BOOL\n      \"Enable storing target address in thread for NUMA awareness (default: OFF)\"\n      OFF CATEGORY \"Thread Manager\" ADVANCED)\n    \n    if(HPX_WITH_THREAD_TARGET_ADDRESS)\n      hpx_add_config_define(HPX_HAVE_THREAD_TARGET_ADDRESS)\n    endif()\n    \n    hpx_option(HPX_WITH_THREAD_QUEUE_WAITTIME BOOL\n      \"Enable collecting queue wait times for threads (default: OFF)\"\n      OFF CATEGORY \"Thread Manager\" ADVANCED)\n    \n    if(HPX_WITH_THREAD_QUEUE_WAITTIME)\n      hpx_add_config_define(HPX_HAVE_THREAD_QUEUE_WAITTIME)\n    endif()\n    \n    hpx_option(HPX_WITH_THREAD_IDLE_RATES BOOL\n      \"Enable measuring the percentage of overhead times spent in the scheduler (default: OFF)\"\n      OFF CATEGORY \"Thread Manager\" ADVANCED)\n    \n    hpx_option(HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES BOOL\n      \"Enable measuring thread creation and cleanup times (default: OFF)\"\n      OFF CATEGORY \"Thread Manager\" ADVANCED)\n    \n    if(HPX_WITH_THREAD_IDLE_RATES)\n      hpx_add_config_define(HPX_HAVE_THREAD_IDLE_RATES)\n      if(HPX_WITH_THREAD_CREATION_AND_CLEANUP_RATES)\n        hpx_add_config_define(HPX_HAVE_THREAD_CREATION_AND_CLEANUP_RATES)\n      endif()\n    endif()\n    \n    hpx_option(HPX_WITH_THREAD_CUMULATIVE_COUNTS BOOL\n      \"Enable keeping track of cumulative thread counts in the schedulers (default: ON)\"\n      ON CATEGORY \"Thread Manager\" ADVANCED)\n    \n    if(HPX_WITH_THREAD_CUMULATIVE_COUNTS)\n      hpx_add_config_define(HPX_HAVE_THREAD_CUMULATIVE_COUNTS)\n    endif()\n    \n    hpx_option(HPX_WITH_THREAD_STEALING_COUNTS BOOL\n      \"Enable keeping track of counts of thread stealing incidents in the schedulers (default: ON)\"\n      ON CATEGORY \"Thread Manager\" ADVANCED)\n    \n    if(HPX_WITH_THREAD_STEALING_COUNTS)\n      hpx_add_config_define(HPX_HAVE_THREAD_STEALING_COUNTS)\n    endif()\n    \n    hpx_option(HPX_WITH_THREAD_LOCAL_STORAGE BOOL\n      \"Enable thread local storage for all HPX threads (default: OFF)\"\n      OFF CATEGORY \"Thread Manager\" ADVANCED)\n    \n    if(HPX_WITH_THREAD_LOCAL_STORAGE)\n      hpx_add_config_define(HPX_HAVE_THREAD_LOCAL_STORAGE)\n    endif()\n    \n    hpx_option(HPX_WITH_SCHEDULER_LOCAL_STORAGE BOOL\n      \"Enable scheduler local storage for all HPX schedulers (default: OFF)\"\n      OFF CATEGORY \"Thread Manager\" ADVANCED)\n    \n    if(HPX_WITH_SCHEDULER_LOCAL_STORAGE)\n      hpx_add_config_define(HPX_HAVE_SCHEDULER_LOCAL_STORAGE)\n    endif()\n    \n    hpx_option(HPX_WITH_SWAP_CONTEXT_EMULATION BOOL\n      \"Emulate SwapContext API for coroutines (default: OFF)\"\n      OFF CATEGORY \"Thread Manager\" ADVANCED)\n    \n    hpx_option(HPX_WITH_SPINLOCK_DEADLOCK_DETECTION BOOL\n      \"Enable spinlock deadlock detection (default: OFF)\"\n      OFF CATEGORY \"Thread Manager\" ADVANCED)\n    \n    if(HPX_WITH_SPINLOCK_DEADLOCK_DETECTION)\n      hpx_add_config_define(HPX_HAVE_SPINLOCK_DEADLOCK_DETECTION)\n    endif()\n    \n    ## Profiling related build options\n    hpx_option(HPX_WITH_APEX BOOL\n      \"Enable APEX instrumentation support.\" OFF CATEGORY \"Profiling\")\n    if(HPX_WITH_APEX)\n      hpx_add_config_define(HPX_HAVE_APEX)   # tell HPX that we use APEX\n      hpx_add_config_define(APEX_HAVE_HPX)   # tell APEX that we use HPX\n      hpx_option(HPX_WITH_APEX_NO_UPDATE BOOL\n        \"Do not update code from remote APEX repository.\" OFF CATEGORY \"Profiling\")\n    endif()\n    hpx_option(HPX_WITH_PAPI BOOL\n      \"Enable the PAPI based performance counter.\" OFF CATEGORY \"Profiling\")\n    if(HPX_WITH_PAPI)\n      hpx_add_config_define(HPX_HAVE_PAPI)\n    endif()\n    hpx_option(HPX_WITH_GOOGLE_PERFTOOLS BOOL\n      \"Enable Google Perftools instrumentation support.\" OFF CATEGORY \"Profiling\")\n    if(HPX_WITH_GOOGLE_PERFTOOLS)\n      hpx_add_config_define(HPX_HAVE_GOOGLE_PERFTOOLS)\n    endif()\n    hpx_option(HPX_WITH_ITTNOTIFY BOOL\n      \"Enable Amplifier (ITT) instrumentation support.\" OFF CATEGORY \"Profiling\")\n    \n    ################################################################################\n    # Scheduler configuration\n    ################################################################################\n    hpx_option(HPX_WITH_THREAD_SCHEDULERS STRING\n      \"Which thread schedulers are build. Options are: all, abp-priority, local, static-priority, static, hierarchy, and periodic-priority. For multiple enabled schedulers, separate with a semicolon (default: all)\"\n      \"all\"\n      CATEGORY \"Thread Manager\" ADVANCED)\n    \n    string(TOUPPER ${HPX_WITH_THREAD_SCHEDULERS} HPX_WITH_THREAD_SCHEDULERS_UC)\n    foreach(_scheduler ${HPX_WITH_THREAD_SCHEDULERS_UC})\n      if(_scheduler STREQUAL \"ALL\")\n        set(_all On)\n        set(HPX_WITH_ALL_SCHEDULERS ON CACHE INTERNAL \"\")\n      endif()\n      if(_scheduler STREQUAL \"ABP-PRIORITY\" OR _all)\n        hpx_add_config_define(HPX_HAVE_ABP_SCHEDULER)\n        set(HPX_WITH_ABP_SCHEDULER ON CACHE INTERNAL \"\")\n      endif()\n      if(_scheduler STREQUAL \"LOCAL\" OR _all)\n        hpx_add_config_define(HPX_HAVE_LOCAL_SCHEDULER)\n        set(HPX_WITH_LOCAL_SCHEDULER ON CACHE INTERNAL \"\")\n      endif()\n      if(_scheduler STREQUAL \"STATIC-PRIORITY\" OR _all)\n        hpx_add_config_define(HPX_HAVE_STATIC_PRIORITY_SCHEDULER)\n        set(HPX_WITH_STATIC_PRIORITY_SCHEDULER ON CACHE INTERNAL \"\")\n      endif()\n      if(_scheduler STREQUAL \"STATIC\" OR _all)\n        hpx_add_config_define(HPX_HAVE_STATIC_SCHEDULER)\n        set(HPX_WITH_STATIC_SCHEDULER ON CACHE INTERNAL \"\")\n      endif()\n      # The throttle scheduler is not supported neither on Windows nor on Mac\n      if(HPX_WITH_APEX AND NOT WIN32 AND NOT APPLE)\n        if(_scheduler STREQUAL \"THROTTLE\" OR _all)\n          hpx_add_config_define(HPX_HAVE_THROTTLE_SCHEDULER)\n          set(HPX_WITH_THROTTLE_SCHEDULER ON CACHE INTERNAL \"\")\n        endif()\n      endif()\n      if(_scheduler STREQUAL \"HIERARCHY\" OR _all)\n        hpx_add_config_define(HPX_HAVE_HIERARCHY_SCHEDULER)\n        set(HPX_WITH_HIERARCHY_SCHEDULER ON CACHE INTERNAL \"\")\n      endif()\n      if(_scheduler STREQUAL \"PERIODIC-PRIORITY\" OR _all)\n        hpx_add_config_define(HPX_HAVE_PERIODIC_PRIORITY_SCHEDULER)\n        set(HPX_WITH_PERIODIC_PRIORITY_SCHEDULER ON CACHE INTERNAL \"\")\n      endif()\n      unset(_all)\n    endforeach()\n    \n    ## AGAS related build options\n    hpx_option(HPX_WITH_AGAS_DUMP_REFCNT_ENTRIES BOOL\n      \"Enable dumps of the AGAS refcnt tables to logs (default: OFF)\"\n      OFF CATEGORY \"AGAS\" ADVANCED)\n    if(HPX_WITH_AGAS_DUMP_REFCNT_ENTRIES)\n      hpx_add_config_define(HPX_HAVE_AGAS_DUMP_REFCNT_ENTRIES)\n    endif()\n    \n    # Should networking be supported?\n    #set(HPX_WITH_NETWORKING 1)\n    hpx_option(HPX_WITH_NETWORKING BOOL\n      \"Enable support for networking and multi-node runs (default: ON)\"\n      ON CATEGORY \"Parcelport\")\n    if(HPX_WITH_NETWORKING)\n      hpx_add_config_define(HPX_HAVE_NETWORKING)\n    \n      ## Parcelport related build options\n      set(_parcel_profiling_default OFF)\n      if(HPX_WITH_APEX)\n        set(_parcel_profiling_default ON)\n      endif()\n    \n      hpx_option(HPX_WITH_PARCEL_PROFILING BOOL\n        \"Enable profiling data for parcels\"\n        ${_parcel_profiling_default} CATEGORY \"Parcelport\" ADVANCED)\n    \n      if(HPX_WITH_PARCEL_PROFILING)\n        hpx_add_config_define(HPX_HAVE_PARCEL_PROFILING)\n      endif()\n    \n      ## Parcelport related build options\n      hpx_option(HPX_WITH_PARCELPORT_VERBS BOOL\n        \"Enable the ibverbs based parcelport. This is currently an experimental feature\"\n        OFF CATEGORY \"Parcelport\" ADVANCED)\n      hpx_option(HPX_WITH_PARCELPORT_MPI BOOL\n        \"Enable the MPI based parcelport.\"\n        OFF CATEGORY \"Parcelport\")\n      hpx_option(HPX_WITH_PARCELPORT_TCP BOOL\n        \"Enable the TCP based parcelport.\"\n        ON CATEGORY \"Parcelport\")\n      hpx_option(HPX_WITH_PARCELPORT_ACTION_COUNTERS BOOL\n        \"Enable performance counters reporting parcelport statistics on a per-action basis.\"\n        OFF CATEGORY \"Parcelport\")\n      if(HPX_WITH_PARCELPORT_ACTION_COUNTERS)\n        hpx_add_config_define(HPX_HAVE_PARCELPORT_ACTION_COUNTERS)\n      endif()\n    \n      ## mpi parcelport settings\n      hpx_option(HPX_WITH_PARCELPORT_MPI_ENV STRING\n        \"List of environment variables checked to detect MPI (default: MV2_COMM_WORLD_RANK;PMI_RANK;OMPI_COMM_WORLD_SIZE;ALPS_APP_PE).\"\n        \"MV2_COMM_WORLD_RANK;PMI_RANK;OMPI_COMM_WORLD_SIZE;ALPS_APP_PE\" CATEGORY \"Parcelport\" ADVANCED)\n      hpx_option(HPX_WITH_PARCELPORT_MPI_MULTITHREADED BOOL\n        \"Turn on MPI multithreading support (default: ON).\"\n        ON CATEGORY \"Parcelport\" ADVANCED)\n    endif()\n    \n    ## External libraries\/frameworks used by sme of the examples and benchmarks\n    hpx_option(HPX_WITH_EXAMPLES_OPENMP BOOL\n      \"Enable examples requiring OpenMP support (default: OFF).\" OFF\n      CATEGORY \"Tools\" ADVANCED)\n    if(HPX_WITH_EXAMPLES_OPENMP)\n      find_package(OpenMP)\n      if(NOT OPENMP_FOUND)\n        set(HPX_WITH_EXAMPLES_OPENMP OFF)\n      endif()\n    endif()\n    hpx_option(HPX_WITH_EXAMPLES_TBB BOOL\n      \"Enable examples requiring TBB support (default: OFF).\" OFF\n      CATEGORY \"Tools\" ADVANCED)\n    if(HPX_WITH_EXAMPLES_TBB)\n      find_package(TBB)\n      if(NOT TBB_FOUND)\n        set(HPX_WITH_EXAMPLES_TBB OFF)\n      endif()\n    endif()\n    hpx_option(HPX_WITH_EXAMPLES_QTHREADS BOOL\n      \"Enable examples requiring QThreads support (default: OFF).\" OFF\n      CATEGORY \"Tools\" ADVANCED)\n    if(HPX_WITH_EXAMPLES_QTHREADS)\n      find_package(QThreads)\n      if(NOT QTHREADS_FOUND)\n        set(HPX_WITH_EXAMPLES_QTHREADS OFF)\n      endif()\n    endif()\n    hpx_option(HPX_WITH_EXAMPLES_HDF5 BOOL\n      \"Enable examples requiring HDF5 support (default: OFF).\" OFF\n      CATEGORY \"Tools\" ADVANCED)\n    if(HPX_WITH_EXAMPLES_HDF5)\n      find_package(HDF5 COMPONENTS CXX)\n      if(NOT HDF5_FOUND)\n        set(HPX_WITH_EXAMPLES_HDF5 OFF)\n      endif()\n    endif()\n    \n    # Disabling the Qt example on BG\/Q as GUIs don't make sense there anyways\n    if(NOT \"${HPX_PLATFORM_UC}\" STREQUAL \"BLUEGENEQ\")\n      hpx_option(HPX_WITH_EXAMPLES_QT4 BOOL\n        \"Enable examples requiring Qt4 support (default: OFF).\" OFF\n        CATEGORY \"Tools\" ADVANCED)\n      if(HPX_WITH_EXAMPLES_QT4)\n        find_package(Qt4)\n        if(NOT QT4_FOUND)\n          set(HPX_WITH_EXAMPLES_QT4 OFF)\n        endif()\n      endif()\n    endif()\n    \n    ## Debugging related build options\n    hpx_option(HPX_WITH_VALGRIND BOOL \"Enable Valgrind instrumentation support.\"\n      OFF CATEGORY \"Debugging\")\n    \n    hpx_option(HPX_WITH_VERIFY_LOCKS BOOL\n      \"Enable lock verification code (default: OFF, implicitly enabled in debug builds)\"\n      OFF\n      CATEGORY \"Debugging\" ADVANCED)\n    hpx_option(HPX_WITH_VERIFY_LOCKS_GLOBALLY BOOL\n      \"Enable global lock verification code (default: OFF, implicitly enabled in debug builds)\"\n      OFF\n      CATEGORY \"Debugging\" ADVANCED)\n    hpx_option(HPX_WITH_VERIFY_LOCKS_BACKTRACE BOOL\n      \"Enable thread stack back trace being captured on lock registration (to be used in combination with HPX_WITH_VERIFY_LOCKS=ON, default: OFF)\"\n      OFF\n      CATEGORY \"Debugging\" ADVANCED)\n    hpx_option(HPX_WITH_THREAD_DEBUG_INFO BOOL\n      \"Enable thread debugging information (default: OFF, implicitly enabled in debug builds)\"\n      OFF\n      CATEGORY \"Debugging\" ADVANCED)\n    hpx_option(HPX_WITH_THREAD_GUARD_PAGE BOOL\n      \"Enable thread guard page (default: ON)\"\n      ON\n      CATEGORY \"Debugging\" ADVANCED)\n    \n    if(HPX_WITH_VERIFY_LOCKS)\n      hpx_add_config_define(HPX_HAVE_VERIFY_LOCKS)\n      if(HPX_WITH_VERIFY_LOCKS_BACKTRACE)\n        hpx_add_config_define(HPX_HAVE_VERIFY_LOCKS_BACKTRACE)\n      endif()\n    endif()\n    if(HPX_WITH_VERIFY_LOCKS_GLOBALLY)\n      hpx_add_config_define(HPX_HAVE_VERIFY_LOCKS_GLOBALLY)\n    endif()\n    \n    # Additional debug support\n    if(NOT WIN32 AND HPX_WITH_THREAD_GUARD_PAGE)\n      hpx_add_config_define(HPX_HAVE_THREAD_GUARD_PAGE)\n    endif()\n    \n    if(NOT WIN32 AND HPX_WITH_THREAD_STACK_MMAP)\n      hpx_add_config_define(HPX_HAVE_THREAD_STACK_MMAP)\n    endif()\n    \n    if(HPX_WITH_THREAD_MANAGER_IDLE_BACKOFF)\n      hpx_add_config_define(HPX_HAVE_THREAD_MANAGER_IDLE_BACKOFF)\n    endif()\n    \n    hpx_option(HPX_WITH_THREAD_DESCRIPTION_FULL BOOL\n      \"Use function address for thread description (default: OFF)\"\n      OFF\n      CATEGORY \"Debugging\" ADVANCED)\n    \n    # If APEX is defined, the action timers need thread debug info.\n    if(HPX_WITH_APEX)\n        hpx_add_config_define(HPX_HAVE_THREAD_DESCRIPTION)\n        if(HPX_WITH_THREAD_DESCRIPTION_FULL)\n          hpx_add_config_define(HPX_HAVE_THREAD_DESCRIPTION_FULL)\n        endif()\n    endif()\n    \n    if(HPX_WITH_THREAD_DEBUG_INFO)\n      hpx_add_config_define(HPX_HAVE_THREAD_PARENT_REFERENCE)\n      hpx_add_config_define(HPX_HAVE_THREAD_PHASE_INFORMATION)\n      hpx_add_config_define(HPX_HAVE_THREAD_DESCRIPTION)\n      hpx_add_config_define(HPX_HAVE_THREAD_DEADLOCK_DETECTION)\n      if(HPX_WITH_THREAD_DESCRIPTION_FULL)\n        hpx_add_config_define(HPX_HAVE_THREAD_DESCRIPTION_FULL)\n      endif()\n    endif()\n    \n    # run hpx_main on all localities by default\n    hpx_option(HPX_WITH_RUN_MAIN_EVERYWHERE BOOL \"Run hpx_main by default on all localities (default: OFF).\" OFF ADVANCED)\n    if(HPX_WITH_RUN_MAIN_EVERYWHERE)\n      hpx_add_config_define(HPX_HAVE_RUN_MAIN_EVERYWHERE)\n    endif()\n    \n    if(HPX_WITH_NETWORKING)\n      # Options for our plugins\n      hpx_option(HPX_WITH_COMPRESSION_BZIP2 BOOL\n        \"Enable bzip2 compression for parcel data (default: OFF).\" ON ADVANCED)\n      hpx_option(HPX_WITH_COMPRESSION_SNAPPY BOOL\n        \"Enable snappy compression for parcel data (default: OFF).\" ON ADVANCED)\n      hpx_option(HPX_WITH_COMPRESSION_ZLIB BOOL\n        \"Enable zlib compression for parcel data (default: OFF).\" ON ADVANCED)\n    \n      # Parcel coalescing is used by the main HPX library, enable it always\n      hpx_option(HPX_WITH_PARCEL_COALESCING BOOL\n        \"Enable the parcel coalescing plugin (default: ON).\" ON ADVANCED)\n      if(HPX_WITH_PARCEL_COALESCING)\n        hpx_add_config_define(HPX_HAVE_PARCEL_COALESCING)\n      endif()\n    endif()\n    \n    ################################################################################\n    # Backwards compatibility options (edit for each release)\n    \n    # HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY: introduced in V0.9.11\n    hpx_option(HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY BOOL\n        \"Enable backwards compatibility for apply_colocated, async_colocated and friends\"\n        OFF ADVANCED)\n    if(HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY)\n      hpx_add_config_define(HPX_HAVE_COLOCATED_BACKWARDS_COMPATIBILITY)\n    endif()\n    \n    # HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY: introduced in V0.9.11\n    hpx_option(HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY BOOL\n        \"Enable backwards compatibility for component::get_gid() functions\"\n        OFF ADVANCED)\n    if(HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY)\n      hpx_add_config_define(HPX_HAVE_COMPONENT_GET_GID_COMPATIBILITY)\n    endif()\n    \n    # HPX_WITH_LOCAL_DATAFLOW_COMPATIBILITY: introduced in V0.9.99\n    hpx_option(HPX_WITH_LOCAL_DATAFLOW_COMPATIBILITY BOOL\n        \"Enable backwards compatibility for hpx::lcos::local::dataflow() functions\"\n        ON ADVANCED)\n    if(HPX_WITH_LOCAL_DATAFLOW_COMPATIBILITY)\n      hpx_add_config_define(HPX_HAVE_LOCAL_DATAFLOW_COMPATIBILITY)\n    endif()\n    \n    # HPX_WITH_GENERIC_EXECUTION_POLICY: introduced in V0.9.99\n    hpx_option(HPX_WITH_GENERIC_EXECUTION_POLICY BOOL\n        \"Enable the generic execution policy (default: OFF)\"\n        OFF ADVANCED)\n    if(HPX_WITH_GENERIC_EXECUTION_POLICY)\n      hpx_add_config_define(HPX_HAVE_GENERIC_EXECUTION_POLICY)\n    endif()\n    \n    # HPX_WITH_ASYNC_FUNCTION_COMPATIBILITY: introduced in V1.0.0\n    hpx_option(HPX_WITH_ASYNC_FUNCTION_COMPATIBILITY BOOL\n        \"Enable old style ..._sync\/..._async functions in API (default: OFF)\"\n        OFF ADVANCED)\n    if(HPX_WITH_ASYNC_FUNCTION_COMPATIBILITY)\n      hpx_add_config_define(HPX_HAVE_ASYNC_FUNCTION_COMPATIBILITY)\n    endif()\n    \n    # BADBAD: This enables an overload of swap which is necessary to work around the\n    #         problems caused by zip_iterator not being a real random access iterator.\n    #         Dereferencing zip_iterator does not yield a true reference but\n    #         only a temporary tuple holding true references.\n    #\n    # A real fix for this problem is proposed in PR0022R0\n    # (http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0022r0.html)\n    #\n    hpx_option(HPX_WITH_TUPLE_RVALUE_SWAP BOOL\n      \"Enable swapping of rvalue tuples (needed for parallel::sort_by_key, default: ON).\"\n      ON CATEGORY \"Utility\" ADVANCED)\n    if(HPX_WITH_TUPLE_RVALUE_SWAP)\n      hpx_add_config_define(HPX_HAVE_TUPLE_RVALUE_SWAP)\n    endif()\n    \n    # HPX_WITH_BOOST_CHRONO_COMPATIBILITY: introduced in V1.0.0\n    hpx_option(HPX_WITH_BOOST_CHRONO_COMPATIBILITY BOOL\n        \"Enable support for boost::chrono (default: OFF)\"\n        OFF ADVANCED)\n    if(HPX_WITH_BOOST_CHRONO_COMPATIBILITY)\n      hpx_add_config_define(HPX_HAVE_BOOST_CHRONO_COMPATIBILITY)\n    endif()\n    \n    # HPX_WITH_EXECUTION_POLICY_COMPATIBILITY: introduced in V1.0.0\n    hpx_option(HPX_WITH_EXECUTION_POLICY_COMPATIBILITY BOOL\n        \"Enable old execution policy names in API (default: ON)\"\n        ON ADVANCED)\n    if(HPX_WITH_EXECUTION_POLICY_COMPATIBILITY)\n      hpx_add_config_define(HPX_HAVE_EXECUTION_POLICY_COMPATIBILITY)\n    endif()\n    \n    # HPX_WITH_TRANSFORM_REDUCE_COMPATIBILITY: introduced in V1.0.0\n    hpx_option(HPX_WITH_TRANSFORM_REDUCE_COMPATIBILITY BOOL\n        \"Enable old overloads for transform_reduce and inner_product (default: ON)\"\n        ON ADVANCED)\n    if(HPX_WITH_TRANSFORM_REDUCE_COMPATIBILITY)\n      hpx_add_config_define(HPX_HAVE_TRANSFORM_REDUCE_COMPATIBILITY)\n    endif()\n    \n    ################################################################################\n    # Set basic search paths for HPX\n    ################################################################################\n    include_directories(\"${SDIR}\" \"${BDIR}\")\n    link_directories(${BDIR}\/lib)\n    \n    ################################################################################\n    # Check for compiler compatibility\n    #\n    \n    # Check if the selected compiler versions are supposed to work with our codebase\n    if(CMAKE_COMPILER_IS_GNUCXX AND HPX_WITH_GCC_VERSION_CHECK)\n      if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)\n        hpx_error(\"GCC 4.8 or higher is required. Specify HPX_GCC_VERSION_CHECK=OFF to ignore this error.\")\n      endif()\n    endif()\n    \n    if(MSVC)\n      if(NOT (MSVC11 OR MSVC12 OR MSVC14))\n        hpx_error(\"MSVC x64 2012 or higher is required.\")\n      elseif(NOT CMAKE_CL_64)\n        hpx_warn(\"MSVC (32Bit) will compile but will fail running larger applications because of limitations in the Windows OS.\")\n      endif()\n    endif()\n    \n    # Setup platform specific compiler options and check for compatible compilers\n    if(\"${HPX_PLATFORM_UC}\" STREQUAL \"NATIVE\")\n      hpx_info(\"Compiling with the native toolset\")\n    elseif(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n      hpx_info(\"Compiling for Android devices\")\n    elseif(\"${HPX_PLATFORM_UC}\" STREQUAL \"XEONPHI\")\n      hpx_info(\"Compiling for Intel Xeon Phi devices\")\n      if(NOT (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Intel\"))\n        hpx_error(\"HPX on the MIC can only be compiled with the Intel compiler.\")\n      endif()\n    elseif(\"${HPX_PLATFORM_UC}\" STREQUAL \"BLUEGENEQ\")\n      if(NOT CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n        hpx_error(\"HPX on the BG\/Q can only be compiled with bgclang\")\n      endif()\n      hpx_info(\"Compiling for BlueGene\/Q\")\n    endif()\n    \n    if((MSVC14 AND CMAKE_CL_64) OR (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\"))\n      hpx_option(HPX_WITH_AWAIT BOOL\n          \"Enable the use of experimental co_await functionality\"\n          OFF ADVANCED CATEGORY \"LCOs\")\n      if(HPX_WITH_AWAIT)\n        hpx_add_config_define(HPX_HAVE_AWAIT)\n    \n        hpx_option(HPX_WITH_EMULATE_COROUTINE_SUPPORT_LIBRARY BOOL\n            \"Use hpx\/util\/await_traits.hpp instead of <experimental\/coroutine>\"\n            OFF ADVANCED CATEGORY \"LCOs\")\n    \n        if(HPX_WITH_EMULATE_COROUTINE_SUPPORT_LIBRARY)\n          hpx_add_config_define(HPX_HAVE_EMULATE_COROUTINE_SUPPORT_LIBRARY)\n        endif()\n    \n        if(MSVC14 AND CMAKE_CL_64)\n          hpx_add_target_compile_option(-await)\n        endif()\n    \n        if(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n          hpx_add_target_compile_option(-Xclang -fcoroutines-ts)\n        endif()\n      endif()\n    endif()\n    \n    ################################################################################\n    \n    ################################################################################\n    # Add necessary compiler flags. Flags added here include flags to disable\/enable\n    # certain warnings, enabling C++11 mode and disabling asserts. Setting of\n    # optimization flags is not handled here and is left to the responsibility of\n    # the user to avoid conflicts in the resulting binaries\n    \n    hpx_add_target_compile_definition(_DEBUG CONFIGURATIONS Debug)\n    hpx_add_target_compile_definition(DEBUG CONFIGURATIONS Debug)\n    hpx_add_target_compile_definition(HPX_DISABLE_ASSERTS\n      CONFIGURATIONS Release RelWithDebInfo MinSizeRelease)\n    hpx_add_target_compile_definition(BOOST_DISABLE_ASSERTS\n      CONFIGURATIONS Release RelWithDebInfo MinSizeRelease)\n    \n    # Make sure we compile in C++11 mode (MSVC uses it automatically)\n    if(NOT MSVC)\n      if(HPX_WITH_CUDA AND NOT HPX_WITH_CUDA_CLANG)\n        set(CXX_FLAG -std=c++11)\n      else()\n    \n        # Try -std=c++14 first\n        if(HPX_WITH_CXX14 OR NOT ((\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Intel\")\n                                  AND (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 17)))\n          check_cxx_compiler_flag(-std=c++14 HPX_WITH_CXX14)\n        endif()\n    \n        if(HPX_WITH_CXX14)\n          set(CXX_FLAG -std=c++14)\n          # The Intel compiler doesn't appear to have a fully functional\n          # implementation of C++14 constexpr. It's fine with our C++14 constexpr\n          # usage in HPX but chokes on Boost.\n          # FIXME: This should be replaced with a version-based check in the future\n          # when the Intel compiler is able to build Boost with -std=c++14.\n          if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Intel\")\n            add_definitions(-DBOOST_NO_CXX14_CONSTEXPR)\n          endif()\n        else()\n          # ... otherwise try -std=c++1y\n    \n          if(HPX_WITH_CXX1Y OR NOT ((\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Intel\")\n                                    AND (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 17)))\n            check_cxx_compiler_flag(-std=c++1y HPX_WITH_CXX1y)\n          endif()\n    \n          if(HPX_WITH_CXX1Y)\n            set(CXX_FLAG -std=c++1y)\n          else()\n            # ... otherwise try -std=c++11\n            check_cxx_compiler_flag(-std=c++11 HPX_WITH_CXX11)\n            if(HPX_WITH_CXX11)\n              set(CXX_FLAG -std=c++11)\n            else()\n              # ... otherwise try -std=c++0x\n              check_cxx_compiler_flag(-std=c++0x HPX_WITH_CXX0X)\n              if(HPX_WITH_CXX0X)\n                set(CXX_FLAG -std=c++0x)\n              endif()\n            endif()\n          endif()\n        endif()\n      endif()\n      hpx_add_target_compile_option(${CXX_FLAG})\n    endif()\n    \n    ################################################################################\n    # CUDA features\n    ################################################################################\n    if(HPX_WITH_CUDA)\n      hpx_info(\"HPX_WITH_CUDA_ARCH has been set with values: ${HPX_WITH_CUDA_ARCH_INFO}\")\n      if(NOT HPX_WITH_CUDA_CLANG)\n        hpx_libraries(cudadevrt)\n        if(NOT MSVC)\n          hpx_library_dir(${CUDA_TOOLKIT_ROOT_DIR}\/lib64)\n          link_directories(${CUDA_TOOLKIT_ROOT_DIR}\/lib64)\n        else()\n          set(CUDA_PROPAGATE_HOST_FLAGS OFF)\n          hpx_library_dir(${CUDA_TOOLKIT_ROOT_DIR}\/lib\/x64)\n          link_directories(${CUDA_TOOLKIT_ROOT_DIR}\/lib\/x64)\n          set(CUDA_NVCC_FLAGS_DEBUG ${CUDA_NVCC_FLAGS_DEBUG};-D_DEBUG;-O0;-g;-G;-Xcompiler=-MDd;-Xcompiler=-Od;-Xcompiler=-Zi;-Xcompiler=-bigobj)\n          set(CUDA_NVCC_FLAGS_RELWITHDEBINFO ${CUDA_NVCC_FLAGS_RELWITHDEBINFO};-DNDEBUG;-O2;-g;-Xcompiler=-MD,-O2,-Zi;-Xcompiler=-bigobj)\n          set(CUDA_NVCC_FLAGS_MINSIZEREL ${CUDA_NVCC_FLAGS_MINSIZEREL};-DNDEBUG;-O1;-Xcompiler=-MD,-O1;-Xcompiler=-bigobj)\n          set(CUDA_NVCC_FLAGS_RELEASE ${CUDA_NVCC_FLAGS_RELEASE};-DNDEBUG;-O2;-Xcompiler=-MD,-Ox;-Xcompiler=-bigobj)\n        endif()\n        set(CUDA_SEPARABLE_COMPILATION ON)\n        foreach(arch ${HPX_WITH_CUDA_ARCH})\n          string(REPLACE \"sm_\" \"\" arch ${arch})\n          set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-gencode=arch=compute_${arch},code=sm_${arch})\n        endforeach()\n        set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};${CXX_FLAG})\n        set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};--expt-relaxed-constexpr)\n        set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};--expt-extended-lambda)\n        set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};--default-stream per-thread)\n        set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-lcudadevrt)\n        set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-rdc=true)\n      else()\n        hpx_add_target_compile_option(-DBOOST_THREAD_USES_MOVE)\n        hpx_add_target_compile_option(--cuda-path=${CUDA_TOOLKIT_ROOT_DIR})\n        hpx_libraries(cudart)\n        hpx_library_dir(${CUDA_TOOLKIT_ROOT_DIR}\/lib64)\n        link_directories(${CUDA_TOOLKIT_ROOT_DIR}\/lib64)\n      endif()\n    endif()\n    \n    ################################################################################\n    # C++ feature tests\n    ################################################################################\n    \n    include(HPX_PerformCxxFeatureTests)\n    hpx_perform_cxx_feature_tests()\n    \n    ################################################################################\n    # check for miscellaneous things\n    ################################################################################\n    \n    hpx_check_for_mm_prefetch(\n      DEFINITIONS HPX_HAVE_MM_PREFETCH)\n    \n    ################################################################################\n    # Check for misc system headers\n    ################################################################################\n    \n    hpx_check_for_unistd_h(\n      DEFINITIONS HPX_HAVE_UNISTD_H)\n    \n    if(NOT WIN32)\n      ##############################################################################\n      # Macro definitions for system headers\n      ##############################################################################\n      add_definitions(-D_GNU_SOURCE)\n      if(APPLE)\n        hpx_add_config_define(BOOST_HAS_INT128)\n      endif()\n    \n      ##############################################################################\n      # System libraries\n      ##############################################################################\n      if(NOT ${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n        hpx_libraries(dl)\n      endif()\n    \n      if(NOT APPLE AND NOT (\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\"))\n        hpx_libraries(rt)\n      endif()\n    \n      if(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n        hpx_libraries(log)\n      endif()\n    \n      if(APPLE)\n        hpx_add_compile_flag_if_available(-ftemplate-depth=256 LANGUAGES CXX)\n      endif()\n    endif()\n    \n    if(WIN32)\n      if(MSVC)\n        enable_language(ASM_MASM)\n    \n        hpx_add_target_compile_option(-Ox CONFIGURATIONS Release)\n    \n        # even VS2017 has an ICE when compiling with -Ob2\n        hpx_add_target_compile_option(-Ob1 CONFIGURATIONS Release)\n    \n        if(NOT HPX_WITH_AWAIT)\n          # \/RTC1 is incompatible with \/await\n          hpx_add_target_compile_option(\/RTC1 CONFIGURATIONS Debug)\n        else()\n          hpx_remove_target_compile_option(\/RTC1 CONFIGURATIONS Debug)\n        endif()\n    \n        # VS2012 and above has a special flag for improving the debug experience by\n        # adding more symbol information to the build (-d2Zi)\n        hpx_add_target_compile_option(-d2Zi+ CONFIGURATIONS RelWithDebInfo)\n    \n        # VS2013 and above know how to do link time constant data segment folding\n        # VS2013 update 2 and above know how to remove debug information for\n        #     non-referenced functions and data (-Zc:inline)\n        if(MSVC12 OR MSVC14)\n          hpx_add_target_compile_option(-Zc:inline)\n          hpx_add_target_compile_option(-Gw\n            CONFIGURATIONS Release RelWithDebInfo MinSizeRelease)\n          hpx_add_target_compile_option(-Zo CONFIGURATIONS RelWithDebInfo)\n          if(HPX_WITH_DATAPAR_VC)\n            hpx_add_target_compile_option(-std:c++latest)\n            hpx_add_config_define(_HAS_AUTO_PTR_ETC 1)\n          endif()\n        endif()\n    \n        # Exceptions\n        hpx_add_target_compile_option(-EHsc)\n        if(MSVC14)\n          # assume conforming (throwing) operator new implementations\n          hpx_add_target_compile_option(-Zc:throwingNew)\n    \n          # enable faster linking (requires VS2015 Update1)\n          # disabled for now as this flag crashes debugger\n          # hpx_remove_link_flag(\/debug CONFIGURATIONS Debug)\n          # hpx_add_link_flag(\/debug:fastlink CONFIGURATIONS Debug)\n    \n          # Update 2 requires to set _ENABLE_ATOMIC_ALIGNMENT_FIX for it to compile\n          # atomics\n          hpx_add_config_define(_ENABLE_ATOMIC_ALIGNMENT_FIX)\n    \n          # Update 3 allows to flag rvalue misuses and enforces strict string const-\n          # qualification conformance\n          hpx_add_target_compile_option(-Zc:rvalueCast)\n          hpx_add_target_compile_option(-Zc:strictStrings)\n        endif()\n    \n        # Runtime type information\n        hpx_add_target_compile_option(-GR)\n        # Multiprocessor build\n        hpx_add_target_compile_option(-MP)\n        # Increase the maximum size of object file sections\n        hpx_add_target_compile_option(-bigobj)\n      endif()\n    \n      hpx_libraries(psapi shlwapi)\n    \n      ##############################################################################\n      # Macro definitions for system headers\n      ##############################################################################\n      add_definitions(-D_WINDOWS)\n      add_definitions(-D_WIN32)\n      hpx_add_config_define(_WIN32_WINNT 0x0601)\n      hpx_add_config_define(_SCL_SECURE_NO_WARNINGS)\n      hpx_add_config_define(_CRT_SECURE_NO_WARNINGS)\n      hpx_add_config_define(_SCL_SECURE_NO_DEPRECATE)\n      hpx_add_config_define(_CRT_SECURE_NO_DEPRECATE)\n      hpx_add_config_define(_CRT_NONSTDC_NO_WARNINGS)\n      hpx_add_config_define(_WINSOCK_DEPRECATED_NO_WARNINGS)\n    \n      ##############################################################################\n      # Boost\n      ##############################################################################\n    \n      hpx_add_config_define(BOOST_USE_WINDOWS_H)\n      if (NOT Boost_USE_STATIC_LIBS)\n        hpx_add_config_define(BOOST_SERIALIZATION_DYN_LINK)\n      endif()\n      if(NOT CMAKE_CL_64)\n        hpx_add_config_define(BOOST_NO_ALIGNMENT)\n      endif()\n      if(NOT HPX_WITH_GENERIC_CONTEXT_COROUTINES)\n        hpx_add_config_define(HPX_HAVE_FIBER_BASED_COROUTINES)\n      endif()\n      hpx_add_config_define(PSAPI_VERSION 1)\n    endif()\n    \n    # Configure Warnings\n    if(HPX_WITH_COMPILER_WARNINGS)\n      if(MSVC) # Adding special warning settings for the MSVC compiler ...\n        hpx_add_compile_flag(-W3 LANGUAGES C CXX)\n        # According to the ifort Windows manual, W3 isn't supported\n        hpx_add_compile_flag(-W1 LANGUAGES Fortran)\n        # Boost.Lockfree triggers 'warning C4307: '+' : integral constant overflow'\n        # which is benign\n        hpx_add_compile_flag(-wd4307)\n    \n        # MSVC2012\/2013 are overeager to report 'qualifier applied to function type\n        # has no meaning; ignored'\n        hpx_add_compile_flag(-wd4180)\n    \n        # max symbol length exceeded\n        hpx_add_compile_flag(-wd4503)\n    \n        # 'int': forcing value to bool 'true' or 'false' (performance warning)\n        hpx_add_compile_flag(-wd4800)\n      else() # Trial and error approach for any other compiler ...\n        hpx_add_compile_flag_if_available(-Wall LANGUAGES CXX C Fortran)\n        hpx_add_compile_flag_if_available(-Wextra LANGUAGES CXX C Fortran)\n        # This is a new warning popping up from the boost headers with no particular meaning\n        hpx_add_compile_flag_if_available(-Wno-unused-local-typedefs LANGUAGES CXX C Fortran)\n        hpx_add_compile_flag_if_available(-Wno-strict-aliasing LANGUAGES CXX C Fortran)\n        hpx_add_compile_flag_if_available(-Wno-sign-promo LANGUAGES CXX)\n        hpx_add_compile_flag_if_available(-Wno-attributes LANGUAGES CXX)\n        hpx_add_compile_flag_if_available(-Wno-cast-align LANGUAGES CXX)\n    \n        # These are usually benign and can't be suppressed because of\n        # interface requirements\n        hpx_add_compile_flag_if_available(-Wno-unused-parameter)\n    \n        # Be extra strict about format checks\n        # Boost.Logging is built on fprintf, sadly\n        hpx_add_compile_flag_if_available(-Wformat=2)\n        hpx_add_compile_flag_if_available(-Wno-format-nonliteral)\n    \n        # Self initialization is dangerous\n        hpx_add_compile_flag_if_available(-Winit-self)\n    \n        # For portability\n        hpx_add_compile_flag_if_available(-Wdouble-promotion)\n    \n        # Warn about casting that violates qualifiers or alignment\n        hpx_add_compile_flag_if_available(-Wcast-qual)\n        if(NOT \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n          # Clang is overeager in reporting cast alignment problems in Boost\n          hpx_add_compile_flag_if_available(-Wcast-align)\n        endif()\n    \n        hpx_add_compile_flag_if_available(-Werror=trampolines)\n        hpx_add_compile_flag_if_available(-Werror=parentheses)\n        hpx_add_compile_flag_if_available(-Werror=reorder)\n        hpx_add_compile_flag_if_available(-Werror=return-type)\n        hpx_add_compile_flag_if_available(-Werror=sequence-point)\n        hpx_add_compile_flag_if_available(-Werror=uninitialized)\n        hpx_add_compile_flag_if_available(-Werror=format)\n        hpx_add_compile_flag_if_available(-Werror=missing-braces)\n        hpx_add_compile_flag_if_available(-Werror=sign-compare)\n      endif()\n    endif()\n    \n    # Diagnostics\n    if(MSVC)\n      # Display full paths in diagnostics\n      hpx_add_compile_flag(-FC LANGUAGES C CXX)\n    else()\n      # Show the flags that toggle each warning\n      hpx_add_compile_flag_if_available(-fdiagnostics-show-option LANGUAGES CXX C Fortran)\n    \n      # VLAs are a GNU extensions that we forbid as they are not supported on MSVC\n      hpx_add_compile_flag_if_available(-Werror=vla)\n      # No return statement in a non-void function can lead to garbage return values\n      # in GCC.\n      hpx_add_compile_flag_if_available(-Werror=return-type LANGUAGES CXX C)\n    \n      # We get false positives all over the place with this.\n      if(CMAKE_COMPILER_IS_GNUCXX)\n        hpx_add_compile_flag_if_available(-Wno-unused-but-set-parameter LANGUAGES CXX C)\n        hpx_add_compile_flag_if_available(-Wno-unused-but-set-variable LANGUAGES CXX C)\n        # Uninitialized variables are bad, earlier compilers issue spurious warnings\n        hpx_add_compile_flag_if_available(-Werror=uninitialized LANGUAGES CXX C)\n        hpx_add_compile_flag_if_available(-Wno-unused-local-typedefs LANGUAGES CXX C)\n      endif()\n    \n      # Silence warning about __sync_fetch_and_nand changing semantics\n      hpx_add_compile_flag_if_available(-Wno-sync-nand LANGUAGES CXX C)\n    \n      # Silence warnings about deleting polymorphic objects with non-virtual dtors.\n      # These come from within Boost.\n      if(CMAKE_COMPILER_IS_GNUCXX)\n        hpx_add_compile_flag_if_available(-Wno-delete-non-virtual-dtor LANGUAGES CXX)\n      endif()\n    \n      # Check if our libraries have unresolved symbols\n      #if(NOT APPLE AND NOT HPX_WITH_APEX)\n      if(NOT APPLE AND NOT WIN32 AND NOT HPX_WITH_SANITIZERS)\n        hpx_add_link_flag_if_available(-Wl,-z,defs TARGETS SHARED EXE)\n      endif()\n      if(WIN32)\n        hpx_libraries(WS2_32)\n        hpx_libraries(mswsock)\n      endif()\n    \n      if(\"${HPX_PLATFORM_UC}\" STREQUAL \"BLUEGENEQ\")\n        hpx_add_compile_flag_if_available(-Wno-deprecated-register LANGUAGES CXX C)\n      endif()\n    \n      if(HPX_WITH_HIDDEN_VISIBILITY)\n        hpx_add_compile_flag_if_available(-fvisibility=hidden LANGUAGES CXX C Fortran)\n        hpx_add_link_flag_if_available(-fvisibility=hidden TARGETS SHARED EXE)\n        hpx_add_config_define(HPX_HAVE_ELF_HIDDEN_VISIBILITY)\n        hpx_add_config_define(HPX_HAVE_COROUTINE_GCC_HIDDEN_VISIBILITY)\n        hpx_add_config_define(HPX_HAVE_PLUGIN_GCC_HIDDEN_VISIBILITY)\n      endif()\n    \n      if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n        hpx_add_compile_flag_if_available(-Wno-cast-align)\n      endif()\n    \n      if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Intel\")\n        # Disable the following warnings:\n        # #1170: invalid redeclaration of nested class\n        hpx_add_compile_flag_if_available(-wd1170)\n        # #858: type qualifier on return type is meaningless\n        hpx_add_compile_flag_if_available(-wd858)\n        # #1098: the qualifier on this friend declaration is ignored\n        hpx_add_compile_flag_if_available(-wd1098)\n        # #488: template parameter not used in declaring the parameter type\n        hpx_add_compile_flag_if_available(-wd488)\n        # #2203: cast discards qualifiers from target type (needed for mvapich2\n        #        mpi header)\n        hpx_add_compile_flag_if_available(-wd2203)\n        # #2536: cannot specify explicit initializer for arrays\n        hpx_add_compile_flag_if_available(-wd2536)\n      endif()\n    \n      # rdtsc is an x86 instruction that reads the value of a CPU time stamp\n      # counter. rdtscp is an extension to rdtsc. The difference is that rdtscp is\n      # a serializing instruction.\n      hpx_cpuid(\"rdtsc\" HPX_WITH_RDTSC\n        DEFINITIONS HPX_HAVE_RDTSC)\n    \n      # XeonPhi's do not support RDTSCP\n      if(NOT (\"${HPX_PLATFORM_UC}\" STREQUAL \"XEONPHI\"))\n        hpx_cpuid(\"rdtscp\" HPX_WITH_RDTSCP\n          DEFINITIONS HPX_HAVE_RDTSCP)\n      endif()\n    \n      if(NOT HPX_WITH_RDTSC AND NOT HPX_WITH_RDTSCP)\n        hpx_warn(\"Neither rdtsc nor rdtscp is available; some performance counters may report incorrect results\")\n      endif()\n    endif()\n    \n    ################################################################################\n    \n    ################################################################################\n    # Find Our dependencies:\n    #   These are all dependencies needed to build the core library. Dependencies\n    #   that are only needed by plugins, examples or tests should be found\n    #   seperately in the appropriate subdirectory.\n    # When a package is found, the necessary include paths are set, and the libraries\n    # are added to the HPX_LIBRARIES variables\n    \n    # Find all allocators which are currently supported.\n    include(HPX_SetupAllocator)\n    \n    # convey selected allocator type to the build configuration\n    hpx_add_config_define(HPX_HAVE_MALLOC \"\\\"${HPX_WITH_MALLOC}\\\"\")\n    \n    if(HPX_WITH_HWLOC)\n      hpx_add_config_define(HPX_HAVE_HWLOC)\n    endif()\n    \n    ################################################################################\n    # Enable integration with Intel Amplifier\n    ################################################################################\n    if((NOT HPX_WITH_APEX) AND HPX_WITH_ITTNOTIFY)\n      find_package(Amplifier)\n      if(NOT AMPLIFIER_FOUND)\n        hpx_error(\"Intel Amplifier could not be found and HPX_WITH_ITTNOTIFY=On, please specify AMPLIFIER_ROOT to point to the root of your Amplifier installation\")\n      endif()\n      hpx_libraries(${AMPLIFIER_LIBRARIES})\n      include_directories(${AMPLIFIER_INCLUDE_DIR})\n      hpx_add_config_define(HPX_HAVE_ITTNOTIFY 1)\n      hpx_add_config_define(HPX_HAVE_THREAD_DESCRIPTION)\n    endif()\n    \n    ################################################################################\n    # Enable integration with Apex event counters\n    ################################################################################\n    set(_hpx_apex_no_update)\n    if(HPX_WITH_APEX_NO_UPDATE)\n      set(_hpx_apex_no_update NO_UPDATE)\n    endif()\n    if(HPX_WITH_APEX)\n      # handle APEX library\n      include(GitExternal)\n      git_external(apex\n        https:\/\/github.com\/khuck\/xpress-apex.git\n        v1.2\n        ${_hpx_apex_no_update}\n        VERBOSE)\n    \n      LIST(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}\/apex\/cmake\/Modules\")\n      add_subdirectory(apex\/src\/apex)\n      if(NOT APEX_FOUND)\n        hpx_error(\"Apex could not be found and HPX_WITH_APEX=On\")\n      endif()\n      if(AMPLIFIER_FOUND)\n        hpx_error(\"AMPLIFIER_FOUND has been set. Please disable the use of the Intel Amplifier (WITH_AMPLIFIER=Off) in order to use Apex\")\n      endif()\n    \n      include_directories(${APEX_SOURCE_DIR})\n      set(HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES\n          ${HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES} apex_lib)\n      if(APEX_WITH_MSR)\n        set(HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES\n            ${HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES} -L${MSR_ROOT}\/lib -lmsr)\n      endif()\n      if(APEX_WITH_ACTIVEHARMONY)\n        set(HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES\n            ${HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES} -L${ACTIVEHARMONY_ROOT}\/lib -lharmony)\n      endif()\n      if(APEX_WITH_OTF2)\n        set(HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES\n            ${HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES} -L${OTF2_ROOT}\/lib -lotf2)\n      endif()\n    \n      # handle optional ITTNotify library\n      if(HPX_WITH_ITTNOTIFY)\n        add_subdirectory(apex\/src\/ITTNotify)\n        if(NOT ITTNOTIFY_FOUND)\n          hpx_error(\"ITTNotify could not be found and HPX_WITH_ITTNOTIFY=On\")\n        endif()\n        include_directories(${ITTNOTIFY_SOURCE_DIR})\n        hpx_add_config_define(HPX_HAVE_ITTNOTIFY 1)\n        set(HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES\n            ${HPX_ADDITIONAL_PRIVATE_RUNTIME_DEPENDENCIES} ittnotify_lib)\n      endif()\n    endif()\n    \n    if(HPX_WITH_GOOGLE_PERFTOOLS)\n      find_package(GooglePerftools)\n      if(NOT GOOGLE_PERFTOOLS_FOUND)\n        hpx_error(\"Google Perftools could not be found and HPX_WITH_GOOGLE_PERFTOOLS=On, please specify GOOGLE_PERFTOOLS to point to the root of your Google Perftools installation\")\n      endif()\n      hpx_libraries(${GOOGLE_PERFTOOLS_LIBRARIES})\n      include_directories(${GOOGLE_PERFTOOLS_INCLUDE_DIR})\n    endif()\n    \n    if(HPX_WITH_VALGRIND)\n      find_package(Valgrind)\n      if(NOT VALGRIND_FOUND)\n        hpx_error(\"Valgrind could not be found and HPX_WITH_VALGRIND=On, please specify VALGRIND_ROOT to point to the root of your Valgrind installation\")\n      endif()\n      include_directories(${VALGRIND_INCLUDE_DIR})\n      hpx_add_config_define(HPX_HAVE_VALGRIND)\n    endif()\n    \n    ################################################################################\n    # Check Build Options based on the found dependencies. We also check for errors\n    # with incompatible options with the currently selected platform.\n    #\n    \n    if(HPX_WITH_GENERIC_CONTEXT_COROUTINES)\n      # Check if we can use generic coroutine contexts without any problems\n      if(NOT Boost_CONTEXT_FOUND)\n        hpx_error(\"The usage of Boost.Context was selected but Boost.Context was not found (Version 1.51 or higher is required).\")\n      endif()\n      if(\"${HPX_PLATFORM_UC}\" STREQUAL \"BLUEGENEQ\")\n        if(Boost_VERSION LESS 105600)\n          hpx_error(\"On BlueGene\/Q, Boost.Context can only be used with a Boost >=1.56\")\n        endif()\n      endif()\n      hpx_add_config_define(HPX_HAVE_GENERIC_CONTEXT_COROUTINES)\n    endif()\n    \n    ################################################################################\n    # Emulation of SwapContext on Windows\n    ################################################################################\n    if(WIN32)\n      if(HPX_WITH_SWAP_CONTEXT_EMULATION)\n        if(NOT CMAKE_ASM_MASM_COMPILER)\n          hpx_error(\"SwitchToFiber emulation can not be enabled. The masm compiler could not be found. Try setting the ASM_MASM environment variable to the assembler executable (ml.exe\/ml64.exe) or disable the emulation by setting HPX_WITH_SWAP_CONTEXT_EMULATION to Off\")\n        else()\n          hpx_info(\"SwitchToFiber emulation is enabled, using compiler: '${CMAKE_ASM_MASM_COMPILER}'\")\n          hpx_add_config_define(HPX_HAVE_SWAP_CONTEXT_EMULATION)\n        endif()\n      endif()\n    endif()\n    \n    ################################################################################\n    \n    ################################################################################\n    # HPX_PREFIX\n    # The prefix is the default search path for HPX plugins\n    ################################################################################\n    if(\"${HPX_PLATFORM_UC}\" STREQUAL \"ANDROID\")\n      set(HPX_PREFIX \"lib\")\n      set(HPX_BUILD_PREFIX \"lib\")\n    else()\n      set(HPX_PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n      set(HPX_BUILD_PREFIX \"${BDIR}\")\n    endif()\n    \n    \n    # ################################################################################\n    # # search path configuration\n    # ################################################################################\n    \n    if (NOT DEFINED LIB)\n      set(LIB \"lib\")\n    endif(NOT DEFINED LIB)\n    \n    if(HPX_WITH_FULL_RPATH)\n      hpx_include(SetFullRPATH)\n    endif()\n    ###############################################################################\n    \n    ################################################################################\n    # Git commit detection\n    ################################################################################\n    include(HPX_GitCommit)\n    hpx_add_config_define(HPX_HAVE_GIT_COMMIT \"\\\"${HPX_WITH_GIT_COMMIT}\\\"\")\n    \n    hpx_include(SetOutputPaths)\n    ##############################################################################\n    \n    ################################################################################\n    # Configure compression and other plugins\n    ################################################################################\n    set(HPX_STATIC_PARCELPORT_PLUGINS \"\" CACHE INTERNAL \"\" FORCE)\n    #add_hpx_pseudo_target(plugins)\n    #add_subdirectory(plugins)\n    \n    if(HPX_WITH_COMPRESSION_BZIP2)\n      hpx_add_config_define(HPX_HAVE_COMPRESSION_BZIP2)\n    endif()\n    if(HPX_WITH_COMPRESSION_SNAPPY)\n      hpx_add_config_define(HPX_HAVE_COMPRESSION_SNAPPY)\n    endif()\n    if(HPX_WITH_COMPRESSION_ZLIB)\n      hpx_add_config_define(HPX_HAVE_COMPRESSION_ZLIB)\n    endif()\n    \n    hpx_add_config_define(HPX_HAVE_PARCELPORT_TCP)\n    \n    set(HPX_STATIC_PARCELPORT_PLUGINS\n        #verbs\n        #mpi\n        tcp\n    )\n    macro(add_parcelport_modules)\n      if(HPX_WITH_NETWORKING)\n        hpx_debug(\"creating static_parcelports.hpp: \" ${HPX_STATIC_PARCELPORT_PLUGINS})\n    \n        set(_parcelport_export)\n        set(_parcelport_init)\n        foreach(parcelport ${HPX_STATIC_PARCELPORT_PLUGINS})\n          set(_parcelport_export\n            \"${_parcelport_export}HPX_EXPORT hpx::plugins::parcelport_factory_base *parcelport_${parcelport}_factory_init(std::vector<hpx::plugins::parcelport_factory_base *>& factories);\\n\")\n          set(_parcelport_init\n            \"${_parcelport_init}        parcelport_${parcelport}_factory_init(factories);\\n\")\n        endforeach()\n      endif()\n    \n      configure_file(\"${SDIR}\/cmake\/templates\/static_parcelports.hpp.in\"\n                     \"${BDIR}\/hpx\/runtime\/parcelset\/static_parcelports.hpp\"\n                     @ONLY)\n    endmacro()\n    add_parcelport_modules()\n    \n    ################################################################################\n    # Configure the header to include all compile definitions\n    ################################################################################\n    \n    \n    get_property(v GLOBAL PROPERTY HPX_CONFIG_DEFINITIONS)\n    foreach(d ${v})\n        set(${d} 1)\n    endforeach()\n    \n    # Generate a defines.hpp to be used in the build directory ...\n    set(HPX_DEFINES_PREFIX ${HPX_BUILD_PREFIX})\n    write_config_defines_file(\n      TEMPLATE \"${SDIR}\/cmake\/templates\/config_defines.hpp.in\"\n      NAMESPACE default\n      FILENAME \"${BDIR}\/hpx\/config\/defines.hpp\")\n    \n    # Generate a defines.hpp to be used in the install directory ...\n    set(HPX_DEFINES_PREFIX ${HPX_PREFIX})\n    write_config_defines_file(\n      TEMPLATE \"${SDIR}\/cmake\/templates\/config_defines.hpp.in\"\n      NAMESPACE default\n      FILENAME \"${BDIR}\/${CMAKE_FILES_DIRECTORY}\/hpx\/config\/defines.hpp\")\n\npost_target: |\n    get_property(v GLOBAL PROPERTY HPX_CONFIG_DEFINITIONS)\n    foreach(d ${v})\n        target_compile_definitions(${this} PUBLIC ${d})\n    endforeach()\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/STEllAR-GROUP\/hpx",
            "tag": "1.0.0"
        }
    },
    "version": "1.0.0",
    "hash": "293d3535b6b7f59487e4d2b77d6e5c785481446fc4ce71cc3935203661c27c59",
    "created": "2017-08-03 17:44:39.213415"
}

{
    "project": "pvt.cppan.demo.intel.opencv.contrib.xfeatures2d",
    "version": "3.4.0",
    "cppan": "source:\n    git: https:\/\/github.com\/opencv\/opencv_contrib\n    tag: 3.4.0\n\nversion: 3.4.0\n\ntype: library\n\nfiles:\n    -   modules\/xfeatures2d\/cmake\/.*\n    -   modules\/xfeatures2d\/include\/.*\n    -   modules\/xfeatures2d\/src\/.*\n\nexclude_from_build:\n    -   modules\/xfeatures2d\/src\/cuda\/.*\n    -   modules\/xfeatures2d\/src\/opencl\/.*\n\ninclude_directories:\n    public:\n        -   modules\/xfeatures2d\/include\n    private:\n        -   modules\/xfeatures2d\/src\n\noptions:\n    any:\n        definitions:\n            private:\n                -   __OPENCV_BUILD\n    shared:\n        definitions:\n            private:\n                -   CVAPI_EXPORTS\n\ndependencies:\n    public:\n        pvt.cppan.demo.intel.opencv.core:\n            version: \"*\"\n        pvt.cppan.demo.intel.opencv.features2d:\n            version: \"*\"\n\npre_project: |\n    if (MSVC)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} \/wd4127\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} \/wd4251\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} \/wd4275\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} \/wd4324\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} \/wd4589\")\n    endif()\n\npost_sources: |\n    function(ocv_download)\n      cmake_parse_arguments(DL \"\" \"PACKAGE;HASH;URL;DESTINATION_DIR;DOWNLOAD_DIR\" \"\" ${ARGN})\n      if(NOT DL_DOWNLOAD_DIR)\n        set(DL_DOWNLOAD_DIR \"${DL_DESTINATION_DIR}\/downloads\")\n      endif()\n      if(DEFINED DL_DESTINATION_DIR)\n        set(DESTINATION_TARGET \"${DL_DESTINATION_DIR}\/${DL_PACKAGE}\")\n        if(EXISTS \"${DESTINATION_TARGET}\")\n          file(MD5 \"${DESTINATION_TARGET}\" target_md5)\n          if(NOT target_md5 STREQUAL DL_HASH)\n            file(REMOVE \"${DESTINATION_TARGET}\")\n          else()\n            set(DOWNLOAD_PACKAGE_LOCATION \"\" PARENT_SCOPE)\n            unset(DOWNLOAD_PACKAGE_LOCATION)\n            return()\n          endif()\n        endif()\n      endif()\n      set(DOWNLOAD_TARGET \"${DL_DOWNLOAD_DIR}\/${DL_HASH}\/${DL_PACKAGE}\")\n      get_filename_component(DOWNLOAD_TARGET_DIR \"${DOWNLOAD_TARGET}\" PATH)\n      if(EXISTS \"${DOWNLOAD_TARGET}\")\n        file(MD5 \"${DOWNLOAD_TARGET}\" target_md5)\n        if(NOT target_md5 STREQUAL DL_HASH)\n          message(WARNING \"Download: Local copy of ${DL_PACKAGE} has invalid MD5 hash: ${target_md5} (expected: ${DL_HASH})\")\n          file(REMOVE \"${DOWNLOAD_TARGET}\")\n          file(REMOVE_RECURSE \"${DOWNLOAD_TARGET_DIR}\")\n        endif()\n      endif()\n    \n      if(NOT EXISTS \"${DOWNLOAD_TARGET}\")\n        set(__url \"\")\n        foreach(__url_i ${DL_URL})\n          if(NOT (\"${__url_i}\" STREQUAL \"\"))\n            set(__url \"${__url_i}\")\n            break()\n          endif()\n        endforeach()\n        if(\"${__url}\" STREQUAL \"\")\n          message(FATAL_ERROR \"Download URL is not specified for package ${DL_PACKAGE}\")\n        endif()\n    \n        if(NOT EXISTS \"${DOWNLOAD_TARGET_DIR}\")\n          file(MAKE_DIRECTORY ${DOWNLOAD_TARGET_DIR})\n        endif()\n        message(STATUS \"Downloading ${DL_PACKAGE}...\")\n        #message(STATUS \"    ${__url}${DL_PACKAGE}\")\n        file(DOWNLOAD \"${__url}${DL_PACKAGE}\" \"${DOWNLOAD_TARGET}\"\n             TIMEOUT 600 STATUS __status\n             EXPECTED_MD5 ${DL_HASH})\n        if(NOT __status EQUAL 0)\n          message(FATAL_ERROR \"Failed to download ${DL_PACKAGE}. Status=${__status}\")\n        else()\n          # Don't remove this code, because EXPECTED_MD5 parameter doesn't fail \"file(DOWNLOAD)\" step on wrong hash\n          file(MD5 \"${DOWNLOAD_TARGET}\" target_md5)\n          if(NOT target_md5 STREQUAL DL_HASH)\n            message(FATAL_ERROR \"Downloaded copy of ${DL_PACKAGE} has invalid MD5 hash: ${target_md5} (expected: ${DL_HASH})\")\n          endif()\n        endif()\n        message(STATUS \"Downloading ${DL_PACKAGE}... Done\")\n      endif()\n    \n      if(DEFINED DL_DESTINATION_DIR)\n        execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different \"${DOWNLOAD_TARGET}\" \"${DL_DESTINATION_DIR}\/\"\n                        RESULT_VARIABLE __result)\n    \n        if(NOT __result EQUAL 0)\n          message(FATAL_ERROR \"Downloader: Failed to copy package from ${DOWNLOAD_TARGET} to ${DL_DESTINATION_DIR} with error ${__result}\")\n        endif()\n      endif()\n    \n      set(DOWNLOAD_PACKAGE_LOCATION ${DOWNLOAD_TARGET} PARENT_SCOPE)\n    endfunction()\n    \n    include(${SDIR}\/modules\/xfeatures2d\/cmake\/download_vgg.cmake)\n    include(${SDIR}\/modules\/xfeatures2d\/cmake\/download_boostdesc.cmake)\n    \n    set(dir ${SDIR}\/modules\/xfeatures2d)\n    file(GLOB cl_kernels \"${dir}\/src\/opencl\/*.cl\")\n    if(cl_kernels)\n        set(OCL_NAME opencl_kernels_xfeatures2d)\n        add_custom_command(\n          OUTPUT \"${BDIR}\/${OCL_NAME}.cpp\" \"${BDIR}\/${OCL_NAME}.hpp\"\n          COMMAND\n            ${CMAKE_COMMAND}\n                \"-DMODULE_NAME=xfeatures2d\"\n                \"-DCL_DIR=${dir}\/src\/opencl\"\n                \"-DOUTPUT=${BDIR}\/${OCL_NAME}.cpp\"\n                -P \"${pvt_cppan_demo_intel_opencv_core_DIR}\/cmake\/cl2cpp.cmake\"\n          DEPENDS ${cl_kernels} \"${pvt_cppan_demo_intel_opencv_core_DIR}\/cmake\/cl2cpp.cmake\")\n        list(APPEND src \"${BDIR}\/${OCL_NAME}.cpp\" \"${BDIR}\/${OCL_NAME}.hpp\")\n    endif()\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/opencv\/opencv_contrib",
            "tag": "3.4.0"
        }
    },
    "created": "2018-01-17 12:52:47.499517",
    "hash": "6d5eadbcb9b609f066e3c123e10f543786d4c784c96699bf114108761a550245"
}

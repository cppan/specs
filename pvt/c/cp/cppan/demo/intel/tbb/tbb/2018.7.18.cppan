{
    "project": "pvt.cppan.demo.intel.tbb.tbb",
    "version": "2018.7.18",
    "cppan": "source:\n    remote: https:\/\/github.com\/01org\/tbb\/archive\/2019.tar.gz\n\nversion: 2018.7.18\n\ntype: library\n\nfiles:\n    -   include\/.*\n    -   src\/old\/.*\n    -   src\/old\/.*\\.h\n    -   src\/rml\/.*\\.h\n    -   src\/rml\/client\/rml_tbb.cpp\n    -   src\/tbb\/.*\\.asm\n    -   src\/tbb\/.*\\.cpp\n    -   src\/tbb\/.*\\.def\n    -   src\/tbb\/.*\\.h\n    -   src\/tbb\/.*\\.lst\n\ninclude_directories:\n    public:\n        -   include\n    private:\n        -   src\n        -   src\/rml\/include\n\noptions:\n    any:\n        definitions:\n            private:\n                -   __TBB_BUILD\n            public:\n                -   __TBB_NO_IMPLICIT_LINKAGE\n            unix:\n                public:\n                    -   USE_PTHREAD\n            win32:\n                public:\n                    -   USE_WINTHREAD\n\npost_sources: |\n    remove_src_dir(src\/old\/test*.cpp)\n    remove_src_dir(src\/tbb\/*.asm)\n    remove_src_dir(src\/tbb\/*.def)\n    #remove_src_dir(${SDIR}\/src\/tbb\/*.s)\n    \n    set(ver ${BDIR}\/version_info.h.in)\n    file_write_once(${ver} \"\n    #define __TBB_VERSION_STRINGS(N) \\\n    #N\\\": BUILD_HOST         @CMAKE_SYSTEM_NAME@\\\" ENDL \\\n    #N\\\": BUILD_OS           @CMAKE_SYSTEM@\\\" ENDL \\\n    #N\\\": BUILD_KERNEL       @CMAKE_SYSTEM_VERSION@\\\" ENDL \\\n    #N\\\": BUILD_GCC          @CMAKE_CXX_COMPILER_ID@\\\" ENDL \\\n    #N\\\": BUILD_LIBC         Unknown\\\" ENDL \\\n    #N\\\": BUILD_LD           Unknown\\\" ENDL \\\n    #N\\\": BUILD_TARGET       Unknown\\\" ENDL \\\n    #N\\\": BUILD_COMMAND      Unknown\\\" ENDL\n    \n    #define __TBB_DATETIME \\\"@_configure_date@\\\"\n    \")\n    \n    if (UNIX)\n      execute_process (COMMAND date \"+%a, %d %b %Y %H:%M:%S %z\"\n                       OUTPUT_VARIABLE _configure_date\n                       OUTPUT_STRIP_TRAILING_WHITESPACE)\n    elseif (WIN32)\n      execute_process (COMMAND cmd \" \/C date \/T\"\n                       OUTPUT_VARIABLE _configure_date\n                       OUTPUT_STRIP_TRAILING_WHITESPACE)\n    else ()\n      set (_configure_date \"Unknown\")\n    endif()\n    \n    configure_file(${ver} ${BDIR}\/version_string.ver @ONLY)\n    \n    if (MSVC)\n        enable_language(ASM_MASM)\n        if (CMAKE_SIZEOF_VOID_P EQUAL 8)\n            add_src(src\/tbb\/intel64-masm\/atomic_support.asm)\n            add_src(src\/tbb\/intel64-masm\/itsx.asm)\n            add_src(src\/tbb\/intel64-masm\/intel64_misc.asm)\n            set(CMAKE_ASM_MASM_FLAGS \"\/DEM64T=1 ${CMAKE_ASM_MASM_FLAGS}\")\n        else()\n            add_src(src\/tbb\/ia32-masm\/atomic_support.asm)\n            add_src(src\/tbb\/ia32-masm\/itsx.asm)\n            add_src(src\/tbb\/ia32-masm\/lock_byte.asm)\n            # Enable SAFESEH feature for assembly (x86 builds only).\n            #set(CMAKE_ASM_MASM_FLAGS \"\/safeseh ${CMAKE_ASM_MASM_FLAGS}\")\n            set_source_files_properties(\n                ${SDIR}\/src\/tbb\/ia32-masm\/atomic_support.asm\n                ${SDIR}\/src\/tbb\/ia32-masm\/itsx.asm\n                ${SDIR}\/src\/tbb\/ia32-masm\/lock_byte.asm\n                PROPERTIES COMPILE_FLAGS \"\/safeseh\"\n            )\n        endif()\n    endif()\n    \n    # Linker export definitions\n    if (APPLE)\n      set (ARCH_PREFIX \"mac\")\n    elseif(WIN32)\n      set (ARCH_PREFIX \"win\")\n    else ()\n      set (ARCH_PREFIX \"lin\")\n    endif ()\n    \n    if (CMAKE_SIZEOF_VOID_P EQUAL 8)\n      set(ARCH_PREFIX \"${ARCH_PREFIX}64\")\n    else()\n      set(ARCH_PREFIX \"${ARCH_PREFIX}32\")\n    endif()\n    \n    if (MINGW)\n      set (ARCH_PREFIX \"${ARCH_PREFIX}-gcc\")\n      # there's no win32-gcc-tbb-export.def, use lin32-tbb-export.def\n      execute_process (COMMAND ${CMAKE_COMMAND} -E copy ${SDIR}\/src\/tbb\/lin32-tbb-export.def ${SDIR}\/src\/tbb\/win32-gcc-tbb-export.def)\n    endif()\n    \n    if (MSVC)\n      add_custom_command(OUTPUT ${BDIR}\/tbb.def\n        COMMAND ${CMAKE_CXX_COMPILER} \/TC \/EP ${SDIR}\/src\/tbb\/${ARCH_PREFIX}-tbb-export.def  -I ${SDIR}\/include > ${BDIR}\/tbb.def\n        MAIN_DEPENDENCY ${SDIR}\/src\/tbb\/${ARCH_PREFIX}-tbb-export.def\n        COMMENT \"Preprocessing tbb.def\"\n      )\n    else()\n      add_custom_command(OUTPUT ${BDIR}\/tbb.def\n        COMMAND ${CMAKE_CXX_COMPILER} -xc++ -E ${SDIR}\/src\/tbb\/${ARCH_PREFIX}-tbb-export.def  -I ${SDIR}\/include -o ${BDIR}\/tbb.def\n        MAIN_DEPENDENCY ${SDIR}\/src\/tbb\/${ARCH_PREFIX}-tbb-export.def\n        COMMENT \"Preprocessing tbb.def\"\n      )\n    endif()\n    \n    #add_custom_target(tbb_def_files DEPENDS tbb.def tbbmalloc.def)\n    \n    set(src ${src} ${BDIR}\/tbb.def)\n\npost_target: |\n    if (UNIX)\n        target_link_libraries(${this} PUBLIC dl)\n    endif()\n\n",
    "source": {
        "remote": {
            "url": "https:\/\/github.com\/01org\/tbb\/archive\/2019.tar.gz"
        }
    },
    "hash": "c49323347ef241cfcbbf21929395a0e173d365a35e3692c2bb2c19cfea3b4c33",
    "created": "2018-09-29 21:36:20.684006"
}

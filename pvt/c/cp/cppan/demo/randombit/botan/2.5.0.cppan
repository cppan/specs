{
    "project": "pvt.cppan.demo.randombit.botan",
    "cppan": "source:\n    git: https:\/\/github.com\/randombit\/botan\n    tag: \"{v}\"\n\nversion: 2.5.0\n\ntype: library\n\nroot_directory: src\/lib\n\napi_name:\n    -   BOTAN_DLL\n\nfiles:\n    -   .*\n\ndependencies:\n    public:\n        pvt.cppan.demo.bearssl:\n            version: 0\n        pvt.cppan.demo.xz_utils.lzma:\n            version: \"*\"\n        pvt.cppan.demo.openssl.crypto:\n            version: 1\n        pvt.cppan.demo.bzip2:\n            version: 1\n        pvt.cppan.demo.sqlite3:\n            version: 3\n        pvt.cppan.demo.madler.zlib:\n            version: 1\n\npost_sources: |\n    remove_src_dir(\"*info.txt\")\n    \n    remove_src_dir(\"*aes_power8*\")\n    remove_src_dir(\"*pmull*\")\n    remove_src_dir(\"*armv8*\")\n    \n    if (NOT APPLE)\n        remove_src_dir(\"*darwin_*\")\n    endif()\n    \n    if (WIN32)\n        remove_src_dir(\"*fd_unix.cpp*\")\n        remove_src_dir(\"*dev_random.cpp*\")\n        remove_src_dir(\"*getentropy.cpp*\")\n        remove_src_dir(\"*tpm.cpp*\")\n        remove_src_dir(\"*proc_walk.cpp*\")\n    endif()\n    \n    file_write_once(${BDIR}\/botan\/build.h \"\n        #ifndef BOTAN_BUILD_CONFIG_H_\n        #define BOTAN_BUILD_CONFIG_H_\n    \n        #define BOTAN_VERSION_MAJOR ${PACKAGE_VERSION_MAJOR}\n        #define BOTAN_VERSION_MINOR ${PACKAGE_VERSION_MINOR}\n        #define BOTAN_VERSION_PATCH ${PACKAGE_VERSION_PATCH}\n        #define BOTAN_VERSION_DATESTAMP 0\n    \n        #define BOTAN_VERSION_RELEASE_TYPE \\\"x\\\"\n        #define BOTAN_VERSION_VC_REVISION \\\"x\\\"\n        #define BOTAN_DISTRIBUTION_INFO \\\"x\\\"\n    \n        \/* How many bits per limb in a BigInt *\/\n        #define BOTAN_MP_WORD_BITS 64\n    \n        \/* Target identification and feature test macros *\/\n    \n        #ifdef _WIN32\n        #define BOTAN_TARGET_OS_IS_WINDOWS\n        #define BOTAN_TARGET_OS_TYPE_IS_WINDOWS\n    \n        #define BOTAN_TARGET_OS_HAS_CRYPTGENRANDOM\n        #define BOTAN_TARGET_OS_HAS_RTLGENRANDOM\n        #define BOTAN_TARGET_OS_HAS_FILESYSTEM\n        #define BOTAN_TARGET_OS_HAS_RTLSECUREZEROMEMORY\n        #define BOTAN_TARGET_OS_HAS_STL_FILESYSTEM_MSVC\n        #define BOTAN_TARGET_OS_HAS_THREADS\n        #define BOTAN_TARGET_OS_HAS_VIRTUAL_LOCK\n        #define BOTAN_TARGET_OS_HAS_WIN32\n        #define BOTAN_TARGET_OS_HAS_WINSOCK2\n        #else\n    \n        #endif\n       \n        #if defined(_MSC_VER)\n        #define BOTAN_BUILD_COMPILER_IS_MSVC\n        #endif\n    \n        #if ((defined(_MSC_VER) && !defined(_WIN64)) || \\\n                                                     (defined(__clang__) && !defined(__x86_64__)) || \\\n                                                     (defined(__GNUG__) && !defined(__x86_64__)))\n    \n        #define BOTAN_TARGET_ARCH_IS_X86_32\n        #endif\n    \n        #if ((defined(_MSC_VER) && defined(_WIN64)) || \\\n                                                     (defined(__clang__) && !defined(__i386__)) || \\\n                                                     (defined(__GNUG__) && !defined(__i386__)))\n    \n        #define BOTAN_TARGET_ARCH_IS_X86_64\n        #define BOTAN_TARGET_CPU_HAS_NATIVE_64BIT\n        #endif\n    \n    \n    \n        #define BOTAN_TARGET_CPU_IS_LITTLE_ENDIAN\n        #define BOTAN_TARGET_CPU_IS_X86_FAMILY\n    \n        \/\/#define BOTAN_TARGET_SUPPORTS_AESNI\n        \/\/#define BOTAN_TARGET_SUPPORTS_AVX2\n        \/\/#define BOTAN_TARGET_SUPPORTS_BMI2\n        \/\/#define BOTAN_TARGET_SUPPORTS_RDRAND\n        \/\/#define BOTAN_TARGET_SUPPORTS_RDSEED\n        \/\/#define BOTAN_TARGET_SUPPORTS_SHA\n        #define BOTAN_TARGET_SUPPORTS_SSE2\n        #define BOTAN_TARGET_SUPPORTS_SSE41\n        #define BOTAN_TARGET_SUPPORTS_SSE42\n        #define BOTAN_TARGET_SUPPORTS_SSSE3\n    \n    \n    \n    \n        \/*\n        * Module availability definitions\n        *\/\n        #define BOTAN_HAS_ADLER32 20131128\n        #define BOTAN_HAS_AEAD_CCM 20131128\n        #define BOTAN_HAS_AEAD_CHACHA20_POLY1305 20141228\n        #define BOTAN_HAS_AEAD_EAX 20131128\n        #define BOTAN_HAS_AEAD_GCM 20131128\n        #define BOTAN_HAS_AEAD_MODES 20131128\n        #define BOTAN_HAS_AEAD_OCB 20131128\n        #define BOTAN_HAS_AEAD_SIV 20131202\n        #define BOTAN_HAS_AES 20131128\n        #define BOTAN_HAS_AES_NI 20131128\n        #define BOTAN_HAS_AES_SSSE3 20131128\n        #define BOTAN_HAS_ANSI_X919_MAC 20131128\n        #define BOTAN_HAS_ARIA 20170415\n        #define BOTAN_HAS_ASN1 20171109\n        #define BOTAN_HAS_AUTO_RNG 20161126\n        #define BOTAN_HAS_AUTO_SEEDING_RNG 20160821\n        #define BOTAN_HAS_BASE64_CODEC 20131128\n        #define BOTAN_HAS_BCRYPT 20131128\n        #define BOTAN_HAS_BIGINT 20131128\n        #define BOTAN_HAS_BIGINT_MP 20151225\n        #define BOTAN_HAS_BLAKE2B 20130131\n        #define BOTAN_HAS_BLOCK_CIPHER 20131128\n        #define BOTAN_HAS_BLOWFISH 20131128\n        #define BOTAN_HAS_CAMELLIA 20150922\n        #define BOTAN_HAS_CASCADE 20131128\n        #define BOTAN_HAS_CAST 20131128\n        #define BOTAN_HAS_CAST_128 20171203\n        #define BOTAN_HAS_CAST_256 20171203\n        #define BOTAN_HAS_CBC_MAC 20131128\n        #define BOTAN_HAS_CECPQ1 20161116\n        #define BOTAN_HAS_CERTSTOR_SQL 20160818\n        #define BOTAN_HAS_CHACHA 20140103\n        #define BOTAN_HAS_CHACHA_RNG 20170728\n        #define BOTAN_HAS_CHACHA_SSE2 20160831\n        #define BOTAN_HAS_CIPHER_MODES 20180124\n        #define BOTAN_HAS_CIPHER_MODE_PADDING 20131128\n        #define BOTAN_HAS_CMAC 20131128\n        #define BOTAN_HAS_CODEC_FILTERS 20131128\n        #define BOTAN_HAS_COMB4P 20131128\n        #define BOTAN_HAS_CPUID 20170917\n        #define BOTAN_HAS_CRC24 20131128\n        #define BOTAN_HAS_CRC32 20131128\n        #define BOTAN_HAS_CRYPTO_BOX 20131128\n        #define BOTAN_HAS_CTR_BE 20131128\n        #define BOTAN_HAS_CURVE_25519 20170621\n        #define BOTAN_HAS_DES 20131128\n        #define BOTAN_HAS_DIFFIE_HELLMAN 20131128\n        #define BOTAN_HAS_DLIES 20160713\n        #define BOTAN_HAS_DL_GROUP 20131128\n        #define BOTAN_HAS_DL_PUBLIC_KEY_FAMILY 20131128\n        #define BOTAN_HAS_DSA 20131128\n        #define BOTAN_HAS_DYNAMIC_LOADER 20160310\n        #define BOTAN_HAS_ECC_GROUP 20170225\n        #define BOTAN_HAS_ECC_PUBLIC_KEY_CRYPTO 20131128\n        #define BOTAN_HAS_ECDH 20131128\n        #define BOTAN_HAS_ECDSA 20131128\n        #define BOTAN_HAS_ECGDSA 20160301\n        #define BOTAN_HAS_ECIES 20160128\n        #define BOTAN_HAS_ECKCDSA 20160413\n        #define BOTAN_HAS_EC_CURVE_GFP 20131128\n        #define BOTAN_HAS_ED25519 20170607\n        #define BOTAN_HAS_ELGAMAL 20131128\n        #define BOTAN_HAS_EME_OAEP 20140118\n        #define BOTAN_HAS_EME_PKCS1v15 20131128\n        #define BOTAN_HAS_EME_RAW 20150313\n        #define BOTAN_HAS_EMSA1 20131128\n        #define BOTAN_HAS_EMSA_PKCS1 20140118\n        #define BOTAN_HAS_EMSA_PSSR 20131128\n        #define BOTAN_HAS_EMSA_RAW 20131128\n        #define BOTAN_HAS_EMSA_X931 20140118\n        #define BOTAN_HAS_ENTROPY_SOURCE 20151120\n        #define BOTAN_HAS_ENTROPY_SRC_RDRAND 20131128\n        #define BOTAN_HAS_ENTROPY_SRC_RDSEED 20151218\n        #define BOTAN_HAS_ENTROPY_SRC_WIN32 20131128\n        #define BOTAN_HAS_FFI 20170815\n        #define BOTAN_HAS_FILTERS 20160415\n        #define BOTAN_HAS_FPE_FE1 20131128\n        #define BOTAN_HAS_GCM_CLMUL 20131227\n        #define BOTAN_HAS_GCM_CLMUL_SSSE3 20171020\n        #define BOTAN_HAS_GMAC 20160207\n        #define BOTAN_HAS_GOST_28147_89 20131128\n        #define BOTAN_HAS_GOST_34_10_2001 20131128\n        #define BOTAN_HAS_GOST_34_11 20131128\n        #define BOTAN_HAS_HASH 20180112\n        #define BOTAN_HAS_HASH_ID 20131128\n        #define BOTAN_HAS_HEX_CODEC 20131128\n        #define BOTAN_HAS_HKDF 20170927\n        #define BOTAN_HAS_HMAC 20131128\n        #define BOTAN_HAS_HMAC_DRBG 20140319\n        #define BOTAN_HAS_HOTP 20170513\n        #define BOTAN_HAS_HTTP_UTIL 20171003\n        #define BOTAN_HAS_IDEA 20131128\n        #define BOTAN_HAS_IDEA_SSE2 20131128\n        #define BOTAN_HAS_ISO_9796 20161121\n        #define BOTAN_HAS_KASUMI 20131128\n        #define BOTAN_HAS_KDF1 20131128\n        #define BOTAN_HAS_KDF1_18033 20160128\n        #define BOTAN_HAS_KDF2 20131128\n        #define BOTAN_HAS_KDF_BASE 20131128\n        #define BOTAN_HAS_KECCAK 20131128\n        #define BOTAN_HAS_KEYPAIR_TESTING 20131128\n        #define BOTAN_HAS_LION 20131128\n        #define BOTAN_HAS_LOCKING_ALLOCATOR 20131128\n        #define BOTAN_HAS_MAC 20150626\n        #define BOTAN_HAS_MCEIES 20150706\n        #define BOTAN_HAS_MCELIECE 20150922\n        #define BOTAN_HAS_MD4 20131128\n        #define BOTAN_HAS_MD5 20131128\n        #define BOTAN_HAS_MDX_HASH_FUNCTION 20131128\n        #define BOTAN_HAS_MEM_POOL 20180309\n        #define BOTAN_HAS_MGF1 20140118\n        #define BOTAN_HAS_MISTY1 20131128\n        #define BOTAN_HAS_MODES 20150626\n        #define BOTAN_HAS_MODE_CBC 20131128\n        #define BOTAN_HAS_MODE_CFB 20131128\n        #define BOTAN_HAS_MODE_XTS 20131128\n        #define BOTAN_HAS_NEWHOPE 20161018\n        #define BOTAN_HAS_NIST_KEYWRAP 20171119\n        #define BOTAN_HAS_NOEKEON 20131128\n        #define BOTAN_HAS_NOEKEON_SIMD 20160903\n        #define BOTAN_HAS_NUMBERTHEORY 20131128\n        #define BOTAN_HAS_OCSP 20161118\n        #define BOTAN_HAS_OFB 20131128\n        #define BOTAN_HAS_PACKAGE_TRANSFORM 20131128\n        #define BOTAN_HAS_PARALLEL_HASH 20131128\n        #define BOTAN_HAS_PASSHASH9 20131128\n        #define BOTAN_HAS_PBKDF 20150626\n        #define BOTAN_HAS_PBKDF1 20131128\n        #define BOTAN_HAS_PBKDF2 20131128\n        #define BOTAN_HAS_PEM_CODEC 20131128\n        #define BOTAN_HAS_PGP_S2K 20170527\n        #define BOTAN_HAS_PKCS11 20160219\n        #define BOTAN_HAS_PKCS5_PBES2 20141119\n        #define BOTAN_HAS_PK_PADDING 20131128\n        #define BOTAN_HAS_POLY1305 20141227\n        #define BOTAN_HAS_POLY_DBL 20170927\n        #define BOTAN_HAS_PSK_DB 20171119\n        #define BOTAN_HAS_PUBLIC_KEY_CRYPTO 20131128\n        #define BOTAN_HAS_RC4 20131128\n        #define BOTAN_HAS_RDRAND_RNG 20160619\n        #define BOTAN_HAS_RFC3394_KEYWRAP 20131128\n        #define BOTAN_HAS_RFC6979_GENERATOR 20140321\n        #define BOTAN_HAS_RIPEMD_160 20131128\n        #define BOTAN_HAS_RSA 20160730\n        #define BOTAN_HAS_SALSA20 20171114\n        #define BOTAN_HAS_SEED 20131128\n        #define BOTAN_HAS_SERPENT 20131128\n        #define BOTAN_HAS_SERPENT_SIMD 20160903\n        #define BOTAN_HAS_SHA1 20131128\n        #define BOTAN_HAS_SHA1_SSE2 20160803\n        #define BOTAN_HAS_SHA1_X86_SHA_NI 20170518\n        #define BOTAN_HAS_SHA2_32 20131128\n        #define BOTAN_HAS_SHA2_32_X86 20170518\n        #define BOTAN_HAS_SHA2_64 20131128\n        #define BOTAN_HAS_SHA3 20161018\n        #define BOTAN_HAS_SHACAL2 20170813\n        #define BOTAN_HAS_SHACAL2_SIMD 20170813\n        #define BOTAN_HAS_SHACAL2_X86 20170814\n        #define BOTAN_HAS_SHAKE 20161009\n        #define BOTAN_HAS_SHAKE_CIPHER 20161018\n        #define BOTAN_HAS_SIMD_32 20131128\n        #define BOTAN_HAS_SIPHASH 20150110\n        #define BOTAN_HAS_SKEIN_512 20131128\n        #define BOTAN_HAS_SM2 20170907\n        #define BOTAN_HAS_SM3 20170402\n        #define BOTAN_HAS_SM4 20170716\n        #define BOTAN_HAS_SOCKETS 20171216\n        #define BOTAN_HAS_SP800_108 20160128\n        #define BOTAN_HAS_SP800_56A 20170501\n        #define BOTAN_HAS_SP800_56C 20160211\n        #define BOTAN_HAS_SRP6 20161017\n        #define BOTAN_HAS_STATEFUL_RNG 20160819\n        #define BOTAN_HAS_STREAM_CIPHER 20131128\n        #define BOTAN_HAS_STREEBOG 20170623\n        #define BOTAN_HAS_SYSTEM_RNG 20141202\n        #define BOTAN_HAS_THREAD_UTILS 20180112\n        #define BOTAN_HAS_THREEFISH_512 20131224\n        #define BOTAN_HAS_THREEFISH_512_AVX2 20160903\n        #define BOTAN_HAS_THRESHOLD_SECRET_SHARING 20131128\n        #define BOTAN_HAS_TIGER 20131128\n        #define BOTAN_HAS_TLS 20150319\n        #define BOTAN_HAS_TLS_CBC 20161008\n        #define BOTAN_HAS_TLS_SESSION_MANAGER_SQL_DB 20141219\n        #define BOTAN_HAS_TLS_V10_PRF 20131128\n        #define BOTAN_HAS_TLS_V12_PRF 20131128\n        #define BOTAN_HAS_TOTP 20170519\n        #define BOTAN_HAS_TWOFISH 20131128\n        #define BOTAN_HAS_UTIL_FUNCTIONS 20171003\n        #define BOTAN_HAS_WHIRLPOOL 20131128\n        #define BOTAN_HAS_X509_CERTIFICATES 20151023\n        #define BOTAN_HAS_X942_PRF 20131128\n        #define BOTAN_HAS_XMSS 20161008\n        #define BOTAN_HAS_XTEA 20131128\n    \n    \n        \/*\n        * Local\/misc configuration options (if any) follow\n        *\/\n    \n    \n        \/*\n        * Things you can edit (but probably shouldn't)\n        *\/\n    \n        #if !defined(BOTAN_DEPRECATED_PUBLIC_MEMBER_VARIABLES)\n    \n          #if defined(BOTAN_NO_DEPRECATED)\n             #define BOTAN_DEPRECATED_PUBLIC_MEMBER_VARIABLES private\n          #else\n             #define BOTAN_DEPRECATED_PUBLIC_MEMBER_VARIABLES public\n          #endif\n    \n        #endif\n    \n        \/* How much to allocate for a buffer of no particular size *\/\n        #define BOTAN_DEFAULT_BUFFER_SIZE 1024\n    \n        \/* Minimum and maximum sizes to allocate out of the mlock pool (bytes)\n           Default min is 16 as smaller values are easily bruteforceable and thus\n           likely not cryptographic keys.\n        *\/\n        #define BOTAN_MLOCK_ALLOCATOR_MIN_ALLOCATION 16\n        #define BOTAN_MLOCK_ALLOCATOR_MAX_ALLOCATION 128\n    \n        \/*\n        * Total maximum amount of RAM (in KiB) we will lock into memory, even\n        * if the OS would let us lock more\n        *\/\n        #define BOTAN_MLOCK_ALLOCATOR_MAX_LOCKED_KB 512\n    \n        \/*\n        * If enabled uses memset via volatile function pointer to zero memory,\n        * otherwise does a byte at a time write via a volatile pointer.\n        *\/\n        #define BOTAN_USE_VOLATILE_MEMSET_FOR_ZERO 1\n    \n        \/*\n        * Set number of bits used to generate mask for blinding the\n        * representation of an ECC point. Set to zero to disable this\n        * side-channel countermeasure.\n        *\/\n        #define BOTAN_POINTGFP_RANDOMIZE_BLINDING_BITS 80\n    \n        \/*\n        * Normally blinding is performed by choosing a random starting point (plus\n        * its inverse, of a form appropriate to the algorithm being blinded), and\n        * then choosing new blinding operands by successive squaring of both\n        * values. This is much faster than computing a new starting point but\n        * introduces some possible corelation\n        *\n        * To avoid possible leakage problems in long-running processes, the blinder\n        * periodically reinitializes the sequence. This value specifies how often\n        * a new sequence should be started.\n        *\/\n        #define BOTAN_BLINDING_REINIT_INTERVAL 32\n    \n        \/*\n        * Userspace RNGs like HMAC_DRBG will reseed after a specified number\n        * of outputs are generated. Set to zero to disable automatic reseeding.\n        *\/\n        #define BOTAN_RNG_DEFAULT_RESEED_INTERVAL 1024\n        #define BOTAN_RNG_RESEED_POLL_BITS 256\n        #define BOTAN_RNG_AUTO_RESEED_TIMEOUT std::chrono::milliseconds(10)\n        #define BOTAN_RNG_RESEED_DEFAULT_TIMEOUT std::chrono::milliseconds(50)\n    \n        #define BOTAN_ENTROPY_DEFAULT_SOURCES \\\n           { \\\"rdseed\\\", \\\"rdrand\\\", \\\"darwin_secrandom\\\", \\\"getentropy\\\", \\\n             \\\"dev_random\\\", \\\"system_rng\\\", \\\"proc_walk\\\", \\\"system_stats\\\" }\n    \n        \/* Multiplier on a block cipher's native parallelism *\/\n        #define BOTAN_BLOCK_CIPHER_PAR_MULT 4\n    \n        \/*\n        * These control the RNG used by the system RNG interface\n        *\/\n        #define BOTAN_SYSTEM_RNG_DEVICE \\\"\/dev\/urandom\\\"\n        #define BOTAN_SYSTEM_RNG_CRYPTOAPI_PROV_TYPE PROV_RSA_FULL\n    \n        \/*\n        * These paramaters control how many bytes to read from the system\n        * PRNG, and how long to block if applicable.\n        *\n        * Timeout is ignored on Windows as CryptGenRandom doesn't block\n        *\/\n        #define BOTAN_SYSTEM_RNG_POLL_DEVICES { \\\"\/dev\/urandom\\\", \\\"\/dev\/random\\\", \\\"\/dev\/srandom\\\" }\n    \n        #define BOTAN_ENTROPY_PROC_FS_PATH \\\"\/proc\\\"\n    \n        #define BOTAN_SYSTEM_RNG_POLL_REQUEST 64\n        #define BOTAN_SYSTEM_RNG_POLL_TIMEOUT_MS 20\n    \n    \n        \/*\n        How many times to read from the RDRAND\/RDSEED RNGs.\n        Each read generates 32 bits of output\n        *\/\n        #define BOTAN_ENTROPY_INTEL_RNG_POLLS 32\n    \n        \/\/ According to Intel, RDRAND is guaranteed to generate a random number within 10 retries on a working CPU\n        #define BOTAN_ENTROPY_RDRAND_RETRIES 10\n    \n        \/*\n        * RdSeed is not guaranteed to generate a random number within a specific number of retries\n        * Define the number of retries here\n        *\/\n        #define BOTAN_ENTROPY_RDSEED_RETRIES 20\n    \n        \/*\n        * If no way of dynamically determining the cache line size for the\n        * system exists, this value is used as the default. Used by the side\n        * channel countermeasures rather than for alignment purposes, so it is\n        * better to be on the smaller side if the exact value cannot be\n        * determined. Typically 32 or 64 bytes on modern CPUs.\n        *\/\n        #if !defined(BOTAN_TARGET_CPU_DEFAULT_CACHE_LINE_SIZE)\n          #define BOTAN_TARGET_CPU_DEFAULT_CACHE_LINE_SIZE 32\n        #endif\n    \n        \/**\n        * Controls how AutoSeeded_RNG is instantiated\n        *\/\n        #if !defined(BOTAN_AUTO_RNG_HMAC)\n    \n          #if defined(BOTAN_HAS_SHA2_64)\n            #define BOTAN_AUTO_RNG_HMAC \\\"HMAC(SHA-384)\\\"\n          #elif defined(BOTAN_HAS_SHA2_32)\n            #define BOTAN_AUTO_RNG_HMAC \\\"HMAC(SHA-256)\\\"\n          #elif defined(BOTAN_HAS_SHA3)\n            #define BOTAN_AUTO_RNG_HMAC \\\"HMAC(SHA-3(256))\\\"\n          #elif defined(BOTAN_HAS_SHA1)\n            #define BOTAN_AUTO_RNG_HMAC \\\"HMAC(SHA-1)\\\"\n          #endif\n          \/\/ Otherwise, no hash found: leave BOTAN_AUTO_RNG_HMAC undefined\n    \n        #endif\n    \n        \/\/ Check for a common build problem:\n    \n        #include <botan\/compiler.h>\n    \n        #endif\n    \n    \")\n    \n    file(GLOB_RECURSE headers \"${SDIR}\/*.h\")\n    foreach(h ${headers})\n        get_filename_component(fn ${h} NAME)\n        file(COPY ${h} DESTINATION ${BDIR}\/botan)\n        file(COPY ${h} DESTINATION ${BDIR}\/botan\/internal)\n    endforeach()\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/randombit\/botan",
            "tag": "{v}"
        }
    },
    "version": "2.5.0",
    "hash": "9f09c5e8aaf7a63a9d3931208d52518ede01af9d627831ffe388c776316cf1c0",
    "created": "2018-04-06 22:36:02.073091"
}

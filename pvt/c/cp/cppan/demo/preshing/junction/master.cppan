{
    "project": "pvt.cppan.demo.preshing.junction",
    "cppan": "source:\n    git: https:\/\/github.com\/preshing\/junction\n    branch: master\n\nversion: master\n\ntype: library\n\nstatic_only: true\n\nfiles:\n    -   cmake\/junction_config.h.in\n    -   junction\/.*\n\ndependencies:\n    public:\n        pvt.cppan.demo.preshing.turf:\n            version: master\n            reference: TURF\n\npost_sources: |\n    # Default values, can be overridden by user\n    set(JUNCTION_USERCONFIG \"\" CACHE STRING \"Optional path to additional config file (relative to root CMakeLists.txt)\")\n    set(JUNCTION_WITH_FOLLY FALSE CACHE BOOL \"Use Folly\")\n    set(JUNCTION_WITH_CDS FALSE CACHE BOOL \"Use CDS\")\n    set(JUNCTION_WITH_NBDS FALSE CACHE BOOL \"Use NBDS\")\n    set(JUNCTION_WITH_TBB FALSE CACHE BOOL \"Use TBB\")\n    set(JUNCTION_WITH_TERVEL FALSE CACHE BOOL \"Use Tervel\")\n    set(JUNCTION_TRACK_GRAMPA_STATS FALSE CACHE BOOL \"Enable stats in ConcurrentMap_Grampa\")\n    set(JUNCTION_USE_STRIPING TRUE CACHE BOOL \"Allocate a fixed-size ConditionBank for striped primitives\")\n    \n    # Initialize variables used to collect include dirs\/libraries.\n    set(JUNCTION_INCLUDE_DIRS \"${CMAKE_CURRENT_SOURCE_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\/include\")\n    set(JUNCTION_ALL_INCLUDE_DIRS \"${JUNCTION_INCLUDE_DIRS}\")\n    set(JUNCTION_ALL_LIBRARIES junction)\n    set(JUNCTION_ALL_DLLS \"\")\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}\/cmake\/modules\")\n    \n    # Add turf targets and import its macros since we use them below\n    include(\"${TURF_SDIR}\/cmake\/Macros.cmake\")\n    if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n        # If this is the root project, apply build settings here so that\n        # they're applied to all targets\n        ApplyTurfBuildSettings()\n    endif()\n    list(APPEND JUNCTION_ALL_INCLUDE_DIRS ${TURF_INCLUDE_DIRS})\n    list(APPEND JUNCTION_ALL_LIBRARIES ${TURF_ALL_LIBRARIES})\n    \n    # Optional: Locate Folly and append it to the list of include dirs\/libraries.\n    if(JUNCTION_WITH_FOLLY)\n        find_package(Folly REQUIRED)\n        list(APPEND JUNCTION_ALL_INCLUDE_DIRS ${FOLLY_INCLUDE_DIR})\n        list(APPEND JUNCTION_ALL_LIBRARIES ${FOLLY_LIBRARIES})\n    endif()\n    \n    # Optional: Locate CDS and append it to the list of include dirs\/libraries.\n    if(JUNCTION_WITH_CDS)\n        find_package(CDS REQUIRED)\n        list(APPEND JUNCTION_ALL_INCLUDE_DIRS ${CDS_INCLUDE_DIR})\n        list(APPEND JUNCTION_ALL_LIBRARIES ${CDS_LIBRARY})\n        list(APPEND JUNCTION_ALL_DLLS ${CDS_DLL})\n    endif()\n    \n    # Optional: Locate NBDS and append it to the list of include dirs\/libraries.\n    if(JUNCTION_WITH_NBDS)\n        set(NBDS_USE_TURF_HEAP FALSE CACHE BOOL \"Redirect NBDS's memory allocator to use Turf\")\n        find_package(NBDS REQUIRED)\n        list(APPEND JUNCTION_ALL_INCLUDE_DIRS ${NBDS_INCLUDE_DIRS})\n        # If NBDS_USE_TURF_HEAP=1, then NBDS has dependencies on junction, so add junction to the linker\n        # command line again as needed by the GNU linker.\n        list(APPEND JUNCTION_ALL_LIBRARIES ${NBDS_LIBRARIES} junction)\n    endif()\n    \n    # Optional: Locate Intel TBB and append it to the list of include dirs\/libraries.\n    if(JUNCTION_WITH_TBB)\n        set(TBB_USE_TURF_HEAP FALSE CACHE BOOL \"Redirect TBB's memory allocator to use Turf\")\n        find_package(TBB REQUIRED)\n        list(APPEND JUNCTION_ALL_INCLUDE_DIRS ${TBB_INCLUDE_DIRS})\n        # If TBB_USE_TURF_HEAP=1, then TBB has dependencies on junction, so add junction to the linker\n        # command line again as needed by the GNU linker.\n        list(APPEND JUNCTION_ALL_LIBRARIES ${TBB_LIBRARIES} junction)\n    endif()\n    \n    # Optional: Locate Tervel and append it to the list of include dirs\/libraries.\n    if(JUNCTION_WITH_TERVEL)\n        find_package(Tervel REQUIRED)\n        list(APPEND JUNCTION_ALL_INCLUDE_DIRS ${TERVEL_INCLUDE_DIRS})\n        list(APPEND JUNCTION_ALL_LIBRARIES ${TERVEL_LIBRARIES})\n    endif()\n    \n    # Optional: Locate libcuckoo and append it to the list of include dirs\/libraries.\n    if(JUNCTION_WITH_LIBCUCKOO)\n        find_package(LibCuckoo REQUIRED)\n        list(APPEND JUNCTION_ALL_INCLUDE_DIRS ${LIBCUCKOO_INCLUDE_DIRS})\n    endif()\n    \n    configure_file(${SDIR}\/cmake\/junction_config.h.in ${BDIR}\/junction_config.h)\n    file_write_once(${BDIR}\/junction_userconfig.h \"\")\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/preshing\/junction",
            "branch": "master"
        }
    },
    "version": "master",
    "hash": "63d6372b6b0455519138c5b3843ef3a3828b0e28f87c692cea5fe1422c443001",
    "created": "2017-08-06 12:10:56.106855"
}

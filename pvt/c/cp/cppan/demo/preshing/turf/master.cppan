{
    "project": "pvt.cppan.demo.preshing.turf",
    "cppan": "source:\n    git: https:\/\/github.com\/preshing\/turf\n    branch: master\n\nversion: master\n\ntype: library\n\nc++: 11\n\nstatic_only: true\n\nfiles:\n    -   cmake\/Macros.cmake\n    -   cmake\/turf_config.h.in\n    -   turf\/.*\n\npost_sources: |\n    include(${SDIR}\/cmake\/Macros.cmake)\n    \n    # Default values.\n    # These can be overridden by user, or set to the cache by a parent.\n    set(TURF_USERCONFIG \"\" CACHE STRING \"Optional path to additional config file (relative to root CMakeLists.txt)\")\n    set(TURF_ENABLE_CPP11 TRUE CACHE BOOL \"Enable C++11 compiler support\")\n    set(TURF_PREFER_CPP11 FALSE CACHE BOOL \"Prefer C++11 atomics, threads, etc. over native implementations\")\n    set(TURF_WITH_BOOST FALSE CACHE BOOL \"Use Boost\")\n    if(TURF_WITH_BOOST)\n        set(TURF_PREFER_BOOST FALSE CACHE BOOL \"Prefer Boost atomics, threads, etc. over native implementations\")\n    endif()\n    if(TURF_PREFER_BOOST AND NOT TURF_WITH_BOOST)\n        message(FATAL_ERROR \"TURF_PREFER_BOOST requires TURF_WITH_BOOST\")\n    endif()\n    set(TURF_WITH_EXCEPTIONS FALSE CACHE BOOL \"Enable compiler support for C++ exceptions\")\n    if(MSVC)\n        set(TURF_WITH_SECURE_COMPILER FALSE CACHE BOOL \"Enable compiler-generated security checks\")\n    endif()\n    set(TURF_REPLACE_OPERATOR_NEW TRUE CACHE BOOL \"Replace global operator new and delete to use the default Turf heap\")\n    set(TURF_USE_DLMALLOC FALSE CACHE BOOL \"Use DLMalloc as the default heap\")\n    if(TURF_USE_DLMALLOC)\n        set(TURF_DLMALLOC_DEBUG_CHECKS FALSE CACHE BOOL \"Enable debug checks in DLMalloc\")\n        set(TURF_DLMALLOC_FAST_STATS FALSE CACHE BOOL \"Enable fast inUseBytes tracking in DLMalloc\")\n    endif()\n    \n    # Compile checks.\n    SimpleCompileCheck(TURF_HAS_STDINT \"Checking for <stdint.h>\"\n        \"#include <stdint.h>\")\n    SimpleCompileCheck(TURF_HAS_NOEXCEPT \"Checking for noexcept keyword\"\n        \"void foo() noexcept {};\")\n    SimpleCompileCheck(TURF_HAS_CONSTEXPR \"Checking for constexpr keyword\"\n        \"static constexpr const char* foo = \\\"foo\\\";\")\n    SimpleCompileCheck(TURF_HAS_OVERRIDE \"Checking for override keyword\"\n        \"struct Base { virtual void foo() {} };\n         struct Derived : Base { virtual void foo() override {} };\")\n    set(TURF_HAS_LONG_LONG 1)\n    SimpleCompileCheck(TURF_HAS_STATIC_ASSERT \"Checking for static_assert\"\n        \"static_assert(true);\")\n    SimpleCompileCheck(TURF_HAS_MOVE \"Checking for std::move\"\n        \"#include <utility>\n         void foo(int& a, int& b) { a = std::move(b); }\")\n    \n    # Initialize variables used to collect include dirs\/libraries.\n    set(TURF_INCLUDE_DIRS \"${CMAKE_CURRENT_SOURCE_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\/include\")\n    set(TURF_ALL_INCLUDE_DIRS ${TURF_INCLUDE_DIRS})\n    set(TURF_ALL_LIBRARIES turf)\n    set(TURF_ALL_LIBRARY_DIRS \"\")\n    \n    # Optional: Locate Boost and append it to the list of include dirs\/libraries.\n    if(TURF_WITH_BOOST)\n        add_definitions(-DBOOST_ALL_NO_LIB)\n        find_package(Boost REQUIRED system chrono thread atomic)\n        list(APPEND TURF_ALL_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})\n        list(APPEND TURF_ALL_LIBRARIES ${Boost_LIBRARIES})\n        list(APPEND TURF_ALL_LIBRARY_DIRS ${Boost_LIBRARY_DIRS})\n    \n        MESSAGE( STATUS \"Boost_LIBRARIES: \" ${Boost_LIBRARIES} )\n    endif()\n    \n    \n    configure_file(${SDIR}\/cmake\/turf_config.h.in ${BDIR}\/turf_config.h)\n    file_write_once(${BDIR}\/turf_userconfig.h \"\")\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/preshing\/turf",
            "branch": "master"
        }
    },
    "version": "master",
    "hash": "3896fd68cc9a79e51e46f2b17605fb4c4aecdda24e406e4bd84af31f61b68e75",
    "created": "2017-08-21 18:35:11.761639"
}

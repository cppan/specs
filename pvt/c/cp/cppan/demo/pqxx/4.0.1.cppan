{
    "project": "pvt.cppan.demo.pqxx",
    "cppan": "source:\n    remote: http:\/\/pqxx.org\/download\/software\/libpqxx\/libpqxx-4.0.1.tar.gz\n\nversion: 4.0.1\n\nc++: 11\n\nfiles:\n    -   include\/pqxx\/.*\n    -   src\/.*\\.cxx\n\noptions:\n    any:\n        definitions:\n            public:\n                -   HAVE_PQEXEC\n                -   PQXX_HAVE_PQUNESCAPEBYTEA_9\n                -   PQXX_HAVE_PQENCRYPTPASSWORD\n                -   PQXX_HAVE_PQESCAPEIDENTIFIER\n                -   PQXX_HAVE_PQCANCEL\n                -   PQXX_HAVE_PQCLIENTENCODING\n                -   PQXX_HAVE_PQDESCRIBEPORTAL\n                -   PQXX_HAVE_QUIET_NAN\n                -   PQXX_HAVE_REVERSE_ITERATOR\n                -   PQXX_HAVE_PQESCAPELITERAL\n                -   PQXX_HAVE_PQISTHREADSAFE\n                -   PQXX_HAVE_PQMBLEN\n                -   PGSTD=std\n                -   PQXXTR1=std\n    shared:\n        definitions:\n            public:\n                -   PQXX_LIBEXPORT=${LIBRARY_API}\n\ndependencies:\n    pvt.cppan.demo.cmake.postgresql: master\n\npost_sources: |\n    file_write_once(${BDIR}\/pqxx\/config-public-compiler.h \"\")\n    file_write_once(${BDIR}\/pqxx\/config-internal-libpq.h \"\")\n    file_write_once(${BDIR}\/pqxx\/config-internal-compiler.h \"\")\n    \n    if (NOT EXISTS ${SDIR}\/lo.fix)\n        file(READ ${SDIR}\/src\/largeobject.cxx f)\n        string(REPLACE \"#include <cerrno>\" \"#include <algorithm>\\n#include <cerrno>\" f \"${f}\")\n        file(WRITE ${SDIR}\/src\/largeobject.cxx \"${f}\")\n        file_write_once(${SDIR}\/lo.fix \"\")\n    endif()\n    \n\ncheck_include_exists:\n    -   cpp: false\n        variable: HAVE_STDLIB_H\n        file: stdlib.h\n    -   cpp: true\n        file: boost\/smart_ptr.hpp\n        variable: PQXX_HAVE_BOOST_SMART_PTR\n    -   cpp: true\n        variable: PQXX_HAVE_IOS\n        file: ios\n    -   cpp: true\n        variable: PQXX_HAVE_LIMITS\n        file: limits\n    -   variable: PQXX_HAVE_LOCALE\n        file: locale\n        cpp: true\n    -   file: streambuf\n        cpp: true\n        variable: PQXX_HAVE_STREAMBUF\n\ncheck_c_source_compiles:\n    STDC_HEADERS:\n        invert: false\n        text: \"\\n#include <stdlib.h>\\n#include <stdarg.h>\\n#include <string.h>\\n#include <float.h>\\nint main() {return 0;}\\n\"\n\ncheck_cxx_source_compiles:\n    PQXX_HAVE_LONG_LONG:\n        invert: false\n        text: \"\\n\\n int main() { \\n\\nlong long l=0LL; return int(l)\\n\\n ; return 0; }\"\n    PQXX_HAVE_STRING_CLEAR:\n        text: \"#include <string>\\n\\tusing namespace std;\\n\\n int main() { \\n\\nstring i;i.clear()\\n\\n ; return 0; }\"\n        invert: false\n    PQXX_HAVE_CHAR_TRAITS:\n        invert: false\n        text: \"#include <string>\\n\\tusing namespace std;\\n\\n int main() { \\n\\nchar_traits<char>::eof()\\n\\n ; return 0; }\"\n    PQXX_HAVE_COUNT_IF:\n        invert: false\n        text: \"#include <algorithm>\\n#include <functional>\\nusing namespace std;\\nstruct P{P(){}bool operator()(const int&)const{return false;}}p;\\n\\n int main() { \\n\\nint v;return int(count_if(&v,&v,p))\\n\\n ; return 0; }\"\n    PQXX_HAVE_C_ISNAN:\n        text: \"#include <cmath>\\n\\textern double f();\\n\\tusing namespace std;\\n\\n int main() { \\n\\nif(isnan(f()))f()\\n\\n ; return 0; }\"\n        invert: false\n    PQXX_HAVE_GCC_DEPRECATED:\n        invert: false\n        text: \"void __attribute__ ((deprecated)) f();\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n    PQXX_HAVE_LONG_DOUBLE:\n        invert: false\n        text: \"\\n\\n int main() { \\n\\nlong double x=0;return int(x)\\n\\n ; return 0; }\"\n    PQXX_HAVE_GCC_CONST:\n        text: \"void __attribute__ ((const)) f();\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n        invert: false\n    PQXX_HAVE_CPP_PRAGMA_MESSAGE:\n        invert: false\n        text: \"#pragma message(\\\"cpp supports message pragma\\\")\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n    PQXX_HAVE_AUTO_PTR:\n        text: \"\\n\\t#include <memory>\\n\\tusing namespace std;\\n        int *get_ptr();\\n\\n int main() { \\n\\nauto_ptr<int> i(get_ptr())\\n\\n ; return 0; }\"\n        invert: false\n    PQXX_HAVE_CPP_WARNING:\n        invert: false\n        text: \"#warning cpp supports warning directive\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n    PQXX_HAVE_C_NAN:\n        invert: false\n        text: \"#include <cmath>\\n\\textern void f(double);\\n\\tusing namespace std;\\n\\n int main() { \\n\\nf(NAN)\\n\\n ; return 0; }\"\n    PQXX_HAVE_C_ISINF:\n        invert: false\n        text: \"#include <cmath>\\n\\textern double f();\\n\\tusing namespace std;\\n\\n int main() { \\n\\nif(isinf(f()))f()\\n\\n ; return 0; }\"\n    PQXX_HAVE_STRERROR_R:\n        text: \"#include <cstring>\\n\\tusing namespace std;\\n\\tbool f(char x[]) { return strerror_r(0,x,10) != 0; }\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n        invert: false\n    PQXX_HAVE_GCC_PURE:\n        text: \"void __attribute__ ((pure)) f();\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n        invert: false\n    PQXX_HAVE_GCC_NORETURN:\n        invert: false\n        text: \"\\n\\tvoid __attribute__ ((noreturn)) f() throw (int);\\n        void f()throw(int){throw 1;}\\n\\t\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n    PQXX_HAVE_GCC_VISIBILITY:\n        invert: false\n        text: \"\\nstruct __attribute__ ((visibility(\\\"hidden\\\"))) d { d() {} void f() {} };\\n\\t\\n\\n int main() { \\n\\nd D;D.f()\\n\\n ; return 0; }\"\n    PQXX_HAVE_DISTANCE:\n        invert: false\n        text: \"#include <iterator>\\n\\tusing namespace std;\\n\\n int main() { \\n\\nint i[1]; return distance(i, i+1)\\n\\n ; return 0; }\"\n    PQXX_HAVE_LO_TELL:\n        invert: false\n        text: \"#include<libpq-fe.h>\\n\\tvoid f(PGconn *c) { lo_tell(c,2); }\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n    PQXX_HAVE_SHARED_PTR:\n        text: \"#include <memory>\\n\\n int main() { \\n\\nstd::shared_ptr<int> i(new int(1)); return *i;\\n\\n ; return 0; }\"\n        invert: false\n    PQXX_HAVE_MOVE:\n        invert: false\n        text: \"\\n\\t#include <utility>\\n\\tusing namespace std;\\n\\tint foo(int &i) { return move(i); }\\n\\n int main() { \\n\\nint i = 0; return foo(i);\\n\\n ; return 0; }\"\n    PQXX_TR1_HEADERS:\n        text: \"#include <tr1\/memory>\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n        invert: false\n    PQXX_HAVE_STRERROR_R_GNU:\n        invert: false\n        text: \"#include <cstring>\\n\\tusing namespace std;\\n\\tconst char *it_is_a_string(char *x) { return strerror_r(0,x,10); }\\n\\n int main() { \\n\\n\\n\\n ; return 0; }\"\n    PQXX_HAVE_STRNLEN:\n        invert: false\n        text: \"#include <cstring>\\n\\tusing namespace std;\\n\\n int main() { \\n\\nreturn strnlen(\\\"\\\",1)\\n\\n ; return 0; }\"\n    PQXX_HAVE_NAN:\n        invert: false\n        text: \"#include <cmath>\\n\\tusing namespace std;\\n\\textern void f(double);\\n\\n int main() { \\n\\nf(nan(\\\"\\\"))\\n\\n ; return 0; }\"\n    PQXX_HAVE_SYS_SELECT_H:\n        invert: false\n        text: \"#include <cstring>\\n#include <sys\/select.h>\\nusing namespace std;\\n\\n int main() { \\n\\nselect(0,0,0,0,0)\\n\\n ; return 0; }\"\n    PQXX_HAVE_IMBUE:\n        invert: false\n        text: \"#include <sstream>\\n\\t#ifdef PQXX_HAVE_LOCALE\\n\\t#include <locale>\\n\\t#endif\\n\\tusing namespace std;\\n\\n int main() { \\n\\nstringstream S; S.imbue(locale(\\\"C\\\"))\\n\\n ; return 0; }\"\n    PQXX_HAVE_SLEEP:\n        text: \"#ifdef HAVE_UNISTD_H\\n#include <unistd.h>\\n#endif\\n\\tusing namespace std;\\n\\n int main() { \\n\\nsleep(0x01)\\n\\n ; return 0; }\"\n        invert: false\n    PQXX_HAVE_POLL:\n        invert: false\n        text: \"#include <poll.h>\\nusing namespace std;\\n\\n int main() { \\n\\npollfd p = { 0,0,0 }; poll(&p,1,0)\\n\\n ; return 0; }\"\n    PQXX_HAVE_STRLCPY:\n        invert: false\n        text: \"#include <cstring>\\n\\tusing namespace std;\\n\\n int main() { \\n\\nchar buf[2];return strlcpy(buf,\\\"\\\",1)\\n\\n ; return 0; }\"\n    PQXX_HAVE_UNIQUE_PTR:\n        invert: false\n        text: \"\\n\\t#include <memory>\\n\\tusing namespace std;\\n\\tint *get_ptr();\\n\\n int main() { \\n\\nunique_ptr<int> i(get_ptr())\\n\\n ; return 0; }\"\n\ncheck_cxx_source_runs:\n    PQXX_SELECT_ACCEPTS_NULL:\n        text: \"#ifdef PQXX_HAVE_SYS_SELECT_H\\n#include <sys\/select.h>\\n#else\\n#include <ctime>\\n#include <sys\/types.h>\\n#endif\\n#ifdef HAVE_UNISTD_H\\n#include <unistd.h>\\n#endif\\n#ifdef _WIN32\\n#include <winsock2.h>\\n#endif\\nusing namespace std;\\nextern \\\"C\\\" int foo(){fd_set f; FD_SET(1,&f); return select(2,0,&f,&f,0)<0;}\\nint main() { return foo(); }\"\n        invert: false\n\n",
    "version": "4.0.1",
    "source": {
        "remote": {
            "url": "http:\/\/pqxx.org\/download\/software\/libpqxx\/libpqxx-4.0.1.tar.gz"
        }
    },
    "sha256": "9c5c3e5ef9f5b31297307bea8bcc715706eb22ed07aba742c85ac514cacfd706",
    "created": "2016-10-14 14:33:25.696044"
}

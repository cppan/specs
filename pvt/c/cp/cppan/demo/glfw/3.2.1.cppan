{
    "project": "pvt.cppan.demo.glfw",
    "cppan": "source:\n  git: https:\/\/github.com\/glfw\/glfw\n  tag: 3.2.1\ntype: library\nfiles:\n  - deps\/glad\/.*\n  - deps\/KHR\/.*\n  - deps\/[^\/]*\\.h\n  - deps\/[^\/]*\\.c\n  - include\/.*\n  - src\/.*\\.m\n  - src\/.*\\.c\n  - src\/.*\\.h\n  - src\/.*\\.h.in\ninclude_directories:\n  public:\n    - include\n    - deps\n  private: src\ndependencies:\n  pvt.cppan.demo.khronos.vulkan: 1\noptions:\n  any:\n    definitions:\n      public:\n        - GLAPI=${LIBRARY_API}\n      private:\n        - _GLFW_USE_CONFIG_H\n  shared:\n    definitions:\n      private:\n        - _GLFW_BUILD_DLL\n      interface:\n        - GLFW_DLL\npost_sources: \"set(GLFW_VERSION_MAJOR ${PACKAGE_VERSION_MAJOR})\\nset(GLFW_VERSION_MINOR ${PACKAGE_VERSION_MINOR})\\nset(GLFW_VERSION_PATCH ${PACKAGE_VERSION_PATCH})\\n\\nset(CMAKE_LEGACY_CYGWIN_WIN32 OFF)\\n\\nset(GLFW_VERSION_EXTRA \\\"\\\")\\nset(GLFW_VERSION \\\"${GLFW_VERSION_MAJOR}.${GLFW_VERSION_MINOR}\\\")\\nset(GLFW_VERSION_FULL \\\"${GLFW_VERSION}.${GLFW_VERSION_PATCH}${GLFW_VERSION_EXTRA}\\\")\\n\\nif (UNIX)\\n    option(GLFW_USE_OSMESA \\\"Use OSMesa for offscreen context creation\\\" OFF)\\nendif()\\n\\nif (WIN32)\\n    option(GLFW_USE_HYBRID_HPG \\\"Force use of high-performance GPU on hybrid systems\\\" OFF)\\nendif()\\n\\nif (APPLE)\\n    option(GLFW_USE_CHDIR \\\"Make glfwInit chdir to Contents\/Resources\\\" ON)\\n    option(GLFW_USE_MENUBAR \\\"Populate the menu bar on first window creation\\\" ON)\\n    option(GLFW_USE_RETINA \\\"Use the full resolution of Retina displays\\\" ON)\\nendif()\\n\\nif (UNIX AND NOT APPLE)\\n    option(GLFW_USE_WAYLAND \\\"Use Wayland for window creation\\\" OFF)\\n    option(GLFW_USE_MIR     \\\"Use Mir for window creation\\\" OFF)\\nendif()\\n\\nif (MSVC)\\n    option(USE_MSVC_RUNTIME_LIBRARY_DLL \\\"Use MSVC runtime library DLL\\\" ON)\\nendif()\\n\\nif (GLFW_VULKAN_STATIC)\\n    set(_GLFW_VULKAN_STATIC 1)\\nendif()\\n\\nlist(APPEND CMAKE_MODULE_PATH \\\"${GLFW_SOURCE_DIR}\/CMake\/modules\\\")\\n\\nfind_package(Threads REQUIRED)\\n#find_package(Vulkan)\\n\\nif (GLFW_BUILD_DOCS)\\n    set(DOXYGEN_SKIP_DOT TRUE)\\n    find_package(Doxygen)\\nendif()\\n\\n\\nif (MINGW)\\n    # Workaround for legacy MinGW not providing XInput and DirectInput\\n    include(CheckIncludeFile)\\n\\n    check_include_file(dinput.h DINPUT_H_FOUND)\\n    check_include_file(xinput.h XINPUT_H_FOUND)\\n    if (NOT DINPUT_H_FOUND OR NOT XINPUT_H_FOUND)\\n        list(APPEND glfw_INCLUDE_DIRS \\\"${GLFW_SOURCE_DIR}\/deps\/mingw\\\")\\n    endif()\\n\\n    # Enable link-time exploit mitigation features enabled by default on MSVC\\n    include(CheckCCompilerFlag)\\n\\n    # Compatibility with data execution prevention (DEP)\\n    set(CMAKE_REQUIRED_FLAGS \\\"-Wl,--nxcompat\\\")\\n    check_c_compiler_flag(\\\"\\\" _GLFW_HAS_DEP)\\n    if (_GLFW_HAS_DEP)\\n        set(CMAKE_SHARED_LINKER_FLAGS \\\"-Wl,--nxcompat ${CMAKE_SHARED_LINKER_FLAGS}\\\")\\n    endif()\\n\\n    # Compatibility with address space layout randomization (ASLR)\\n    set(CMAKE_REQUIRED_FLAGS \\\"-Wl,--dynamicbase\\\")\\n    check_c_compiler_flag(\\\"\\\" _GLFW_HAS_ASLR)\\n    if (_GLFW_HAS_ASLR)\\n        set(CMAKE_SHARED_LINKER_FLAGS \\\"-Wl,--dynamicbase ${CMAKE_SHARED_LINKER_FLAGS}\\\")\\n    endif()\\n\\n    # Compatibility with 64-bit address space layout randomization (ASLR)\\n    set(CMAKE_REQUIRED_FLAGS \\\"-Wl,--high-entropy-va\\\")\\n    check_c_compiler_flag(\\\"\\\" _GLFW_HAS_64ASLR)\\n    if (_GLFW_HAS_64ASLR)\\n        set(CMAKE_SHARED_LINKER_FLAGS \\\"-Wl,--high-entropy-va ${CMAKE_SHARED_LINKER_FLAGS}\\\")\\n    endif()\\nendif()\\n\\nif (APPLE)\\n    # Dependencies required by the MoltenVK static library\\n    set(GLFW_VULKAN_DEPS\\n        \\\"-lc++\\\"\\n        \\\"-framework Cocoa\\\"\\n        \\\"-framework Metal\\\"\\n        \\\"-framework QuartzCore\\\")\\nendif()\\n\\n#--------------------------------------------------------------------\\n# Detect and select backend APIs\\n#--------------------------------------------------------------------\\nif (GLFW_USE_WAYLAND)\\n    set(_GLFW_WAYLAND 1)\\n    message(STATUS \\\"Using Wayland for window creation\\\")\\nelseif (GLFW_USE_MIR)\\n    set(_GLFW_MIR 1)\\n    message(STATUS \\\"Using Mir for window creation\\\")\\nelseif (GLFW_USE_OSMESA)\\n    set(_GLFW_OSMESA 1)\\n    message(STATUS \\\"Using OSMesa for headless context creation\\\")\\nelseif (WIN32)\\n    set(_GLFW_WIN32 1)\\n    message(STATUS \\\"Using Win32 for window creation\\\")\\nelseif (APPLE)\\n    set(_GLFW_COCOA 1)\\n    message(STATUS \\\"Using Cocoa for window creation\\\")\\nelseif (UNIX)\\n    set(_GLFW_X11 1)\\n    message(STATUS \\\"Using X11 for window creation\\\")\\nelse()\\n    message(FATAL_ERROR \\\"No supported platform was detected\\\")\\nendif()\\n\\n\\n#--------------------------------------------------------------------\\n# Find and add Unix math and time libraries\\n#--------------------------------------------------------------------\\nif (UNIX AND NOT APPLE)\\n    find_library(RT_LIBRARY rt)\\n    mark_as_advanced(RT_LIBRARY)\\n    if (RT_LIBRARY)\\n        list(APPEND glfw_LIBRARIES \\\"${RT_LIBRARY}\\\")\\n    endif()\\n\\n    find_library(MATH_LIBRARY m)\\n    mark_as_advanced(MATH_LIBRARY)\\n    if (MATH_LIBRARY)\\n        list(APPEND glfw_LIBRARIES \\\"${MATH_LIBRARY}\\\")\\n    endif()\\n\\n    if (CMAKE_DL_LIBS)\\n        list(APPEND glfw_LIBRARIES \\\"${CMAKE_DL_LIBS}\\\")\\n    endif()\\nendif()\\n\\n#--------------------------------------------------------------------\\n# Use Win32 for window creation\\n#--------------------------------------------------------------------\\nif (_GLFW_WIN32)\\n    if (GLFW_USE_HYBRID_HPG)\\n        set(_GLFW_USE_HYBRID_HPG 1)\\n    endif()\\nendif()\\n\\n#--------------------------------------------------------------------\\n# Use X11 for window creation\\n#--------------------------------------------------------------------\\nif (_GLFW_X11)\\n\\n    find_package(X11 REQUIRED)\\n\\n    # Set up library and include paths\\n    list(APPEND glfw_INCLUDE_DIRS \\\"${X11_X11_INCLUDE_PATH}\\\")\\n    list(APPEND glfw_LIBRARIES \\\"${X11_X11_LIB}\\\" \\\"${CMAKE_THREAD_LIBS_INIT}\\\")\\n\\n    # Check for XRandR (modern resolution switching and gamma control)\\n    if (NOT X11_Xrandr_FOUND)\\n        message(FATAL_ERROR \\\"The RandR library and headers were not found\\\")\\n    endif()\\n\\n    list(APPEND glfw_INCLUDE_DIRS \\\"${X11_Xrandr_INCLUDE_PATH}\\\")\\n    list(APPEND glfw_LIBRARIES \\\"${X11_Xrandr_LIB}\\\")\\n\\n    # Check for Xinerama (legacy multi-monitor support)\\n    if (NOT X11_Xinerama_FOUND)\\n        message(FATAL_ERROR \\\"The Xinerama library and headers were not found\\\")\\n    endif()\\n\\n    list(APPEND glfw_INCLUDE_DIRS \\\"${X11_Xinerama_INCLUDE_PATH}\\\")\\n    list(APPEND glfw_LIBRARIES \\\"${X11_Xinerama_LIB}\\\")\\n\\n    # Check for Xf86VidMode (fallback gamma control)\\n    if (X11_xf86vmode_FOUND)\\n        list(APPEND glfw_INCLUDE_DIRS \\\"${X11_xf86vmode_INCLUDE_PATH}\\\")\\n\\n        if (X11_Xxf86vm_LIB)\\n            list(APPEND glfw_LIBRARIES \\\"${X11_Xxf86vm_LIB}\\\")\\n        else()\\n            # Backwards compatibility (see CMake bug 0006976)\\n            list(APPEND glfw_LIBRARIES Xxf86vm)\\n        endif()\\n\\n        set(_GLFW_HAS_XF86VM TRUE)\\n    endif()\\n\\n    # Check for Xkb (X keyboard extension)\\n    if (NOT X11_Xkb_FOUND)\\n        message(FATAL_ERROR \\\"The X keyboard extension headers were not found\\\")\\n    endif()\\n\\n    list(APPEND glfw_INCLUDE_DIR \\\"${X11_Xkb_INCLUDE_PATH}\\\")\\n\\n    # Check for Xcursor\\n    if (NOT X11_Xcursor_FOUND)\\n        message(FATAL_ERROR \\\"The Xcursor libraries and headers were not found\\\")\\n    endif()\\n\\n    list(APPEND glfw_INCLUDE_DIR \\\"${X11_Xcursor_INCLUDE_PATH}\\\")\\n    list(APPEND glfw_LIBRARIES \\\"${X11_Xcursor_LIB}\\\")\\n\\nendif()\\n\\n#--------------------------------------------------------------------\\n# Use Wayland for window creation\\n#--------------------------------------------------------------------\\nif (_GLFW_WAYLAND)\\n    find_package(ECM REQUIRED NO_MODULE)\\n    list(APPEND CMAKE_MODULE_PATH ${ECM_MODULE_PATH})\\n\\n    find_package(Wayland REQUIRED)\\n    find_package(WaylandScanner REQUIRED)\\n    find_package(WaylandProtocols 1.1 REQUIRED)\\n\\n    list(APPEND glfw_INCLUDE_DIRS \\\"${Wayland_INCLUDE_DIR}\\\")\\n    list(APPEND glfw_LIBRARIES \\\"${Wayland_LIBRARIES}\\\" \\\"${CMAKE_THREAD_LIBS_INIT}\\\")\\n\\n    find_package(XKBCommon REQUIRED)\\n    list(APPEND glfw_INCLUDE_DIRS \\\"${XKBCOMMON_INCLUDE_DIRS}\\\")\\n    list(APPEND glfw_LIBRARIES \\\"${XKBCOMMON_LIBRARY}\\\")\\nendif()\\n\\n#--------------------------------------------------------------------\\n# Use Mir for window creation\\n#--------------------------------------------------------------------\\nif (_GLFW_MIR)\\n    find_package(Mir REQUIRED)\\n\\n    list(APPEND glfw_INCLUDE_DIRS \\\"${MIR_INCLUDE_DIR}\\\")\\n    list(APPEND glfw_LIBRARIES \\\"${MIR_LIBRARIES}\\\" \\\"${CMAKE_THREAD_LIBS_INIT}\\\")\\n\\n    find_package(XKBCommon REQUIRED)\\n    list(APPEND glfw_INCLUDE_DIRS \\\"${XKBCOMMON_INCLUDE_DIRS}\\\")\\n    list(APPEND glfw_LIBRARIES \\\"${XKBCOMMON_LIBRARY}\\\")\\nendif()\\n\\n#--------------------------------------------------------------------\\n# Use OSMesa for offscreen context creation\\n#--------------------------------------------------------------------\\nif (_GLFW_OSMESA)\\n    find_package(OSMesa REQUIRED)\\n    list(APPEND glfw_LIBRARIES \\\"${CMAKE_THREAD_LIBS_INIT}\\\")\\nendif()\\n\\n#--------------------------------------------------------------------\\n# Use Cocoa for window creation and NSOpenGL for context creation\\n#--------------------------------------------------------------------\\nif (_GLFW_COCOA)\\n\\n    if (GLFW_USE_MENUBAR)\\n        set(_GLFW_USE_MENUBAR 1)\\n    endif()\\n\\n    if (GLFW_USE_CHDIR)\\n        set(_GLFW_USE_CHDIR 1)\\n    endif()\\n\\n    if (GLFW_USE_RETINA)\\n        set(_GLFW_USE_RETINA 1)\\n    endif()\\n\\n    list(APPEND glfw_LIBRARIES\\n        \\\"-framework Cocoa\\\"\\n        \\\"-framework IOKit\\\"\\n        \\\"-framework CoreFoundation\\\"\\n        \\\"-framework CoreVideo\\\")\\nendif()\\n\\n\\n\\n\\n\\n\\nset(common_HEADERS ${SDIR}\/src\/internal.h\\n               \\\"${BDIR}\/glfw_config.h\\\"\\n               \\\"${SDIR}\/include\/GLFW\/glfw3.h\\\"\\n               \\\"${SDIR}\/include\/GLFW\/glfw3native.h\\\")\\nset(common_SOURCES ${SDIR}\/src\/context.c ${SDIR}\/src\/init.c ${SDIR}\/src\/input.c ${SDIR}\/src\/monitor.c ${SDIR}\/src\/vulkan.c ${SDIR}\/src\/window.c)\\n\\nif (_GLFW_COCOA)\\n    set(glfw_HEADERS ${common_HEADERS} ${SDIR}\/src\/cocoa_platform.h ${SDIR}\/src\/cocoa_joystick.h\\n                     ${SDIR}\/src\/posix_tls.h ${SDIR}\/src\/nsgl_context.h)\\n    set(glfw_SOURCES ${common_SOURCES} ${SDIR}\/src\/cocoa_init.m ${SDIR}\/src\/cocoa_joystick.m\\n                     ${SDIR}\/src\/cocoa_monitor.m ${SDIR}\/src\/cocoa_window.m ${SDIR}\/src\/cocoa_time.c ${SDIR}\/src\/posix_tls.c\\n                     ${SDIR}\/src\/nsgl_context.m)\\nelseif (_GLFW_WIN32)\\n    set(glfw_HEADERS ${common_HEADERS} ${SDIR}\/src\/win32_platform.h ${SDIR}\/src\/win32_joystick.h\\n                     ${SDIR}\/src\/wgl_context.h ${SDIR}\/src\/egl_context.h)\\n    set(glfw_SOURCES ${common_SOURCES} ${SDIR}\/src\/win32_init.c ${SDIR}\/src\/win32_joystick.c\\n                     ${SDIR}\/src\/win32_monitor.c ${SDIR}\/src\/win32_time.c ${SDIR}\/src\/win32_tls.c ${SDIR}\/src\/win32_window.c\\n                     ${SDIR}\/src\/wgl_context.c ${SDIR}\/src\/egl_context.c)\\nelseif (_GLFW_X11)\\n    set(glfw_HEADERS ${common_HEADERS} ${SDIR}\/src\/x11_platform.h ${SDIR}\/src\/xkb_unicode.h\\n                     ${SDIR}\/src\/linux_joystick.h ${SDIR}\/src\/posix_time.h ${SDIR}\/src\/posix_tls.h ${SDIR}\/src\/glx_context.h\\n                     ${SDIR}\/src\/egl_context.h)\\n    set(glfw_SOURCES ${common_SOURCES} ${SDIR}\/src\/x11_init.c ${SDIR}\/src\/x11_monitor.c ${SDIR}\/src\/x11_window.c\\n                     ${SDIR}\/src\/xkb_unicode.c ${SDIR}\/src\/linux_joystick.c ${SDIR}\/src\/posix_time.c ${SDIR}\/src\/posix_tls.c\\n                     ${SDIR}\/src\/glx_context.c ${SDIR}\/src\/egl_context.c)\\nelseif (_GLFW_WAYLAND)\\n    set(glfw_HEADERS ${common_HEADERS} ${SDIR}\/src\/wl_platform.h ${SDIR}\/src\/linux_joystick.h\\n                     ${SDIR}\/src\/posix_time.h ${SDIR}\/src\/posix_tls.h ${SDIR}\/src\/xkb_unicode.h ${SDIR}\/src\/egl_context.h)\\n    set(glfw_SOURCES ${common_SOURCES} ${SDIR}\/src\/wl_init.c ${SDIR}\/src\/wl_monitor.c ${SDIR}\/src\/wl_window.c\\n                     ${SDIR}\/src\/linux_joystick.c ${SDIR}\/src\/posix_time.c ${SDIR}\/src\/posix_tls.c ${SDIR}\/src\/xkb_unicode.c\\n                     ${SDIR}\/src\/egl_context.c)\\n\\n    ecm_add_wayland_client_protocol(glfw_SOURCES\\n        PROTOCOL\\n        ${WAYLAND_PROTOCOLS_PKGDATADIR}\/unstable\/relative-pointer\/relative-pointer-unstable-v1.xml\\n        BASENAME relative-pointer-unstable-v1)\\n    ecm_add_wayland_client_protocol(glfw_SOURCES\\n        PROTOCOL\\n        ${WAYLAND_PROTOCOLS_PKGDATADIR}\/unstable\/pointer-constraints\/pointer-constraints-unstable-v1.xml\\n        BASENAME pointer-constraints-unstable-v1)\\nelseif (_GLFW_MIR)\\n    set(glfw_HEADERS ${common_HEADERS} ${SDIR}\/src\/mir_platform.h ${SDIR}\/src\/linux_joystick.h\\n                     ${SDIR}\/src\/posix_time.h ${SDIR}\/src\/posix_tls.h ${SDIR}\/src\/xkb_unicode.h ${SDIR}\/src\/egl_context.h)\\n    set(glfw_SOURCES ${common_SOURCES} ${SDIR}\/src\/mir_init.c ${SDIR}\/src\/mir_monitor.c ${SDIR}\/src\/mir_window.c\\n                     ${SDIR}\/src\/linux_joystick.c ${SDIR}\/src\/posix_time.c ${SDIR}\/src\/posix_tls.c ${SDIR}\/src\/xkb_unicode.c\\n                     ${SDIR}\/src\/egl_context.c)\\nelseif (_GLFW_OSMESA)\\n    set(glfw_HEADERS ${common_HEADERS} ${SDIR}\/src\/osmesa_platform.h\\n                     ${SDIR}\/src\/posix_time.h ${SDIR}\/src\/posix_tls.h ${SDIR}\/src\/osmesa_context.h)\\n    set(glfw_SOURCES ${common_SOURCES} ${SDIR}\/src\/osmesa_init.c ${SDIR}\/src\/osmesa_monitor.c\\n                     ${SDIR}\/src\/osmesa_window.c ${SDIR}\/src\/posix_time.c ${SDIR}\/src\/posix_tls.c\\n                     ${SDIR}\/src\/osmesa_context.c)\\nendif()\\n\\nif (APPLE)\\n    # For some reason, CMake doesn't know about .m\\n    #set_source_files_properties(${glfw_SOURCES} PROPERTIES LANGUAGE C)\\nendif()\\n\\n\\n\\n\\n\\n\\n\\nconfigure_file(${SDIR}\/src\/glfw_config.h.in ${BDIR}\/glfw_config.h @ONLY)\\n\\nset(src ${glfw_SOURCES} ${glfw_HEADERS}\\n    ${SDIR}\/deps\/glad.c\\n    ${SDIR}\/deps\/getopt.c\\n    ${SDIR}\/deps\/tinycthread.c\\n)\\n\"\npost_target: target_link_libraries(${this} PUBLIC ${glfw_LIBRARIES})",
    "version": "3.2.1",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/glfw\/glfw",
            "tag": "3.2.1"
        }
    },
    "sha256": "e6164bdae4cc0f1a4d7f69005ffe14af6ea2fb1e39fcbdc3d104539c06cf23f0",
    "created": "2016-12-06 14:26:57.464474"
}

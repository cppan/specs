{
    "project": "pvt.cppan.demo.qtproject.qt.core",
    "version": "5.8.0",
    "cppan": "source:\n    git: https:\/\/github.com\/qt\/qtbase\n    tag: v5.8.0\n\nversion: 5.8.0\n\ntype: library\n\nroot_directory: src\/corelib\n\nfiles:\n    -   Qt5CoreMacros.cmake\n    -   animation\/.*\n    -   arch\/.*\n    -   codecs\/.*\n    -   global\/.*\n    -   io\/.*\n    -   itemmodels\/.*\n    -   json\/.*\n    -   kernel\/.*\n    -   mimetypes\/.*\n    -   plugin\/.*\n    -   statemachine\/.*\n    -   thread\/.*\n    -   tools\/.*\n    -   xml\/.*\n\nexclude_from_package:\n    -   .*\\.qdoc\n\nexclude_from_build:\n    -   io\/qfilesystemengine_unix.cpp\n    -   io\/qfilesystemengine_win.cpp\n    -   io\/qfilesystemiterator_unix.cpp\n    -   io\/qfilesystemiterator_win.cpp\n    -   io\/qfsfileengine_unix.cpp\n    -   io\/qfsfileengine_win.cpp\n    -   io\/qstandardpaths_mac.mm\n    -   io\/qstandardpaths_unix.cpp\n    -   io\/qstandardpaths_win.cpp\n    -   kernel\/qcore_foundation.mm\n    -   kernel\/qcore_mac.cpp\n    -   kernel\/qcore_mac_objc.mm\n    -   kernel\/qcoreapplication_mac.cpp\n    -   kernel\/qcoreapplication_win.cpp\n    -   plugin\/qsystemlibrary.cpp\n\noptions:\n    any:\n        definitions:\n            private:\n                -   QT_BUILD_CORE_LIB\n            public:\n                -   QT_USE_QSTRINGBUILDER\n            win32:\n                private:\n                    -   UNICODE\n                public:\n                    -   WIN32\n        link_libraries:\n            win32:\n                private:\n                    -   Mpr\n                    -   winmm\n    shared:\n        definitions:\n            public:\n                -   QT_SHARED\n    static:\n        definitions:\n            public:\n                -   QT_STATIC\n\ndependencies:\n    public:\n        pvt.cppan.demo.google.double_conversion:\n            version: 2\n        pvt.cppan.demo.pcre.pcre16:\n            version: 8\n        pvt.cppan.demo.qtproject.qt.headers.core:\n            version: \"*\"\n        pvt.cppan.demo.qtproject.qt.tools.moc:\n            version: \"*\"\n            reference: MOC_COMMAND\n        pvt.cppan.demo.qtproject.qt.tools.rcc:\n            version: \"*\"\n            reference: RCC_COMMAND\n        pvt.cppan.demo.zlib:\n            version: 1\n    private:\n        pvt.cppan.demo.qtproject.qt.third_party.harfbuzz:\n            version: \"*\"\n\npost_sources: |\n    remove_src_win32(codecs\/qiconvcodec.cpp)\n    \n    add_src_win32(io\/qfilesystemengine_win.cpp)\n    add_src_win32(io\/qfilesystemiterator_win.cpp)\n    add_src_win32(io\/qfsfileengine_win.cpp)\n    add_src_win32(kernel\/qcoreapplication_win.cpp)\n    add_src_win32(plugin\/qsystemlibrary.cpp)\n    \n    add_src_unix(io\/qfilesystemengine_unix.cpp)\n    add_src_unix(io\/qfilesystemiterator_unix.cpp)\n    add_src_unix(io\/qfsfileengine_unix.cpp)\n    \n    add_src_apple(kernel\/qcoreapplication_mac.cpp)\n    add_src_apple(kernel\/qcore_mac.cpp)\n    add_src_apple(kernel\/qcore_mac_objc.cpp)\n    add_src_apple(kernel\/qcore_foundation.cpp)\n    \n    add_src_win32(io\/qstandardpaths_win.cpp)\n    \n    add_src_unix(io\/qstandardpaths_unix.cpp)\n    \n    add_src_apple(kernel\/qcore_foundation.cpp)\n    add_src_apple(io\/qstandardpaths_mac.mm)\n    \n    # remove platform\n    remove_src_dir(*.mm)\n    remove_src_dir(*_mac.mm)\n    remove_src_dir(*_mac.cpp)\n    remove_src_dir(*_unix.cpp)\n    remove_src_dir(*_android.cpp)\n    remove_src_dir(*_systemv.cpp)\n    remove_src_dir(*_haiku.cpp)\n    remove_src_dir(*_nacl.cpp)\n    remove_src_dir(*_winrt.cpp)\n    remove_src_dir(*_glib.cpp)\n    remove_src_dir(*_inotify.cpp)\n    remove_src_dir(*_kqueue.cpp)\n    remove_src_dir(*_linux.cpp)\n    remove_src_dir(*_macx.cpp)\n    remove_src_dir(*_posix.cpp)\n    \n    remove_src_dir(*_tz.cpp)\n    \n    \n    \n    \n    remove_src_dir(*_mac.*)\n    remove_src_dir(*_unix.*)\n    remove_src_dir(*_android.*)\n    remove_src_dir(*_systemv.*)\n    remove_src_dir(*_haiku.*)\n    remove_src_dir(*_nacl.*)\n    remove_src_dir(*_winrt.*)\n    remove_src_dir(*_glib.*)\n    remove_src_dir(*_inotify.*)\n    remove_src_dir(*_kqueue.*)\n    remove_src_dir(*_linux.*)\n    remove_src_dir(*_macx.*)\n    remove_src_dir(*_posix.*)\n    \n    remove_src_dir(*_tz.*)\n    \n    remove_src_dir(*_stub.*)\n    remove_src_dir(*_generic.*)\n    \n    remove_src_dir(*_cf.*)\n    remove_src_dir(*_cf_p.*)\n    \n    remove_src_dir(*_fsevents.*)\n    remove_src_dir(*_fsevents_p.*)\n    \n    remove_src_dir(*_unix_p.*)\n    remove_src_dir(*_glib_p.*)\n    remove_src_dir(*_winrt_p.*)\n    remove_src_dir(*_kqueue_p.*)\n    remove_src_dir(*_inotify_p.*)\n    \n    \n    \n    remove_src_dir(*_icu.cpp)\n    remove_src(tools\/qunicodetables.cpp)\n    remove_src(codecs\/qicucodec.cpp)\n    \n    remove_src(kernel\/qjnionload.cpp)\n    remove_src(kernel\/qjni.cpp)\n    remove_src(kernel\/qjnihelpers.cpp)\n    \n    remove_src(kernel\/qpoll.cpp)\n    remove_src(kernel\/qcfsocketnotifier.cpp)\n    remove_src(kernel\/qppsobject.cpp)\n    remove_src(io\/forkfd_qt.cpp)\n    #\n    \n    # remove header only\n    remove_src(tools\/qchar.cpp)\n    remove_src(tools\/qstringmatcher.cpp)\n    #\n    \n    #\n    remove_src(kernel\/qtcore_eval.cpp)\n    #\n    \n    #\n    replace_in_file_once(${SDIR}\/tools\/qdoublescanprint_p.h \"#    include <double-conversion\/double-conversion.h>\" \"#    include <double-conversion.h>\")\n    #\n    \n    include(${SDIR}\/Qt5CoreMacros.cmake)\n    \n    set(moc ${src})\n    list(FILTER moc INCLUDE REGEX \".h$\")\n    \n    find_moc_targets(moc ${moc})\n    \n    set(Qt5Core_MOC_EXECUTABLE ${MOC_COMMAND})\n    qt5_wrap_cpp(moc ${moc} TARGET ${this})\n    set(src ${src} ${moc})\n    \n    set_src_header_only(\".*moc_qparallelanimationgroup.cpp$\")\n    set_src_header_only(\".*moc_qsequentialanimationgroup.cpp$\")\n    set_src_header_only(\".*moc_qbuffer.cpp$\")\n    set_src_header_only(\".*moc_qfilesystemwatcher.cpp$\")\n    set_src_header_only(\".*moc_qprocess.cpp$\")\n    set_src_header_only(\".*moc_qwinoverlappedionotifier_p.cpp$\")\n    set_src_header_only(\".*moc_qabstractproxymodel.cpp$\")\n    set_src_header_only(\".*moc_qidentityproxymodel.cpp$\")\n    set_src_header_only(\".*moc_qitemselectionmodel.cpp$\")\n    set_src_header_only(\".*moc_qsortfilterproxymodel.cpp$\")\n    set_src_header_only(\".*moc_qobject.cpp$\")\n    set_src_header_only(\".*moc_qsignalmapper.cpp$\")\n    set_src_header_only(\".*moc_qstatemachine.cpp$\")\n    \n    set_src_header_only(\".*moc_qabstractanimation.cpp$\")\n    set_src_header_only(\".*moc_qanimationgroup.cpp$\")\n    set_src_header_only(\".*moc_qpauseanimation.cpp$\")\n    set_src_header_only(\".*moc_qpropertyanimation.cpp$\")\n    set_src_header_only(\".*moc_qvariantanimation.cpp$\")\n    set_src_header_only(\".*moc_qfileselector.cpp$\")\n    set_src_header_only(\".*moc_qtimer.cpp$\")\n    set_src_header_only(\".*moc_qppsobject_p.cpp$\")\n    set_src_header_only(\".*qmutex_win.cpp$\")\n    \n    moc_cpp_file(kernel\/qtimer.cpp)\n    moc_cpp_file(statemachine\/qstatemachine.cpp)\n    \n    set(Qt5Core_RCC_EXECUTABLE ${RCC_COMMAND})\n    qt5_add_resources(rcc ${SDIR}\/mimetypes\/mimetypes.qrc)\n    set(src ${src} ${rcc})\n    \n    file_write_once(${BDIR}\/qconfig.cpp \"\n        \/* Build date *\/\n        static const char qt_configure_installation          [11  + 12] = \\\"qt_instdate=2017-01-01\\\";\n    \n        \/* Installation Info *\/\n        static const char qt_configure_prefix_path_str       [512 + 12] = \\\"qt_prfxpath=.\\\";\n        #ifdef QT_BUILD_QMAKE\n        static const char qt_configure_ext_prefix_path_str   [512 + 12] = \\\"qt_epfxpath=.\\\";\n        static const char qt_configure_host_prefix_path_str  [512 + 12] = \\\"qt_hpfxpath=.\\\";\n        #endif\n    \n        static const short qt_configure_str_offsets[] = {\n             0, 4, 12, 16, 20, 24, 32, 40, 44, 46, 48, 61, 70,\n        #ifdef QT_BUILD_QMAKE\n             76, 77, 81, 85, 87, 102,\n        #endif\n        };\n        static const char qt_configure_strs[] =\n            \\\"doc\\\\0\\\"\n            \\\"include\\\\0\\\"\n            \\\"lib\\\\0\\\"\n            \\\"bin\\\\0\\\"\n            \\\"bin\\\\0\\\"\n            \\\"plugins\\\\0\\\"\n            \\\"imports\\\\0\\\"\n            \\\"qml\\\\0\\\"\n            \\\".\\\\0\\\"\n            \\\".\\\\0\\\"\n            \\\"translations\\\\0\\\"\n            \\\"examples\\\\0\\\"\n            \\\"tests\\\\0\\\"\n        #ifdef QT_BUILD_QMAKE\n            \\\"\\\\0\\\"\n            \\\"bin\\\\0\\\"\n            \\\"lib\\\\0\\\"\n            \\\".\\\\0\\\"\n            \\\"win32-msvc2015\\\\0\\\"\n            \\\"win32-msvc2015\\\\0\\\"\n        #endif\n        ;\n    \n    \n        #ifdef QT_BUILD_QMAKE\n        # define QT_CONFIGURE_SYSROOTIFY_PREFIX false\n        #endif\n    \n    \n        #define QT_CONFIGURE_PREFIX_PATH qt_configure_prefix_path_str + 12\n        #ifdef QT_BUILD_QMAKE\n        # define QT_CONFIGURE_EXT_PREFIX_PATH qt_configure_ext_prefix_path_str + 12\n        # define QT_CONFIGURE_HOST_PREFIX_PATH qt_configure_host_prefix_path_str + 12\n        #endif\n    \")\n\npost_target: |\n    set(dirs)\n    foreach(f ${moc})\n        get_filename_component(f ${f} PATH)\n        list(APPEND dirs ${f})\n    endforeach()\n    list(REMOVE_DUPLICATES dirs)\n    foreach(d ${dirs})\n        target_include_directories(${this} PRIVATE ${d})\n    endforeach()\n\n",
    "source": {
        "git": {
            "url": "https:\/\/github.com\/qt\/qtbase",
            "tag": "v5.8.0"
        }
    },
    "sha256": "86812868ec013b21c39aaf418ce2f6090a0787c1313d8cc787ee9f13a8d81aae",
    "created": "2017-03-06 20:19:34.782074"
}

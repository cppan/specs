{
    "project": "pvt.cppan.demo.qtproject.qt.base.core",
    "cppan": "source:\n    git: git:\/\/code.qt.io\/qt\/qtbase.git\n    tag: v{v}\n\nversion: 5.11.1\n\ntype: library\n\nfiles:\n    -   mkspecs\/.*\\.h\n    -   src\/3rdparty\/easing\/easing.cpp\n    -   src\/3rdparty\/freebsd\/.*\\.c\n    -   src\/3rdparty\/md[45]\/.*\n    -   src\/3rdparty\/rfc6234\/.*\\.[hc]\n    -   src\/3rdparty\/sha1\/sha1.cpp\n    -   src\/3rdparty\/sha3\/.*\n    -   src\/corelib\/Qt5CoreMacros.cmake\n    -   src\/corelib\/animation\/.*\n    -   src\/corelib\/arch\/.*\n    -   src\/corelib\/codecs\/.*\n    -   src\/corelib\/global\/.*\n    -   src\/corelib\/io\/.*\n    -   src\/corelib\/itemmodels\/.*\n    -   src\/corelib\/json\/.*\n    -   src\/corelib\/kernel\/.*\n    -   src\/corelib\/mimetypes\/.*\n    -   src\/corelib\/plugin\/.*\n    -   src\/corelib\/serialization\/.*\n    -   src\/corelib\/statemachine\/.*\n    -   src\/corelib\/thread\/.*\n    -   src\/corelib\/tools\/.*\n    -   src\/corelib\/xml\/.*\n    -   src\/platformheaders\/.*\\.h\n\nexclude_from_package:\n    -   .*\\.qdoc\n\nexclude_from_build:\n    -   src\/3rdparty\/easing\/easing.cpp\n    -   src\/3rdparty\/freebsd\/strtoll.c\n    -   src\/3rdparty\/freebsd\/strtoull.c\n    -   src\/3rdparty\/md4\/md4.cpp\n    -   src\/3rdparty\/md5\/md5.cpp\n    -   src\/3rdparty\/rfc6234\/sha224-256.c\n    -   src\/3rdparty\/rfc6234\/sha384-512.c\n    -   src\/3rdparty\/sha1\/sha1.cpp\n    -   src\/3rdparty\/sha3\/.*\n    -   src\/corelib\/global\/qfloat16.*\n    -   src\/corelib\/io\/qfilesystemengine_unix.cpp\n    -   src\/corelib\/io\/qfilesystemengine_win.cpp\n    -   src\/corelib\/io\/qfilesystemiterator_unix.cpp\n    -   src\/corelib\/io\/qfilesystemiterator_win.cpp\n    -   src\/corelib\/io\/qfilesystemwatcher_.*\\.cpp\n    -   src\/corelib\/io\/qfsfileengine_unix.cpp\n    -   src\/corelib\/io\/qfsfileengine_win.cpp\n    -   src\/corelib\/io\/qstandardpaths_mac.mm\n    -   src\/corelib\/io\/qstandardpaths_unix.cpp\n    -   src\/corelib\/io\/qstandardpaths_win.cpp\n    -   src\/corelib\/kernel\/qcore_foundation.mm\n    -   src\/corelib\/kernel\/qcore_mac.cpp\n    -   src\/corelib\/kernel\/qcore_mac_objc.mm\n    -   src\/corelib\/kernel\/qcoreapplication_mac.cpp\n    -   src\/corelib\/kernel\/qcoreapplication_win.cpp\n    -   src\/corelib\/plugin\/qsystemlibrary.cpp\n\ninclude_directories:\n    private:\n        -   src\/corelib\/serialization\n\noptions:\n    any:\n        definitions:\n            private:\n                -   QT_BUILD_CORE_LIB\n            public:\n                -   QT_COMPILER_SUPPORTS_SIMD_ALWAYS\n                -   QT_USE_QSTRINGBUILDER\n            msvc:\n                public:\n                    -   _ENABLE_EXTENDED_ALIGNED_STORAGE\n            win32:\n                private:\n                    -   UNICODE\n                public:\n                    -   WIN32\n        link_libraries:\n            win32:\n                public:\n                    -   Mincore\n                    -   Mpr\n                    -   winmm\n    shared:\n        definitions:\n            public:\n                -   QT_SHARED\n    static:\n        definitions:\n            public:\n                -   QT_STATIC\n\ndependencies:\n    public:\n        pvt.cppan.demo.qtproject.qt.base.tools.rcc:\n            version: \"*\"\n            reference: RCC_COMMAND\n        pvt.cppan.demo.qtproject.qt.base.tools.moc:\n            version: \"*\"\n            reference: MOC_COMMAND\n        pvt.egorpugin.primitives.tools.syncqt:\n            version: master\n        pvt.cppan.demo.pcre.pcre16:\n            version: 10\n        pvt.cppan.demo.google.double_conversion:\n            version: 2\n        pvt.cppan.demo.madler.zlib:\n            version: 1\n    private:\n        pvt.cppan.demo.qtproject.qt.base.third_party.harfbuzz:\n            version: \"*\"\n\npost_sources: |\n    file_write_once(${BDIR}\/QtCore\/QtConfig \"\n        #include \\\"qconfig.h\\\"\n    \")\n    \n    file_write_once(${BDIR}\/QtCore\/qconfig.h \"\n        #define QT_FEATURE_processenvironment 1\n        #define QT_FEATURE_slog2 -1\n        #define QT_FEATURE_syslog -1\n        #define QT_FEATURE_journald -1\n        #define QT_FEATURE_framework -1\n        #define QT_FEATURE_rpath -1\n        #define QT_FEATURE_accessibility 1\n        #define QT_FEATURE_shared 1\n        #define QT_COMPILER_SUPPORTS_SSE2 1\n        #define QT_COMPILER_SUPPORTS_SSE3 1\n        #define QT_COMPILER_SUPPORTS_SSSE3 1\n        #define QT_COMPILER_SUPPORTS_SSE4_1 1\n        #define QT_COMPILER_SUPPORTS_SSE4_2 1\n        #define QT_COMPILER_SUPPORTS_AVX 1\n        #define QT_COMPILER_SUPPORTS_AVX2 1\n        #define QT_FEATURE_debug_and_release 1\n        #define QT_FEATURE_build_all 1\n        #define QT_FEATURE_c__11 1\n        #define QT_FEATURE_c__14 -1\n        #define QT_FEATURE_c__1z -1\n        #define QT_FEATURE_concurrent 1\n        #define QT_FEATURE_pkg_config -1\n        #define QT_FEATURE_force_asserts -1\n        #define QT_LARGEFILE_SUPPORT 64\n        #define QT_NO_MREMAP\n        #define QT_FEATURE_separate_debug_info -1\n        #define QT_FEATURE_simulator_and_device -1\n        #define QT_FEATURE_static -1\n    \n        #define QT_FEATURE_cxx11_future 1\n        #define QT_FEATURE_std_atomic64 1\n        #define QT_FEATURE_getentropy -1\n        #define QT_FEATURE_datetimeparser 1\n    \n        #define QT_FEATURE_future 1\n    \n        #define QT_VERSION_STR \\\"${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}\\\"\n        #define QT_VERSION_MAJOR ${PACKAGE_VERSION_MAJOR}\n        #define QT_VERSION_MINOR ${PACKAGE_VERSION_MINOR}\n        #define QT_VERSION_PATCH ${PACKAGE_VERSION_PATCH}\n    \")\n    \n    file_write_once(${BDIR}\/QtCore\/private\/qconfig_p.h \"\n        #define QT_FEATURE_sse2 1\n        #define QT_FEATURE_private_tests -1\n        #define QT_FEATURE_dbus 1\n        #define QT_FEATURE_dbus_linked -1\n        #define QT_FEATURE_gui 1\n        #define QT_FEATURE_libudev -1\n        #define QT_FEATURE_posix_fallocate -1\n        #define QT_FEATURE_reduce_exports -1\n        #define QT_FEATURE_reduce_relocations -1\n        #define QT_FEATURE_release_tools -1\n        #define QT_FEATURE_system_zlib -1\n        #define QT_FEATURE_widgets 1\n    \")\n    \n    file_write_once(${BDIR}\/QtCore\/qtcore-config.h \"\n        #define QT_FEATURE_properties 1\n        #define QT_FEATURE_animation 1\n        #define QT_FEATURE_textcodec 1\n        #define QT_FEATURE_big_codecs 1\n        #define QT_NO_CLOCK_MONOTONIC\n        #define QT_FEATURE_codecs 1\n        #define QT_FEATURE_commandlineparser 1\n        #define QT_FEATURE_textdate 1\n        #define QT_FEATURE_datestring 1\n        #define QT_NO_DYNAMIC_LIBRARY true\n        #define QT_NO_EVENTFD\n        #define QT_FEATURE_filesystemiterator 1\n        #define QT_FEATURE_filesystemwatcher 1\n        #define QT_FEATURE_gestures 1\n        #define QT_NO_GLIB\n        #define QT_NO_ICONV\n        #define QT_FEATURE_itemmodel 1\n        #define QT_FEATURE_proxymodel 1\n        #define QT_FEATURE_identityproxymodel 1\n        #define QT_NO_INOTIFY\n        #define QT_FEATURE_library 1\n        #define QT_FEATURE_mimetype 1\n        #define QT_FEATURE_process 1\n        #define QT_FEATURE_statemachine 1\n        #define QT_FEATURE_qeventtransition 1\n        #define QT_FEATURE_regularexpression 1\n        #define QT_FEATURE_settings 1\n        #define QT_FEATURE_sharedmemory 1\n        #define QT_FEATURE_sortfilterproxymodel 1\n        #define QT_FEATURE_stringlistmodel 1\n        #define QT_FEATURE_systemsemaphore 1\n        #define QT_FEATURE_temporaryfile 1\n        #define QT_FEATURE_timezone 1\n        #define QT_FEATURE_topleveldomain 1\n        #define QT_FEATURE_translation 1\n        #define QT_FEATURE_xmlstream 1\n        #define QT_FEATURE_xmlstreamreader 1\n        #define QT_FEATURE_xmlstreamwriter 1\n    \")\n    \n    file_write_once(${BDIR}\/QtCore\/private\/qtcore-config_p.h \"\n        #define QT_FEATURE_clock_gettime -1\n        #define QT_FEATURE_doubleconversion 1\n        #define QT_FEATURE_glib -1\n        #define QT_FEATURE_gnu_libiconv -1\n        #define QT_FEATURE_icu -1\n        #define QT_FEATURE_posix_libiconv -1\n        #define QT_FEATURE_iconv -1\n        #define QT_FEATURE_inotify -1\n        #define QT_FEATURE_libatomic -1\n        #define QT_FEATURE_sha3_fast 1\n        #define QT_FEATURE_system_doubleconversion -1\n        #define QT_FEATURE_system_pcre -1\n    \")\n    \n    file_write_once(${BDIR}\/QtCore\/QtCoreDepends \"\n        #ifdef __cplusplus\n        #endif\n    \")\n        \n    syncqt(QtCore QtPlatformHeaders)\n    \n    remove_src_dir(src\/3rdparty\/sha3\/*)\n    \n    remove_src_win32(src\/corelib\/codecs\/qiconvcodec.cpp)\n    \n    add_src_win32(src\/corelib\/io\/qfilesystemengine_win.cpp)\n    add_src_win32(src\/corelib\/io\/qfilesystemiterator_win.cpp)\n    if (WIN32)\n        add_src_win32(src\/corelib\/io\/qfilesystemwatcher_win.cpp)\n        #add_src_win32(src\/corelib\/io\/qfilesystemwatcher_win_p.h)\n    endif()\n    #add_src(src\/corelib\/io\/qfilesystemwatcher.h)\n    #add_src(src\/corelib\/io\/qfilesystemwatcher_p.h)\n    add_src_dir(src\/corelib\/io\/qfilesystemwatcher_polling.*)\n    add_src_win32(src\/corelib\/io\/qfsfileengine_win.cpp)\n    add_src_win32(src\/corelib\/kernel\/qcoreapplication_win.cpp)\n    add_src_win32(src\/corelib\/plugin\/qsystemlibrary.cpp)\n    \n    add_src_unix(src\/corelib\/io\/qfilesystemengine_unix.cpp)\n    add_src_unix(src\/corelib\/io\/qfilesystemiterator_unix.cpp)\n    add_src_unix(src\/corelib\/io\/qfsfileengine_unix.cpp)\n    \n    add_src_apple(src\/corelib\/kernel\/qcoreapplication_mac.cpp)\n    add_src_apple(src\/corelib\/kernel\/qcore_mac.cpp)\n    add_src_apple(src\/corelib\/kernel\/qcore_mac_objc.cpp)\n    add_src_apple(src\/corelib\/kernel\/qcore_foundation.cpp)\n    \n    add_src_win32(src\/corelib\/io\/qstandardpaths_win.cpp)\n    \n    add_src_unix(src\/corelib\/io\/qstandardpaths_unix.cpp)\n    \n    add_src_apple(src\/corelib\/kernel\/qcore_foundation.cpp)\n    add_src_apple(src\/corelib\/io\/qstandardpaths_mac.mm)\n    \n    # remove platform\n    remove_src_dir(*.mm)\n    remove_src_dir(*_mac.mm)\n    remove_src_dir(*_mac.cpp)\n    remove_src_dir(*_unix.cpp)\n    remove_src_dir(*_android.cpp)\n    remove_src_dir(*_systemv.cpp)\n    remove_src_dir(*_haiku.cpp)\n    remove_src_dir(*_nacl.cpp)\n    remove_src_dir(*_winrt.cpp)\n    remove_src_dir(*_glib.cpp)\n    remove_src_dir(*_inotify.cpp)\n    remove_src_dir(*_kqueue.cpp)\n    remove_src_dir(*_linux.cpp)\n    remove_src_dir(*_macx.cpp)\n    remove_src_dir(*_posix.cpp)\n    \n    remove_src_dir(*_tz.cpp)\n    \n    remove_src_dir(*_mac.*)\n    remove_src_dir(*_unix.*)\n    remove_src_dir(*_android.*)\n    remove_src_dir(*_systemv.*)\n    remove_src_dir(*_haiku.*)\n    remove_src_dir(*_nacl.*)\n    remove_src_dir(*_winrt.*)\n    remove_src_dir(*_glib.*)\n    remove_src_dir(*_inotify.*)\n    remove_src_dir(*_kqueue.*)\n    remove_src_dir(*_linux.*)\n    remove_src_dir(*_macx.*)\n    remove_src_dir(*_posix.*)\n    \n    remove_src_dir(*_tz.*)\n    \n    remove_src_dir(*_stub.*)\n    remove_src_dir(*_generic.*)\n    \n    remove_src_dir(*_cf.*)\n    remove_src_dir(*_cf_p.*)\n    \n    remove_src_dir(*_fsevents.*)\n    remove_src_dir(*_fsevents_p.*)\n    \n    remove_src_dir(*_unix_p.*)\n    remove_src_dir(*_glib_p.*)\n    remove_src_dir(*_winrt_p.*)\n    remove_src_dir(*_kqueue_p.*)\n    remove_src_dir(*_inotify_p.*)\n    \n    remove_src_dir(*_icu.cpp)\n    remove_src(src\/corelib\/tools\/qunicodetables.cpp)\n    remove_src(src\/corelib\/codecs\/qicucodec.cpp)\n    \n    remove_src(src\/corelib\/kernel\/qjnionload.cpp)\n    remove_src(src\/corelib\/kernel\/qjni.cpp)\n    remove_src(src\/corelib\/kernel\/qjnihelpers.cpp)\n    \n    remove_src(src\/corelib\/kernel\/qpoll.cpp)\n    remove_src(src\/corelib\/kernel\/qcfsocketnotifier.cpp)\n    remove_src(src\/corelib\/kernel\/qppsobject.cpp)\n    remove_src(src\/corelib\/io\/forkfd_qt.cpp)\n    #\n    \n    # remove header only\n    remove_src(src\/corelib\/tools\/qchar.cpp)\n    remove_src(src\/corelib\/tools\/qstringmatcher.cpp)\n    #\n    \n    #\n    remove_src(src\/corelib\/kernel\/qtcore_eval.cpp)\n    #\n    \n    #\n    replace_in_file_once(${SDIR}\/src\/corelib\/tools\/qdoublescanprint_p.h\n        \"#    include <double-conversion\/double-conversion.h>\"\n        \"#    include <double-conversion.h>\")\n    \n    replace_in_file_once(${SDIR}\/src\/corelib\/global\/qcompilerdetection.h\n        \"#    if _MSC_VER >= 1910\"\n        \"#    if _MSC_VER > 1910\")\n    #\n    \n    set(moc ${src})\n    list(FILTER moc INCLUDE REGEX \".h$\")\n    \n    find_moc_targets(moc ${moc})\n    \n    set(Qt5Core_MOC_EXECUTABLE ${MOC_COMMAND})\n    cppan_qt5_wrap_cpp(moc ${moc} TARGET ${this})\n    set(src ${src} ${moc})\n    \n    set_src_header_only(\".*moc_qparallelanimationgroup.cpp$\")\n    set_src_header_only(\".*moc_qsequentialanimationgroup.cpp$\")\n    set_src_header_only(\".*moc_qbuffer.cpp$\")\n    set_src_header_only(\".*moc_qprocess.cpp$\")\n    set_src_header_only(\".*moc_qwinoverlappedionotifier_p.cpp$\")\n    set_src_header_only(\".*moc_qabstractproxymodel.cpp$\")\n    set_src_header_only(\".*moc_qidentityproxymodel.cpp$\")\n    set_src_header_only(\".*moc_qitemselectionmodel.cpp$\")\n    set_src_header_only(\".*moc_qsortfilterproxymodel.cpp$\")\n    set_src_header_only(\".*moc_qobject.cpp$\")\n    set_src_header_only(\".*moc_qsignalmapper.cpp$\")\n    set_src_header_only(\".*moc_qstatemachine.cpp$\")\n    \n    set_src_header_only(\".*moc_qfilesystemwatcher.cpp$\")\n    set_src_header_only(\".*moc_qabstractanimation.*\")\n    set_src_header_only(\".*moc_qanimationgroup.cpp$\")\n    set_src_header_only(\".*moc_qpauseanimation.cpp$\")\n    set_src_header_only(\".*moc_qpropertyanimation.cpp$\")\n    set_src_header_only(\".*moc_qvariantanimation.cpp$\")\n    set_src_header_only(\".*moc_qfileselector.cpp$\")\n    set_src_header_only(\".*moc_qppsobject_p.cpp$\")\n    set_src_header_only(\".*moc_qnamespace.cpp$\")\n    set_src_header_only(\".*qmutex_win.cpp$\")\n    \n    set_src_header_only(\".*moc_qfile.cpp$\")\n    set_src_header_only(\".*moc_qfiledevice.cpp$\")\n    set_src_header_only(\".*moc_qiodevice.cpp$\")\n    set_src_header_only(\".*moc_qnoncontiguousbytedevice_p.cpp$\")\n    set_src_header_only(\".*moc_qsavefile.cpp$\")\n    set_src_header_only(\".*moc_qsettings.cpp$\")\n    set_src_header_only(\".*moc_qtemporaryfile.cpp$\")\n    set_src_header_only(\".*moc_qtextstream_p.cpp$\")\n    set_src_header_only(\".*moc_qabstractitemmodel.cpp$\")\n    set_src_header_only(\".*moc_qstringlistmodel.cpp$\")\n    set_src_header_only(\".*moc_qabstracteventdispatcher.cpp$\")\n    set_src_header_only(\".*moc_qcoreapplication.cpp$\")\n    set_src_header_only(\".*moc_qeventloop.cpp$\")\n    set_src_header_only(\".*moc_qmimedata.cpp$\")\n    set_src_header_only(\".*moc_qobjectcleanuphandler.cpp$\")\n    set_src_header_only(\".*moc_qsharedmemory.cpp$\")\n    set_src_header_only(\".*moc_qsocketnotifier.cpp$\")\n    set_src_header_only(\".*moc_qtimer.cpp$\")\n    set_src_header_only(\".*moc_qtranslator.cpp$\")\n    set_src_header_only(\".*moc_qfactoryloader_p.cpp$\")\n    set_src_header_only(\".*moc_qlibrary.cpp$\")\n    set_src_header_only(\".*moc_qabstractstate.cpp$\")\n    set_src_header_only(\".*moc_qabstracttransition.cpp$\")\n    set_src_header_only(\".*moc_qeventtransition.cpp$\")\n    set_src_header_only(\".*moc_qfinalstate.cpp$\")\n    set_src_header_only(\".*moc_qhistorystate.cpp$\")\n    set_src_header_only(\".*moc_qhistorystate_p.cpp$\")\n    set_src_header_only(\".*moc_qsignaltransition.cpp$\")\n    set_src_header_only(\".*moc_qstate.cpp$\")\n    set_src_header_only(\".*moc_qfuturewatcher.cpp$\")\n    set_src_header_only(\".*moc_qthread.cpp$\")\n    set_src_header_only(\".*moc_qthreadpool.cpp$\")\n    set_src_header_only(\".*moc_qcryptographichash.cpp$\")\n    set_src_header_only(\".*moc_qeasingcurve.cpp$\")\n    set_src_header_only(\".*moc_qlocale.cpp$\")\n    set_src_header_only(\".*moc_qtimeline.cpp$\")\n    set_src_header_only(\".*moc_qstandardpaths.cpp$\")\n    set_src_header_only(\".*moc_qcoreevent.cpp$\")\n    set_src_header_only(\".*moc_qpluginloader.cpp$\")\n    set_src_header_only(\".*moc_qfilesystemwatcher_p.cpp$\")\n    set_src_header_only(\".*moc_qfilesystemwatcher_polling_p.cpp$\")\n    \n    moc_cpp_file(src\/corelib\/kernel\/qtimer.cpp)\n    moc_cpp_file(src\/corelib\/statemachine\/qstatemachine.cpp)\n    moc_cpp_file(src\/corelib\/io\/qfilesystemwatcher_win.cpp)\n    \n    set(Qt5Core_RCC_EXECUTABLE ${RCC_COMMAND})\n    qt5_add_resources(rcc ${SDIR}\/src\/corelib\/mimetypes\/mimetypes.qrc)\n    set(src ${src} ${rcc})\n    \n    file_write_once(${BDIR}\/qconfig.cpp \"\n        \/* Build date *\/\n        static const char qt_configure_installation          [11  + 12] = \\\"qt_instdate=2017-01-01\\\";\n    \n        \/* Installation Info *\/\n        static const char qt_configure_prefix_path_str       [512 + 12] = \\\"qt_prfxpath=.\\\";\n        #ifdef QT_BUILD_QMAKE\n        static const char qt_configure_ext_prefix_path_str   [512 + 12] = \\\"qt_epfxpath=.\\\";\n        static const char qt_configure_host_prefix_path_str  [512 + 12] = \\\"qt_hpfxpath=.\\\";\n        #endif\n    \n        static const short qt_configure_str_offsets[] = {\n             0, 4, 12, 16, 20, 24, 32, 40, 44, 46, 48, 61, 70,\n        #ifdef QT_BUILD_QMAKE\n             76, 77, 81, 85, 87, 102,\n        #endif\n        };\n        static const char qt_configure_strs[] =\n            \\\"doc\\\\0\\\"\n            \\\"include\\\\0\\\"\n            \\\"lib\\\\0\\\"\n            \\\"bin\\\\0\\\"\n            \\\"bin\\\\0\\\"\n            \\\"plugins\\\\0\\\"\n            \\\"imports\\\\0\\\"\n            \\\"qml\\\\0\\\"\n            \\\".\\\\0\\\"\n            \\\".\\\\0\\\"\n            \\\"translations\\\\0\\\"\n            \\\"examples\\\\0\\\"\n            \\\"tests\\\\0\\\"\n        #ifdef QT_BUILD_QMAKE\n            \\\"\\\\0\\\"\n            \\\"bin\\\\0\\\"\n            \\\"lib\\\\0\\\"\n            \\\".\\\\0\\\"\n            \\\"win32-msvc2015\\\\0\\\"\n            \\\"win32-msvc2015\\\\0\\\"\n        #endif\n        ;\n    \n    \n        #ifdef QT_BUILD_QMAKE\n        # define QT_CONFIGURE_SYSROOTIFY_PREFIX false\n        #endif\n    \n    \n        #define QT_CONFIGURE_PREFIX_PATH qt_configure_prefix_path_str + 12\n        #ifdef QT_BUILD_QMAKE\n        # define QT_CONFIGURE_EXT_PREFIX_PATH qt_configure_ext_prefix_path_str + 12\n        # define QT_CONFIGURE_HOST_PREFIX_PATH qt_configure_host_prefix_path_str + 12\n        #endif\n    \")\n    \n    file_write_once(${BDIR}\/qtcore_tracepoints_p.h\n        \"#  define Q_TRACE(x, ...)\n        #  define Q_UNCONDITIONAL_TRACE(x, ...)\n        #  define Q_TRACE_ENABLED(x) false\"\n    )\n\npost_target: |\n    set(dirs)\n    foreach(f ${moc})\n        get_filename_component(f ${f} PATH)\n        list(APPEND dirs ${f})\n    endforeach()\n    list(REMOVE_DUPLICATES dirs)\n    foreach(d ${dirs})\n        target_include_directories(${this} PRIVATE ${d})\n    endforeach()\n    \n    if (MSVC)\n        target_include_directories(${this} PUBLIC ${SDIR}\/mkspecs\/win32-msvc)\n    endif()\n\ninclude_script: |\n    include($<CPPAN_THIS_PACKAGE_SDIR>\/src\/corelib\/Qt5CoreMacros.cmake)\n    \n    ########################################\n    # FUNCTION cppan_qt5_make_output_file\n    ########################################\n    \n    # macro used to create the names of output files preserving relative dirs\n    macro(cppan_qt5_make_output_file infile prefix ext outfile )\n        string(LENGTH ${CMAKE_CURRENT_BINARY_DIR} _binlength)\n        string(LENGTH ${infile} _infileLength)\n        set(_checkinfile ${CMAKE_CURRENT_SOURCE_DIR})\n        if(_infileLength GREATER _binlength)\n            string(SUBSTRING \"${infile}\" 0 ${_binlength} _checkinfile)\n            if(_checkinfile STREQUAL \"${CMAKE_CURRENT_BINARY_DIR}\")\n                file(RELATIVE_PATH rel ${CMAKE_CURRENT_BINARY_DIR} ${infile})\n            else()\n                file(RELATIVE_PATH rel ${CMAKE_CURRENT_SOURCE_DIR} ${infile})\n            endif()\n        else()\n            file(RELATIVE_PATH rel ${CMAKE_CURRENT_SOURCE_DIR} ${infile})\n        endif()\n        if(WIN32 AND rel MATCHES \"^([a-zA-Z]):(.*)$\") # absolute path\n            set(rel \"${CMAKE_MATCH_1}_${CMAKE_MATCH_2}\")\n        endif()\n        set(_outfile \"${CMAKE_CURRENT_BINARY_DIR}\/${rel}\")\n        string(REPLACE \"..\" \"__\" _outfile ${_outfile})\n        get_filename_component(outpath ${_outfile} PATH)\n        get_filename_component(_outfile ${_outfile} NAME_WE)\n        file(MAKE_DIRECTORY ${outpath})\n        set(${outfile} ${outpath}\/${prefix}${_outfile}.${ext})\n    endmacro()\n    \n    ########################################\n    # FUNCTION cppan_qt5_create_moc_command\n    ########################################\n    \n    # helper macro to set up a moc rule\n    function(cppan_qt5_create_moc_command infile outfile moc_flags moc_options moc_target moc_depends)\n        # Pass the parameters in a file.  Set the working directory to\n        # be that containing the parameters file and reference it by\n        # just the file name.  This is necessary because the moc tool on\n        # MinGW builds does not seem to handle spaces in the path to the\n        # file given with the @ syntax.\n        get_filename_component(_moc_outfile_name \"${outfile}\" NAME)\n        get_filename_component(_moc_outfile_dir \"${outfile}\" PATH)\n        if(_moc_outfile_dir)\n            set(_moc_working_dir ${_moc_outfile_dir})\n        endif()\n        set (_moc_parameters_file ${outfile}_parameters)\n        set (_moc_parameters ${moc_flags} ${moc_options} -o \"${outfile}\" \"${infile}\")\n        string (REPLACE \";\" \"\\n\" _moc_parameters \"${_moc_parameters}\")\n    \n        if(moc_target)\n            set(_moc_parameters_file ${_moc_parameters_file}$<$<BOOL:$<CONFIGURATION>>:_$<CONFIGURATION>>)\n            set(targetincludes \"$<TARGET_PROPERTY:${moc_target},INCLUDE_DIRECTORIES>\")\n            set(targetdefines \"$<TARGET_PROPERTY:${moc_target},COMPILE_DEFINITIONS>\")\n    \n            set(targetincludes \"$<$<BOOL:${targetincludes}>:-I$<JOIN:${targetincludes},\\n-I>\\n>\")\n            set(targetdefines \"$<$<BOOL:${targetdefines}>:-D$<JOIN:${targetdefines},\\n-D>\\n>\")\n    \n            file (GENERATE\n                OUTPUT ${_moc_parameters_file}\n                CONTENT \"${targetdefines}${targetincludes}${_moc_parameters}\\n\"\n            )\n    \n            set(targetincludes)\n            set(targetdefines)\n        else()\n            file(WRITE ${_moc_parameters_file} \"${_moc_parameters}\\n\")\n        endif()\n    \n        set(_moc_extra_parameters_file @${_moc_parameters_file})\n        file(APPEND ${BDIR}\/moc.list \"\\\"${_moc_working_dir}\\\" \\\"$<TARGET_FILE:${Qt5Core_MOC_EXECUTABLE}>\\\" \\\"${_moc_extra_parameters_file}\\\"\\n\")\n        set_source_files_properties(${infile} PROPERTIES SKIP_AUTOMOC ON)\n        set_source_files_properties(${outfile} PROPERTIES SKIP_AUTOMOC ON)\n        set_source_files_properties(${outfile} PROPERTIES SKIP_AUTOUIC ON)\n    endfunction()\n    \n    ########################################\n    # FUNCTION cppan_qt5_wrap_cpp\n    ########################################\n    \n    function(cppan_qt5_wrap_cpp outfiles)\n        if (CPPAN_LOCAL_PROJECT)\n            qt5_wrap_cpp(x ${ARGN})\n            set(${outfiles} ${x} PARENT_SCOPE)\n            return()\n        endif()\n    \n        # get include dirs\n        qt5_get_moc_flags(moc_flags)\n    \n        set(options)\n        set(oneValueArgs TARGET)\n        set(multiValueArgs OPTIONS DEPENDS)\n    \n        cmake_parse_arguments(_WRAP_CPP \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\" ${ARGN})\n    \n        set(moc_files ${_WRAP_CPP_UNPARSED_ARGUMENTS})\n        set(moc_options ${_WRAP_CPP_OPTIONS})\n        set(moc_target ${_WRAP_CPP_TARGET})\n        set(moc_depends ${_WRAP_CPP_DEPENDS})\n    \n        if (moc_target AND CMAKE_VERSION VERSION_LESS 2.8.12)\n            message(FATAL_ERROR \"The TARGET parameter to qt5_wrap_cpp is only available when using CMake 2.8.12 or later.\")\n        endif()\n        file(WRITE ${BDIR}\/moc.list \"\")\n        set(lst)\n        foreach(it ${moc_files})\n            get_filename_component(it ${it} ABSOLUTE)\n            cppan_qt5_make_output_file(${it} moc_ cpp outfile)\n            cppan_qt5_create_moc_command(${it} ${outfile} \"${moc_flags}\" \"${moc_options}\" \"${moc_target}\" \"${moc_depends}\")\n            list(APPEND lst ${outfile})\n        endforeach()\n        file(READ ${BDIR}\/moc.list f)\n        file(GENERATE OUTPUT ${BDIR}\/moc_$<CONFIGURATION>.list CONTENT \"${f}\")\n        list(LENGTH lst N)\n        if (${N} GREATER 0)\n            add_custom_command(OUTPUT ${lst}\n                               COMMAND ${CPPAN_COMMAND} internal-parallel-moc ${BDIR}\/moc_$<CONFIGURATION>.list\n                               DEPENDS ${moc_files} ${moc_depends})\n            set(${outfiles} ${lst} PARENT_SCOPE)\n        endif()\n    endfunction()\n    \n    ########################################\n\n",
    "source": {
        "git": {
            "url": "git:\/\/code.qt.io\/qt\/qtbase.git",
            "tag": "v{v}"
        }
    },
    "version": "5.11.1",
    "hash": "16cad6f4faf8f7ea0a1456e8e2dd9ee5a28ed206690f2cd305a210647e0a2cbe",
    "created": "2018-07-30 17:06:30.404862"
}
